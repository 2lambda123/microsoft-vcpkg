# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: MIT
#

<#
.SYNOPSIS
Process the raw xUnit result file from vcpkg tool for uploading to AZP.

.DESCRIPTION
process-test-result takes the path a xUnit file generated by `vcpkg ci` and
modifies it in-place for reporting port builds as tests in Azure pipelines.

.PARAMETER parentHashes
A JSON file containing hashes of the parent code revision.

.PARAMETER xunit
The path to the xUnit file.
#>
[CmdletBinding()]
Param(
    [Parameter(Mandatory = $true)]
    [string]$xunit,
    [string]$parentHashes
)

if (-not(Test-Path $xunit)) {
    write-error "No such file: $xunit"
}

[xml]$xmlContents = Get-Content $xunit

$knownAbiTags = @( )
if ($parentHashes) {
    Get-Content $parentHashes | ConvertFrom-Json | ForEach-Object {
        $knownAbiTags += @( $_.abi )
    }
}

# AZP uses the assembly's name as test file name.
# We want to represent (to group by) the port name.
# So we need to restructure the XML file.

$assemblyIn = $xmlContents.assemblies.SelectSingleNode('assembly')

$assemblyProtoype = $assemblyIn.CloneNode($False)
$assemblyProtoype.appendChild($assemblyIn.collection.CloneNode($False)) | Out-Null

$assembliesByName = @{ }
foreach ($test in $assemblyIn.collection.test) {

    # Remove known unaffected tests results
    $abi_tag = $test.traits.SelectSingleNode('trait[@name="abi_tag"]/@value')
    if ($abi_tag -and $knownAbiTags -match $abi_tag.Value) {
        continue
    }

    # Remove known excluded tests
    if ($test.reason -and $test.reason.InnerText -match 'EXCLUDED') {
        continue
    }

    # Choose assembly ("Test file") by port name
    $name = ($test.name -replace ':.*$')
    $assembly = $assembliesByName[$name]
    if(!$assembly) {
        $assembly = $assemblyProtoype.CloneNode($True)
        $assembly.name = $name
        $assembliesByName[$name] = $assembly
        $xmlContents.assemblies.AppendChild($assembly) | Out-Null
    }

    # Represent the triplet as "Owner" of this test result
    $ownerTrait = $xmlContents.CreateElement('trait')
    $attribute = $xmlContents.CreateAttribute('name')
    $attribute.Value = 'owner'
    $ownerTrait.Attributes.Append($attribute) | Out-Null
    $triplet = ($test.name -replace '^.*:')
    $attribute = $xmlContents.CreateAttribute('value')
    $attribute.Value = $triplet
    $ownerTrait.Attributes.Append($attribute) | Out-Null
    $test.traits.AppendChild($ownerTrait) | Out-Null

    # Insert features into "method" field
    $features = $test.traits.SelectSingleNode('trait[@name="features"]/@value')
    if ($features) {
        $test.method = $test.method -replace ':', ( '[' + ($features.Value -replace ' ', '') + ']:' )
    }

    $assembly.collection.AppendChild($test) | Out-Null
}

$xmlContents.assemblies.RemoveChild($assemblyIn) | Out-Null
$xmlContents.save($xunit)
