if(NOT _VCPKG_LINUX_TOOLCHAIN)
set(_VCPKG_LINUX_TOOLCHAIN 1)
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    set(CMAKE_CROSSCOMPILING OFF CACHE BOOL "")
endif()
set(CMAKE_SYSTEM_NAME Linux CACHE STRING "")
if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
   set(CMAKE_SYSTEM_PROCESSOR x86_64 CACHE STRING "")
elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL "x86")
   set(CMAKE_SYSTEM_PROCESSOR x86 CACHE STRING "")
   string(APPEND VCPKG_C_FLAGS " -m32")
   string(APPEND VCPKG_CXX_FLAGS " -m32")
elseif(VCPKG_TARGET_ARCHITECTURE STREQUAL "arm64")
    set(CMAKE_SYSTEM_PROCESSOR arm64 CACHE STRING "")
    # Search and set aarch64 c compiler.
    if(EXISTS "/usr/bin/aarch64-linux-gnu-gcc")
        set(CMAKE_C_COMPILER "/usr/bin/aarch64-linux-gnu-gcc")
    else()
        # List all the aarch64 c compiler.
        file(GLOB AARCH64_C_COMPILER_LIST LIST_DIRECTORIES false "/usr/bin" "aarch64*gcc-[1-9]*")
        # Select the last listed compiler.
        list(POP_BACK AARCH64_C_COMPILER_LIST CMAKE_C_COMPILER)
    endif()
    # Search and set aarch64 c++ compiler.
    if(EXISTS "/usr/bin/aarch64-linux-gnu-g++")
        set(CMAKE_CXX_COMPILER "/usr/bin/aarch64-linux-gnu-g++")
    else()
        # List all the aarch64 c compiler.
        file(GLOB AARCH64_CXX_COMPILER_LIST LIST_DIRECTORIES false "/usr/bin" "aarch64*g++-[1-9]*")
        # Select the last listed compiler.
        list(POP_BACK AARCH64_CXX_COMPILER_LIST CMAKE_CXX_COMPILER)
    endif()
endif()

get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )
if(NOT _CMAKE_IN_TRY_COMPILE)
    string(APPEND CMAKE_C_FLAGS_INIT " -fPIC ${VCPKG_C_FLAGS} ")
    string(APPEND CMAKE_CXX_FLAGS_INIT " -fPIC ${VCPKG_CXX_FLAGS} ")
    string(APPEND CMAKE_C_FLAGS_DEBUG_INIT " ${VCPKG_C_FLAGS_DEBUG} ")
    string(APPEND CMAKE_CXX_FLAGS_DEBUG_INIT " ${VCPKG_CXX_FLAGS_DEBUG} ")
    string(APPEND CMAKE_C_FLAGS_RELEASE_INIT " ${VCPKG_C_FLAGS_RELEASE} ")
    string(APPEND CMAKE_CXX_FLAGS_RELEASE_INIT " ${VCPKG_CXX_FLAGS_RELEASE} ")

    string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
    string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${VCPKG_LINKER_FLAGS} ")
    if(VCPKG_CRT_LINKAGE STREQUAL "static")
        string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT "-static ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT "-static ")
    endif()
endif()
endif()
