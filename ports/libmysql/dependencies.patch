diff --git a/CMakeLists.txt b/CMakeLists.txt
index e17ec1d0..9329249b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1942,7 +1942,7 @@ MYSQL_CHECK_RAPIDJSON()
 MYSQL_CHECK_FIDO()
 MYSQL_CHECK_FIDO_DLLS()
 
-IF(APPLE)
+IF(0)
   GET_FILENAME_COMPONENT(HOMEBREW_BASE ${HOMEBREW_HOME} DIRECTORY)
   IF(EXISTS ${HOMEBREW_BASE}/include/boost)
     FOREACH(SYSTEM_LIB ICU LIBEVENT LZ4 PROTOBUF ZSTD FIDO)
diff --git a/cmake/boost.cmake b/cmake/boost.cmake
index c979055c..53e55fcf 100644
--- a/cmake/boost.cmake
+++ b/cmake/boost.cmake
@@ -301,7 +301,7 @@ IF(NOT BOOST_MAJOR_VERSION EQUAL 10)
   COULD_NOT_FIND_BOOST()
 ENDIF()
 
-IF(NOT BOOST_MINOR_VERSION EQUAL 77)
+IF(NOT BOOST_MINOR_VERSION EQUAL 77 AND NOT IGNORE_BOOST_VERSION)
   MESSAGE(WARNING "Boost minor version found is ${BOOST_MINOR_VERSION} "
     "we need 77"
     )
diff --git a/cmake/icu.cmake b/cmake/icu.cmake
index f3c1cf06..ae2adb17 100644
--- a/cmake/icu.cmake
+++ b/cmake/icu.cmake
@@ -69,6 +69,13 @@ ENDMACRO()
 # install_root is either 'system' or is assumed to be a path.
 #
 FUNCTION(FIND_ICU install_root)
+  find_package(ICU REQUIRED COMPONENTS uc io dt in)
+  set(ICU_VERSION "${ICU_VERSION}" CACHE INTERNAL "ICU major")
+  add_library(icu_interface INTERFACE)
+  target_link_libraries(icu_interface INTERFACE ICU::uc ICU::io ICU::dt ICU::in)
+  get_target_property(ICU_INCLUDE_DIRS ICU::uc INTERFACE_INCLUDE_DIRECTORIES)
+  set_target_properties(icu_interface PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${ICU_INCLUDE_DIRS}")
+  return()
   IF("${install_root}" STREQUAL "system")
     SET(EXTRA_FIND_LIB_ARGS)
     SET(EXTRA_FIND_INC_ARGS)
diff --git a/cmake/libutils.cmake b/cmake/libutils.cmake
index e93d8e3d..1414417d 100644
--- a/cmake/libutils.cmake
+++ b/cmake/libutils.cmake
@@ -534,7 +534,7 @@ MACRO(MERGE_CONVENIENCE_LIBRARIES TARGET_ARG)
 
   # On Windows, ssleay32.lib/libeay32.lib or libssl.lib/libcrypto.lib
   # must be merged into mysqlclient.lib
-  IF(WIN32 AND ${TARGET} STREQUAL "mysqlclient")
+  IF(0)
     SET(LINKER_EXTRA_FLAGS "")
     FOREACH(LIB ${SSL_LIBRARIES})
       STRING_APPEND(LINKER_EXTRA_FLAGS " ${LIB}")
diff --git a/cmake/lz4.cmake b/cmake/lz4.cmake
index 10e7e8c8..7f95ec06 100644
--- a/cmake/lz4.cmake
+++ b/cmake/lz4.cmake
@@ -46,7 +46,7 @@ FUNCTION(FIND_SYSTEM_LZ4)
   FIND_PATH(LZ4_INCLUDE_DIR
     NAMES lz4frame.h)
   FIND_LIBRARY(LZ4_SYSTEM_LIBRARY
-    NAMES lz4)
+    NAMES lz4d lz4)
   IF (LZ4_INCLUDE_DIR AND LZ4_SYSTEM_LIBRARY)
     SET(SYSTEM_LZ4_FOUND 1 CACHE INTERNAL "")
     ADD_LIBRARY(lz4_interface INTERFACE)
diff --git a/cmake/ssl.cmake b/cmake/ssl.cmake
index 04e3af87..a8816fc1 100644
--- a/cmake/ssl.cmake
+++ b/cmake/ssl.cmake
@@ -273,7 +273,16 @@ MACRO (MYSQL_CHECK_SSL)
     FIND_ALTERNATIVE_SYSTEM_SSL()
   ENDIF()
 
-  IF(WITH_SSL STREQUAL "system" OR WITH_SSL_PATH OR ALTERNATIVE_SYSTEM_SSL)
+  IF(WITH_SSL STREQUAL "system")
+    find_package(OpenSSL REQUIRED)
+    set(OPENSSL_LIBRARY OpenSSL::SSL CACHE STRING "")
+    set(CRYPTO_LIBRARY OpenSSL::Crypto CACHE STRING "")
+    find_program(OPENSSL_EXECUTABLE openssl
+          DOC "path to the openssl executable")
+    set(SSL_DEFINES "-DHAVE_OPENSSL")
+    add_library(ext::OpenSSL ALIAS OpenSSL::SSL)
+    set(SSL_LIBRARIES ext::OpenSSL)
+  ELSEIF(WITH_SSL STREQUAL "system" OR WITH_SSL_PATH OR ALTERNATIVE_SYSTEM_SSL)
     IF((APPLE OR WIN32) AND WITH_SSL STREQUAL "system")
       # FindOpenSSL.cmake knows about
       # http://www.slproweb.com/products/Win32OpenSSL.html
diff --git a/cmake/zlib.cmake b/cmake/zlib.cmake
index 3781fe09..ac312ad0 100644
--- a/cmake/zlib.cmake
+++ b/cmake/zlib.cmake
@@ -124,7 +124,7 @@ MACRO (MYSQL_CHECK_ZLIB)
     MESSAGE(FATAL_ERROR "WITH_ZLIB must be bundled or system")
   ENDIF()
 
-  ADD_LIBRARY(ext::zlib ALIAS zlib_interface)
+  ADD_LIBRARY(ext::zlib ALIAS ZLIB::ZLIB)
 
   IF(ZLIB_VERSION VERSION_LESS MIN_ZLIB_VERSION_REQUIRED)
     MESSAGE(FATAL_ERROR
diff --git a/vio/CMakeLists.txt b/vio/CMakeLists.txt
index 474e307e..b4d0f17a 100644
--- a/vio/CMakeLists.txt
+++ b/vio/CMakeLists.txt
@@ -36,4 +36,4 @@ IF(WIN32)
   )
 ENDIF()
 
-ADD_CONVENIENCE_LIBRARY(vio ${VIO_SOURCES} LINK_LIBRARIES ${LIBSOCKET})
+ADD_CONVENIENCE_LIBRARY(vio ${VIO_SOURCES} LINK_LIBRARIES ${LIBSOCKET} ext::OpenSSL)
