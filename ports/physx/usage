[Sample port usage]

physx provides CMake targets:

    cmake_minimum_required(VERSION 3.15)

    find_package(unofficial-omniverse-physx-sdk CONFIG REQUIRED)
    target_link_libraries(main PRIVATE unofficial::omniverse-physx-sdk::sdk)

    # Optional: import the defined target to copy over the GPU acceleration libraries (3rd party provided by NVIDIA)
    if(TARGET unofficial::omniverse-physx-sdk::gpu-library)
        if(UNIX)
            # Add rpath setting to find .so libraries on unix based systems
            set_target_properties(main PROPERTIES
                BUILD_WITH_INSTALL_RPATH TRUE
                INSTALL_RPATH "$ORIGIN"
            )
        endif()
        add_custom_command(TARGET main POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                        $<TARGET_FILE:unofficial::omniverse-physx-sdk::gpu-library>
                        $<TARGET_FILE_DIR:main>)
        if(WIN32)
            add_custom_command(TARGET main POST_BUILD
                            COMMAND ${CMAKE_COMMAND} -E copy_if_different
                            $<TARGET_FILE:unofficial::omniverse-physx-sdk::gpu-device-library>
                            $<TARGET_FILE_DIR:main>)
        endif()
    else()
        message(WARNING "GPU acceleration library target not defined - GPU acceleration will NOT be available!")
    endif()

To install and build a CPU-only version of the PhysX engine (one which does not use CUDA), you can create a custom triplet file (e.g. vcpkg/triplets/community/x64-linux-nocuda.cmake) which inherits your desired triplet and ensures a CPU version is installed and built:

    # Inherit all flags but add a PX_GENERATE_GPU_PROJECTS as FALSE
    # to compile a CPU-only version of the PhysX engine
    include(${CMAKE_CURRENT_LIST_DIR}/../x64-linux.cmake)
    set(PX_GENERATE_GPU_PROJECTS FALSE)

If you build a CPU-only version, remember to drop the unofficial::omniverse-physx-sdk::gpu-library target from the targets above.
