diff --git a/cmake/FindFreeimage.cmake b/cmake/FindFreeimage.cmake
index a989ec7..7cc6f44 100644
--- a/cmake/FindFreeimage.cmake
+++ b/cmake/FindFreeimage.cmake
@@ -3,7 +3,7 @@ include (${gazebo_cmake_dir}/GazeboUtils.cmake)
 
 ########################################
 # Find packages
-if (PKG_CONFIG_FOUND)
+if (false)
   pkg_check_modules(freeimage freeimage>=${MIN_FREEIMAGE_VERSION})
   if (NOT freeimage_FOUND)
     message (STATUS "  freeimage.pc not found, trying freeimage_include_dir and freeimage_library_dir flags.")
@@ -11,6 +11,7 @@ if (PKG_CONFIG_FOUND)
 endif (PKG_CONFIG_FOUND)
 
 if (NOT freeimage_FOUND)
+  if (false)
   find_path(freeimage_INCLUDE_DIRS FreeImage.h)
   if (NOT freeimage_INCLUDE_DIRS)
     message (STATUS "  Looking for FreeImage.h - not found")
@@ -32,7 +33,11 @@ if (NOT freeimage_FOUND)
        message (STATUS "  Looking for FreeImage.h - found")
     endif (NOT FREEIMAGE_RUNS)
   endif (NOT freeimage_INCLUDE_DIRS)
+  endif()
 
+  find_package(freeimage CONFIG REQUIRED)
+  set(freeimage_LIBRARIES freeimage::FreeImage)
+  if (0)
   if (WIN32)
     if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
       find_library(freeimage_LIBRARIES FreeImaged)
@@ -49,4 +54,5 @@ if (NOT freeimage_FOUND)
     message (STATUS "  Looking for libfreeimage - found")
     include_directories(${freeimage_INCLUDE_DIRS})
   endif (NOT freeimage_LIBRARIES)
+  endif()
 endif (NOT freeimage_FOUND)
diff --git a/cmake/SearchForStuff.cmake b/cmake/SearchForStuff.cmake
index 9777a46..be03eb8 100644
--- a/cmake/SearchForStuff.cmake
+++ b/cmake/SearchForStuff.cmake
@@ -31,7 +31,10 @@ endif()
 
 ########################################
 # The Google Protobuf library for message generation + serialization
-find_package(Protobuf REQUIRED)
+find_package(protobuf CONFIG REQUIRED)
+set(GZ_PROTOBUF_LIBRARY protobuf::libprotobuf protobuf::libprotobuf-lite)
+set(GZ_PROTOBUF_PROTOC_LIBRARY protobuf::libprotoc)
+if (0)
 if (NOT PROTOBUF_FOUND)
   BUILD_ERROR ("Missing: Google Protobuf (libprotobuf-dev)")
 endif()
@@ -49,6 +52,7 @@ else()
   set (GZ_PROTOBUF_LIBRARY ${PROTOBUF_LIBRARY})
   set (GZ_PROTOBUF_PROTOC_LIBRARY ${PROTOBUF_PROTOC_LIBRARY})
 endif()
+endif()
 
 ########################################
 include (FindOpenGL)
@@ -144,7 +148,12 @@ if (PKG_CONFIG_FOUND)
   # Find Simbody
   set(SimTK_INSTALL_DIR ${SimTK_INSTALL_PREFIX})
   #list(APPEND CMAKE_MODULE_PATH ${SimTK_INSTALL_PREFIX}/share/cmake)
-  find_package(Simbody)
+  find_package(Simbody CONFIG REQUIRED)
+  if (TARGET SimTKmath_static)
+    set(Simbody_LIBRARIES SimTKmath_static SimTKcommon_static SimTKsimbody_static)
+  else()
+    set(Simbody_LIBRARIES SimTKmath SimTKcommon SimTKsimbody)
+  endif()
   if (Simbody_FOUND)
     message (STATUS "Looking for Simbody - found")
     set (HAVE_SIMBODY TRUE)
@@ -179,7 +188,7 @@ if (PKG_CONFIG_FOUND)
   # (needed, at least, for MacOS)
 
   # Use system installation on UNIX and Apple, and internal copy on Windows
-  if (UNIX OR APPLE)
+  if (true)
     message (STATUS "Using system tinyxml.")
     set (USE_EXTERNAL_TINYXML True)
   elseif(WIN32)
@@ -225,7 +234,7 @@ if (PKG_CONFIG_FOUND)
   # (needed, at least, for MacOS)
 
   # Use system installation on UNIX and Apple, and internal copy on Windows
-  if (UNIX OR APPLE)
+  if (true)
     message (STATUS "Using system tinyxml2.")
     set (USE_EXTERNAL_TINYXML2 True)
   elseif(WIN32)
@@ -329,6 +338,7 @@ if (PKG_CONFIG_FOUND)
   #################################################
   # Find OGRE
 
+  if (false)
   pkg_check_modules(OGRE-RTShaderSystem
                     OGRE-RTShaderSystem>=${MIN_OGRE_VERSION})
 
@@ -375,8 +385,8 @@ if (PKG_CONFIG_FOUND)
       set (OGRE_PLUGINDIR ${_pkgconfig_invoke_result})
     endif()
   endif()
-
-  if (NOT OGRE_FOUND)
+  endif()
+  if (true)
     # Workaround for CMake bug https://gitlab.kitware.com/cmake/cmake/issues/17135,
     # that prevents to successfully run a find_package(<package>) call if before there
     # was a failed call to pkg_check_modules(<package> <package>)
@@ -513,7 +523,7 @@ if (PKG_CONFIG_FOUND)
   endif ()
 
   if (libavutil_FOUND AND libavformat_FOUND AND libavcodec_FOUND AND
-      libswscale_FOUND)
+      libswscale_FOUND AND FFMPEG_FEATURE)
     set (HAVE_FFMPEG TRUE)
   else ()
     set (HAVE_FFMPEG FALSE)
@@ -538,7 +548,7 @@ if (PKG_CONFIG_FOUND)
   ########################################
   # Find GNU Triangulation Surface Library
   pkg_check_modules(gts gts)
-  if (gts_FOUND)
+  if (GTS_FEATURE)
     message (STATUS "Looking for GTS - found")
     set (HAVE_GTS TRUE)
   else ()
@@ -551,13 +561,14 @@ if (PKG_CONFIG_FOUND)
   # First and preferred option is to look for bullet standard pkgconfig,
   # so check it first. if it is not present, check for the OSRF
   # custom bullet2.82.pc file
-  pkg_check_modules(BULLET bullet>=2.82)
+  find_package(BULLET CONFIG 2.82)
   if (NOT BULLET_FOUND)
      pkg_check_modules(BULLET bullet2.82>=2.82)
   endif()
 
   if (BULLET_FOUND)
     set (HAVE_BULLET TRUE)
+    set(BULLET_VERSION ${BULLET_VERSION_STRING})
     add_definitions( -DLIBBULLET_VERSION=${BULLET_VERSION} )
   else()
     set (HAVE_BULLET FALSE)
@@ -572,7 +583,7 @@ if (PKG_CONFIG_FOUND)
   ########################################
   # Find libusb
   pkg_check_modules(libusb-1.0 libusb-1.0)
-  if (NOT libusb-1.0_FOUND)
+  if (NO_LIBUSB_FEATURE)
     BUILD_WARNING ("libusb-1.0 not found. USB peripherals support will be disabled.")
     set (HAVE_USB OFF CACHE BOOL "HAVE USB" FORCE)
   else()
@@ -648,7 +659,7 @@ endif ()
 ########################################
 # Find gdal
 include (FindGDAL)
-if (NOT GDAL_FOUND)
+if (NO_GDAL_FEATURE)
   message (STATUS "Looking for libgdal - not found")
   BUILD_WARNING ("GDAL not found, Digital elevation terrains support will be disabled.")
   set (HAVE_GDAL OFF CACHE BOOL "HAVE GDAL" FORCE)
@@ -732,7 +743,7 @@ endif()
 ########################################
 # Find graphviz
 include (${gazebo_cmake_dir}/FindGraphviz.cmake)
-if (NOT GRAPHVIZ_FOUND)
+if (NO_GRAPHVIZ_FEATURE)
   message (STATUS "Looking for libgraphviz-dev - not found")
   BUILD_WARNING ("Graphviz not found, Model editor's schematic view will be disabled.")
   set (HAVE_GRAPHVIZ OFF CACHE BOOL "HAVE GRAPHVIZ" FORCE)
diff --git a/cmake/gazebo-config.cmake.in b/cmake/gazebo-config.cmake.in
index b57a90d..63ce970 100644
--- a/cmake/gazebo-config.cmake.in
+++ b/cmake/gazebo-config.cmake.in
@@ -99,12 +99,13 @@ list(APPEND @PKG_NAME@_CFLAGS -I${GAZEBO_INSTALL_INCLUDE_DIR}/gazebo-@GAZEBO_MAJ
 
 if (GAZEBO_HAS_BULLET)
   if (PKG_CONFIG_FOUND)
-    pkg_check_modules(BULLET bullet>=2.82)
+    find_package(BULLET CONFIG 2.82)
     if (NOT BULLET_FOUND)
        pkg_check_modules(BULLET bullet2.82>=2.82)
     endif()
 
     if (BULLET_FOUND)
+      set(BULLET_VERSION ${BULLET_VERSION_STRING})
       add_definitions(-DLIBBULLET_VERSION=${BULLET_VERSION})
     else()
       message(FATAL_ERROR "Error: Bullet > 2.82 not found, please install libbullet2.82-dev.")
