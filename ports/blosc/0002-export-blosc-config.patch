diff --git a/CMakeLists.txt b/CMakeLists.txt
index 54d4817..20f49af 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -98,9 +98,9 @@ option(BUILD_STATIC
 option(BUILD_SHARED
     "Build a shared library version of the blosc library." ON)
 option(BUILD_TESTS
-    "Build test programs from the blosc compression library" ON)
+    "Build test programs from the blosc compression library" OFF)
 option(BUILD_FUZZERS
-    "Build fuzzer programs from the blosc compression library" ${BUILD_STATIC})
+    "Build fuzzer programs from the blosc compression library" OFF)
 # Hide symbols by default unless they're specifically exported.
 # This makes it easier to keep the set of exported symbols the
 # same across all compilers/platforms.
@@ -134,7 +134,7 @@ include(GNUInstallDirs)
 
 if(NOT DEACTIVATE_LZ4)
     if(PREFER_EXTERNAL_LZ4)
-        find_package(LZ4)
+        find_package(LZ4 NAMES lz4 CONFIG REQUIRED)
     else()
         message(STATUS "Using LZ4 internal sources.")
     endif()
@@ -144,7 +144,7 @@ if(NOT DEACTIVATE_LZ4)
 endif()
 
 if(NOT DEACTIVATE_SNAPPY)
-    find_package(Snappy)
+    find_package(Snappy CONFIG REQUIRED)
     if(SNAPPY_FOUND)
         message(STATUS "Activating support for SNAPPY.")
         set(HAVE_SNAPPY TRUE)
@@ -157,7 +157,7 @@ if(NOT DEACTIVATE_ZLIB)
     # import the ZLIB_ROOT environment variable to help finding the zlib library
     if(PREFER_EXTERNAL_ZLIB)
         set(ZLIB_ROOT $ENV{ZLIB_ROOT})
-        find_package(ZLIB)
+        find_package(ZLIB REQUIRED)
         if(NOT ZLIB_FOUND )
             message(STATUS "No zlib found.  Using internal sources.")
         endif()
@@ -171,7 +171,7 @@ endif()
 
 if(NOT DEACTIVATE_ZSTD)
     if(PREFER_EXTERNAL_ZSTD)
-        find_package(Zstd)
+        find_package(zstd CONFIG REQUIRED)
     else()
         message(STATUS "Using ZSTD internal sources.")
     endif()
diff --git a/blosc/CMakeLists.txt b/blosc/CMakeLists.txt
index 70f80a2..a504b82 100644
--- a/blosc/CMakeLists.txt
+++ b/blosc/CMakeLists.txt
@@ -9,7 +9,7 @@ endif(HIDE_SYMBOLS)
 
 # includes
 set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR})
-if(NOT DEACTIVATE_LZ4)
+if(0)
     if (LZ4_FOUND)
         set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${LZ4_INCLUDE_DIR})
     else(LZ4_FOUND)
@@ -18,7 +18,7 @@ if(NOT DEACTIVATE_LZ4)
     endif(LZ4_FOUND)
 endif(NOT DEACTIVATE_LZ4)
 
-if(NOT DEACTIVATE_SNAPPY)
+if(0)
     if (SNAPPY_FOUND)
         set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${SNAPPY_INCLUDE_DIR})
     else(SNAPPY_FOUND)
@@ -27,7 +27,7 @@ if(NOT DEACTIVATE_SNAPPY)
     endif(SNAPPY_FOUND)
 endif(NOT DEACTIVATE_SNAPPY)
 
-if(NOT DEACTIVATE_ZLIB)
+if(0)
     if (ZLIB_FOUND)
         set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${ZLIB_INCLUDE_DIR})
     else(ZLIB_FOUND)
@@ -36,7 +36,7 @@ if(NOT DEACTIVATE_ZLIB)
     endif(ZLIB_FOUND)
 endif(NOT DEACTIVATE_ZLIB)
 
-if (NOT DEACTIVATE_ZSTD)
+if (0)
     if (ZSTD_FOUND)
         set(BLOSC_INCLUDE_DIRS ${BLOSC_INCLUDE_DIRS} ${ZSTD_INCLUDE_DIR})
     else (ZSTD_FOUND)
@@ -88,37 +88,40 @@ endif(WIN32)
 
 if(NOT DEACTIVATE_LZ4)
     if(LZ4_FOUND)
-        set(LIBS ${LIBS} ${LZ4_LIBRARY})
+        set(LIBS ${LIBS} lz4::lz4)
     else(LZ4_FOUND)
         file(GLOB LZ4_FILES ${LZ4_LOCAL_DIR}/*.c)
         set(SOURCES ${SOURCES} ${LZ4_FILES})
+        set(LIBS ${LIBS} lz4::lz4)
         source_group("LZ4" FILES ${LZ4_FILES})
     endif(LZ4_FOUND)
 endif(NOT DEACTIVATE_LZ4)
 
 if(NOT DEACTIVATE_SNAPPY)
     if(SNAPPY_FOUND)
-        set(LIBS ${LIBS} ${SNAPPY_LIBRARY})
+        set(LIBS ${LIBS} Snappy::snappy)
     else(SNAPPY_FOUND)
         file(GLOB SNAPPY_FILES ${SNAPPY_LOCAL_DIR}/*.cc)
         set(SOURCES ${SOURCES} ${SNAPPY_FILES})
+        set(LIBS ${LIBS} Snappy::snappy)
         source_group("Snappy" FILES ${SNAPPY_FILES})
     endif(SNAPPY_FOUND)
 endif(NOT DEACTIVATE_SNAPPY)
 
 if(NOT DEACTIVATE_ZLIB)
     if(ZLIB_FOUND)
-        set(LIBS ${LIBS} ${ZLIB_LIBRARY})
+        set(LIBS ${LIBS} ZLIB::ZLIB)
     else(ZLIB_FOUND)
         file(GLOB ZLIB_FILES ${ZLIB_LOCAL_DIR}/*.c)
         set(SOURCES ${SOURCES} ${ZLIB_FILES})
+        set(LIBS ${LIBS} ZLIB::ZLIB)
         source_group("Zlib" FILES ${ZLIB_FILES})
     endif(ZLIB_FOUND)
 endif(NOT DEACTIVATE_ZLIB)
 
 if (NOT DEACTIVATE_ZSTD)
     if (ZSTD_FOUND)
-        set(LIBS ${LIBS} ${ZSTD_LIBRARY})
+        set(LIBS ${LIBS} $<IF:$<TARGET_EXISTS:zstd::libzstd_shared>,zstd::libzstd_shared,zstd::libzstd_static>)
     else (ZSTD_FOUND)
         # Enable assembly code only when not using MSVC *and* x86 is there
         if((NOT MSVC) AND COMPILER_SUPPORT_SSE2)   # if SSE2 is here, this is an x86 platform
@@ -136,6 +139,7 @@ if (NOT DEACTIVATE_ZSTD)
         set(ZSTD_FILES ${ZSTD_COMMON_FILES} ${ZSTD_COMPRESS_FILES}
             ${ZSTD_DECOMPRESS_FILES} ${ZSTD_DICT_FILES})
         set(SOURCES ${SOURCES} ${ZSTD_FILES})
+        set(LIBS ${LIBS} $<IF:$<TARGET_EXISTS:zstd::libzstd_shared>,zstd::libzstd_shared,zstd::libzstd_static>)
         source_group("Zstd" FILES ${ZSTD_FILES})
     endif (ZSTD_FOUND)
 endif (NOT DEACTIVATE_ZSTD)
@@ -143,14 +147,14 @@ endif (NOT DEACTIVATE_ZSTD)
 
 # targets
 if (BUILD_SHARED)
-    add_library(blosc_shared SHARED ${SOURCES})
-    set_target_properties(blosc_shared PROPERTIES OUTPUT_NAME blosc)
-    set_target_properties(blosc_shared PROPERTIES
+    add_library(blosc SHARED ${SOURCES})
+    #set_target_properties(blosc_shared PROPERTIES OUTPUT_NAME blosc)
+    set_target_properties(blosc PROPERTIES
             VERSION ${version_string}
             SOVERSION 1  # Change this when an ABI change happens
         )
     set_property(
-        TARGET blosc_shared
+        TARGET blosc
         APPEND PROPERTY COMPILE_DEFINITIONS BLOSC_SHARED_LIBRARY)
 endif()
 
@@ -206,8 +210,8 @@ if (BUILD_TESTS)
 endif()
 
 if (BUILD_SHARED)
-    target_link_libraries(blosc_shared ${LIBS})
-    target_include_directories(blosc_shared PUBLIC ${BLOSC_INCLUDE_DIRS})
+    target_link_libraries(blosc ${LIBS})
+    target_include_directories(blosc PUBLIC $<INSTALL_INTERFACE:include> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
 endif()
 
 if (BUILD_TESTS)
@@ -216,13 +220,13 @@ if (BUILD_TESTS)
 endif()
 
 if(BUILD_STATIC)
-    add_library(blosc_static STATIC ${SOURCES})
-    set_target_properties(blosc_static PROPERTIES OUTPUT_NAME blosc)
+    add_library(blosc STATIC ${SOURCES})
+    #set_target_properties(blosc_static PROPERTIES OUTPUT_NAME blosc)
     if (MSVC)
-        set_target_properties(blosc_static PROPERTIES PREFIX lib)
+        #set_target_properties(blosc_static PROPERTIES PREFIX lib)
     endif()
-    target_link_libraries(blosc_static ${LIBS})
-    target_include_directories(blosc_static PUBLIC ${BLOSC_INCLUDE_DIRS})
+    target_link_libraries(blosc ${LIBS})
+    target_include_directories(blosc PUBLIC $<INSTALL_INTERFACE:include> $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)
 endif(BUILD_STATIC)
 
 # install
@@ -230,12 +234,14 @@ if(BLOSC_INSTALL)
     install(FILES blosc.h blosc-export.h
             DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT DEV)
     if(BUILD_SHARED)
-        install(TARGETS blosc_shared
-                LIBRARY COMPONENT LIB
-                ARCHIVE COMPONENT DEV
-                RUNTIME COMPONENT LIB)
+        install(TARGETS blosc EXPORT blosc-config
+                LIBRARY DESTINATION lib
+                ARCHIVE DESTINATION lib
+                RUNTIME DESTINATION bin)
     endif(BUILD_SHARED)
     if(BUILD_STATIC)
-        install(TARGETS blosc_static COMPONENT DEV)
+        install(TARGETS blosc EXPORT blosc-config LIBRARY DESTINATION lib)
     endif(BUILD_STATIC)
 endif(BLOSC_INSTALL)
+
+install(EXPORT blosc-config DESTINATION share/blosc)
\ No newline at end of file
