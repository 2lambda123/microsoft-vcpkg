diff --git a/src/farmhash.cc b/src/farmhash.cc
index f774b89..e0fff50 100644
--- a/src/farmhash.cc
+++ b/src/farmhash.cc
@@ -2009,7 +2009,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -3531,11 +3531,11 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; IsAlive(farmhashcc::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashcc::Hash32(data, len++)); { uint128_t u = farmhashcc::Fingerprint128(data, len++); uint64_t h = Uint128Low64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); h = Uint128High64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
-Check(farmhashcc::Hash32WithSeed(data + offset, len, SEED));
-Check(farmhashcc::Hash32(data + offset, len));
-{ uint128_t u = farmhashcc::Fingerprint128(data + offset, len); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint128_t u = farmhashcc::CityHash128WithSeed(data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
+if (offset == -1) { int alive = 0; IsAlive(farmhashcc::Hash32WithSeed(::data, len++, SEED)); IsAlive(farmhashcc::Hash32(::data, len++)); { uint128_t u = farmhashcc::Fingerprint128(::data, len++); uint64_t h = Uint128Low64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); h = Uint128High64(u); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+Check(farmhashcc::Hash32WithSeed(::data + offset, len, SEED));
+Check(farmhashcc::Hash32(::data + offset, len));
+{ uint128_t u = farmhashcc::Fingerprint128(::data + offset, len); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint128_t u = farmhashcc::CityHash128WithSeed(::data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); Check(h >> 32); Check((h << 32) >> 32); h = Uint128High64(u); Check(h >> 32); Check((h << 32) >> 32); }
 
   return true;
 #undef Check
@@ -3567,10 +3567,10 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-cout << farmhashcc::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
-cout << farmhashcc::Hash32(data + offset, len) << "u," << endl;
-{ uint128_t u = farmhashcc::Fingerprint128(data + offset, len); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint128_t u = farmhashcc::CityHash128WithSeed(data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+cout << farmhashcc::Hash32WithSeed(::data + offset, len, SEED) << "u," << endl;
+cout << farmhashcc::Hash32(::data + offset, len) << "u," << endl;
+{ uint128_t u = farmhashcc::Fingerprint128(::data + offset, len); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint128_t u = farmhashcc::CityHash128WithSeed(::data + offset, len, Uint128(SEED0, SEED1)); uint64_t h = Uint128Low64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u, "; h = Uint128High64(u); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 }
 
 #endif
@@ -3629,7 +3629,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -4427,9 +4427,9 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; IsAlive(farmhashmk::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashmk::Hash32(data, len++)); IsAlive(farmhashmk::Hash32(data, len++)); len -= 3; return alive > 0; }
-Check(farmhashmk::Hash32WithSeed(data + offset, len, SEED));
-Check(farmhashmk::Hash32(data + offset, len));
+if (offset == -1) { int alive = 0; IsAlive(farmhashmk::Hash32WithSeed(::data, len++, SEED)); IsAlive(farmhashmk::Hash32(::data, len++)); IsAlive(farmhashmk::Hash32(::data, len++)); len -= 3; return alive > 0; }
+Check(farmhashmk::Hash32WithSeed(::data + offset, len, SEED));
+Check(farmhashmk::Hash32(::data + offset, len));
 
   return true;
 #undef Check
@@ -4461,8 +4461,8 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-cout << farmhashmk::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
-cout << farmhashmk::Hash32(data + offset, len) << "u," << endl;
+cout << farmhashmk::Hash32WithSeed(::data + offset, len, SEED) << "u," << endl;
+cout << farmhashmk::Hash32(::data + offset, len) << "u," << endl;
 }
 
 #endif
@@ -4521,7 +4521,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -5681,10 +5681,10 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; { uint64_t h = farmhashna::Hash64WithSeeds(data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
-{ uint64_t h = farmhashna::Hash64WithSeeds(data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashna::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashna::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashna::Hash64WithSeeds(::data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64WithSeed(::data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashna::Hash64(::data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashna::Hash64WithSeeds(::data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashna::Hash64WithSeed(::data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashna::Hash64(::data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
 
   return true;
 #undef Check
@@ -5716,9 +5716,9 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-{ uint64_t h = farmhashna::Hash64WithSeeds(data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashna::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashna::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashna::Hash64WithSeeds(::data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashna::Hash64WithSeed(::data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashna::Hash64(::data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 }
 
 #endif
@@ -5777,7 +5777,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -6575,9 +6575,9 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; IsAlive(farmhashnt::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashnt::Hash32(data, len++)); IsAlive(farmhashnt::Hash32(data, len++)); len -= 3; return alive > 0; }
-Check(farmhashnt::Hash32WithSeed(data + offset, len, SEED));
-Check(farmhashnt::Hash32(data + offset, len));
+if (offset == -1) { int alive = 0; IsAlive(farmhashnt::Hash32WithSeed(::data, len++, SEED)); IsAlive(farmhashnt::Hash32(::data, len++)); IsAlive(farmhashnt::Hash32(::data, len++)); len -= 3; return alive > 0; }
+Check(farmhashnt::Hash32WithSeed(::data + offset, len, SEED));
+Check(farmhashnt::Hash32(::data + offset, len));
 
   return true;
 #undef Check
@@ -6609,8 +6609,8 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-cout << farmhashnt::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
-cout << farmhashnt::Hash32(data + offset, len) << "u," << endl;
+cout << farmhashnt::Hash32WithSeed(::data + offset, len, SEED) << "u," << endl;
+cout << farmhashnt::Hash32(::data + offset, len) << "u," << endl;
 }
 
 #endif
@@ -6669,7 +6669,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -7467,9 +7467,9 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; IsAlive(farmhashsa::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashsa::Hash32(data, len++)); IsAlive(farmhashsa::Hash32(data, len++)); len -= 3; return alive > 0; }
-Check(farmhashsa::Hash32WithSeed(data + offset, len, SEED));
-Check(farmhashsa::Hash32(data + offset, len));
+if (offset == -1) { int alive = 0; IsAlive(farmhashsa::Hash32WithSeed(::data, len++, SEED)); IsAlive(farmhashsa::Hash32(::data, len++)); IsAlive(farmhashsa::Hash32(::data, len++)); len -= 3; return alive > 0; }
+Check(farmhashsa::Hash32WithSeed(::data + offset, len, SEED));
+Check(farmhashsa::Hash32(::data + offset, len));
 
   return true;
 #undef Check
@@ -7501,8 +7501,8 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-cout << farmhashsa::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
-cout << farmhashsa::Hash32(data + offset, len) << "u," << endl;
+cout << farmhashsa::Hash32WithSeed(::data + offset, len, SEED) << "u," << endl;
+cout << farmhashsa::Hash32(::data + offset, len) << "u," << endl;
 }
 
 #endif
@@ -7561,7 +7561,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -8359,9 +8359,9 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; IsAlive(farmhashsu::Hash32WithSeed(data, len++, SEED)); IsAlive(farmhashsu::Hash32(data, len++)); IsAlive(farmhashsu::Hash32(data, len++)); len -= 3; return alive > 0; }
-Check(farmhashsu::Hash32WithSeed(data + offset, len, SEED));
-Check(farmhashsu::Hash32(data + offset, len));
+if (offset == -1) { int alive = 0; IsAlive(farmhashsu::Hash32WithSeed(::data, len++, SEED)); IsAlive(farmhashsu::Hash32(::data, len++)); IsAlive(farmhashsu::Hash32(::data, len++)); len -= 3; return alive > 0; }
+Check(farmhashsu::Hash32WithSeed(::data + offset, len, SEED));
+Check(farmhashsu::Hash32(::data + offset, len));
 
   return true;
 #undef Check
@@ -8393,8 +8393,8 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-cout << farmhashsu::Hash32WithSeed(data + offset, len, SEED) << "u," << endl;
-cout << farmhashsu::Hash32(data + offset, len) << "u," << endl;
+cout << farmhashsu::Hash32WithSeed(::data + offset, len, SEED) << "u," << endl;
+cout << farmhashsu::Hash32(::data + offset, len) << "u," << endl;
 }
 
 #endif
@@ -8453,7 +8453,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -9613,10 +9613,10 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; { uint64_t h = farmhashte::Hash64WithSeeds(data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
-{ uint64_t h = farmhashte::Hash64WithSeeds(data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashte::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashte::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashte::Hash64WithSeeds(::data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64WithSeed(::data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashte::Hash64(::data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashte::Hash64WithSeeds(::data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashte::Hash64WithSeed(::data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashte::Hash64(::data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
 
   return true;
 #undef Check
@@ -9648,9 +9648,9 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-{ uint64_t h = farmhashte::Hash64WithSeeds(data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashte::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashte::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashte::Hash64WithSeeds(::data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashte::Hash64WithSeed(::data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashte::Hash64(::data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 }
 
 #endif
@@ -9709,7 +9709,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -10507,9 +10507,9 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; { uint64_t h = farmhashuo::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
-{ uint64_t h = farmhashuo::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashuo::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashuo::Hash64WithSeed(::data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(::data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashuo::Hash64(::data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashuo::Hash64WithSeed(::data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashuo::Hash64(::data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
 
   return true;
 #undef Check
@@ -10541,8 +10541,8 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-{ uint64_t h = farmhashuo::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashuo::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashuo::Hash64WithSeed(::data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashuo::Hash64(::data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 }
 
 #endif
@@ -10601,7 +10601,7 @@ void Setup() {
       a = (a ^ (a >> 41)) * k0;
       b = (b ^ (b >> 41)) * k0 + i;
       uint8_t u = b >> 37;
-      memcpy(data + i, &u, 1);  // uint8_t -> char
+      memcpy(::data + i, &u, 1);  // uint8_t -> char
     }
   }
 }
@@ -11761,10 +11761,10 @@ bool Test(int offset, int len = 0) {
 
   // After the following line is where the uses of "Check" and such will go.
   static int index = 0;
-if (offset == -1) { int alive = 0; { uint64_t h = farmhashxo::Hash64WithSeeds(data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64WithSeed(data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64(data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
-{ uint64_t h = farmhashxo::Hash64WithSeeds(data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashxo::Hash64WithSeed(data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
-{ uint64_t h = farmhashxo::Hash64(data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
+if (offset == -1) { int alive = 0; { uint64_t h = farmhashxo::Hash64WithSeeds(::data, len++, SEED0, SEED1); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64WithSeed(::data, len++, SEED); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } { uint64_t h = farmhashxo::Hash64(::data, len++); IsAlive(h >> 32); IsAlive((h << 32) >> 32); } len -= 3; return alive > 0; }
+{ uint64_t h = farmhashxo::Hash64WithSeeds(::data + offset, len, SEED0, SEED1); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashxo::Hash64WithSeed(::data + offset, len, SEED); Check(h >> 32); Check((h << 32) >> 32); }
+{ uint64_t h = farmhashxo::Hash64(::data + offset, len); Check(h >> 32); Check((h << 32) >> 32); }
 
   return true;
 #undef Check
@@ -11796,9 +11796,9 @@ int RunTest() {
 
 // After the following line is where the code to print hash codes will go.
 void Dump(int offset, int len) {
-{ uint64_t h = farmhashxo::Hash64WithSeeds(data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashxo::Hash64WithSeed(data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
-{ uint64_t h = farmhashxo::Hash64(data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashxo::Hash64WithSeeds(::data + offset, len, SEED0, SEED1); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashxo::Hash64WithSeed(::data + offset, len, SEED); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
+{ uint64_t h = farmhashxo::Hash64(::data + offset, len); cout << (h >> 32) << "u, " << ((h << 32) >> 32) << "u," << endl; }
 }
 
 #endif
@@ -11835,7 +11835,7 @@ int main() {
   farmhashteTest::RunTest();
   farmhashuoTest::RunTest();
   farmhashxoTest::RunTest();
-  __builtin_unreachable();
+  // __builtin_unreachable();
 }
 
 #endif  // FARMHASHSELFTEST
diff --git a/src/farmhash.cc b/src/farmhash.cc
index 2745ccd..e0fff50 100644
--- a/src/farmhash.cc
+++ b/src/farmhash.cc
@@ -71,7 +71,7 @@
 #endif
 
 // FARMHASH PORTABILITY LAYER: LIKELY and UNLIKELY
-
+#define FARMHASH_NO_BUILTIN_EXPECT
 #if !defined(LIKELY)
 #if defined(FARMHASH_NO_BUILTIN_EXPECT) || (defined(FARMHASH_OPTIONAL_BUILTIN_EXPECT) && !defined(HAVE_BUILTIN_EXPECT))
 #define LIKELY(x) (x)
