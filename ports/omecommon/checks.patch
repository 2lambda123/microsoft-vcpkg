--- ./cmake/XalanChecks.cmake
+++ ./cmake/XalanChecks.cmake
@@ -38,7 +38,7 @@
   cmake_policy(SET CMP0067 NEW)
 endif()
 
-find_package(XalanC 1.10 REQUIRED)
+find_package(XalanC 1.10 CONFIG REQUIRED)
 
 include(CheckCXXSourceRuns)
 
@@ -63,7 +63,7 @@
 XALAN_LINK)
 
 if(NOT XALAN_LINK)
-  message(FATAL_ERROR "Xalan-C++ library link test failed")
+  message(WARNING "Xalan-C++ library link test failed")
 endif(NOT XALAN_LINK)
 
 set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES_SAVE})
--- ./cmake/XercesChecks.cmake
+++ ./cmake/XercesChecks.cmake
@@ -58,7 +58,7 @@
 XERCES_LINK)
 
 if(NOT XERCES_LINK)
-  message(FATAL_ERROR "Xerces-C++ library link test failed")
+  message(WARNING "Xerces-C++ library link test failed")
 endif(NOT XERCES_LINK)
 
 set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES_SAVE})
--- a/cmake/BoostChecks.cmake
+++ b/cmake/BoostChecks.cmake
@@ -38,10 +38,6 @@
   cmake_policy(SET CMP0067 NEW)
 endif()
 
-set(Boost_USE_STATIC_LIBS OFF)
-set(Boost_USE_MULTITHREADED ON)
-set(Boost_USE_STATIC_LIBS OFF)
-
 # Log is missing for some Boost versions, so check is optional.
 if (Boost_LOG_LIBRARY_RELEASE STREQUAL "")
   set(Boost_LOG_LIBRARY_RELEASE "Boost_LOG_LIBRARY_RELEASE-NOTFOUND" CACHE FILEPATH "Logging is missing for this Boost version; reset for FindBoost" FORCE)
@@ -66,11 +62,6 @@
 include(CheckIncludeFileCXX)
 include(CheckCXXSourceCompiles)
 
-set(CMAKE_REQUIRED_DEFINITIONS_SAVE ${CMAKE_REQUIRED_DEFINITIONS})
-set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DBOOST_ALL_DYN_LINK -DBOOST_ALL_NO_LIB)
-set(CMAKE_REQUIRED_INCLUDES_SAVE ${CMAKE_REQUIRED_INCLUDES})
-set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${Boost_INCLUDE_DIRS})
-
 check_include_file_cxx(boost/log/core.hpp OME_HAVE_BOOST_LOG)
 
 # Geometry headers have missing iostream include
@@ -85,105 +76,6 @@
   message(WARNING "Spatial indexes not available with this version of Boost.Geometry; tile coverage lookups will have reduced performance (linear scan replacing quadratic R*Tree)")
 endif()
 
-set(CMAKE_REQUIRED_LIBRARIES_SAVE ${CMAKE_REQUIRED_LIBRARIES})
-set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${Boost_FILESYSTEM_LIBRARY_RELEASE} ${Boost_SYSTEM_LIBRARY_RELEASE})
-# boost::filesystem in -lboost_filesystem
-check_cxx_source_compiles(
-"#include <boost/filesystem.hpp>
-
-int main() {
-  boost::filesystem::is_directory(\"/\");
-}"
-BOOST_FILESYSTEM_LINK)
-set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES_SAVE})
-
-set(CMAKE_REQUIRED_LIBRARIES_SAVE ${CMAKE_REQUIRED_LIBRARIES})
-set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${Boost_FILESYSTEM_LIBRARY_RELEASE} ${Boost_SYSTEM_LIBRARY_RELEASE})
-# boost::filesystem in -lboost_filesystem
-check_cxx_source_compiles(
-"#include <boost/filesystem/operations.hpp>
-#include <boost/filesystem/path.hpp>
-
-int main() {
-  boost::filesystem::path absolutefile = boost::filesystem::absolute(boost::filesystem::path(\"/tmp/../foobar\"));
-}"
-OME_HAVE_BOOST_FILESYSTEM_ABSOLUTE)
-set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES_SAVE})
-
-set(CMAKE_REQUIRED_LIBRARIES_SAVE ${CMAKE_REQUIRED_LIBRARIES})
-set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${Boost_FILESYSTEM_LIBRARY_RELEASE} ${Boost_SYSTEM_LIBRARY_RELEASE})
-# boost::filesystem in -lboost_filesystem
-check_cxx_source_compiles(
-"#include <boost/filesystem/operations.hpp>
-#include <boost/filesystem/path.hpp>
-
-int main() {
-  boost::filesystem::path canonicalfile = boost::filesystem::canonical(boost::filesystem::path(\"/tmp/../foobar\"));
-}"
-OME_HAVE_BOOST_FILESYSTEM_CANONICAL)
-
-# boost::variant/boost::mpl list size limits
-check_cxx_source_compiles("
-#include <boost/mpl/insert_range.hpp>
-#include <boost/mpl/joint_view.hpp>
-#include <boost/mpl/transform_view.hpp>
-#include <boost/mpl/vector.hpp>
-
-#include <boost/variant/apply_visitor.hpp>
-#include <boost/variant/get.hpp>
-#include <boost/variant/variant.hpp>
-
-struct s1 {};
-struct s2 {};
-struct s3 {};
-struct s4 {};
-struct s5 {};
-struct s6 {};
-struct s7 {};
-struct s8 {};
-struct s9 {};
-struct s10 {};
-struct s11 {};
-struct s12 {};
-struct s13 {};
-struct s14 {};
-struct s15 {};
-struct s16 {};
-struct s17 {};
-struct s18 {};
-struct s19 {};
-struct s21 {};
-struct s20 {};
-struct s22 {};
-struct s23 {};
-struct s24 {};
-struct s25 {};
-struct s26 {};
-
-typedef boost::mpl::vector<s1, s2, s3, s4, s5, s6, s7, s8, s9> v1;
-typedef boost::mpl::vector<s10, s11, s12, s13, s14, s15, s16, s17, s18> v2;
-typedef boost::mpl::vector<s19, s20, s21, s22, s23, s24, s25, s26> v3;
-
-typedef boost::mpl::joint_view<v1, v2>::type v4;
-typedef boost::mpl::joint_view<v3, v4>::type v5;
-
-typedef boost::mpl::vector<> empty_types;
-
-typedef boost::mpl::insert_range<empty_types, boost::mpl::end<empty_types>::type, v4>::type type_list;
-
-typedef boost::make_variant_over<type_list>::type vt;
-
-void
-set (const vt& value)
-{
-  vt v = value;
-}
-
-int main() {
-  set(s5());
-  set(s25());
-}"
-OME_VARIANT_LIMIT)
-
-set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES_SAVE})
-set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS_SAVE})
+set(OME_HAVE_BOOST_FILESYSTEM_ABSOLUTE 1)
+set(OME_HAVE_BOOST_FILESYSTEM_CANONICAL 1)
+set(OME_VARIANT_LIMIT 1)
