diff --git a/BUILD.gn b/BUILD.gn
index 7b19ee86d8..a78be89180 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -6091,6 +6091,7 @@ if (is_component_build) {

     public_deps = [
       ":v8_base",
+      ":v8_initializers",
       ":v8_snapshot",
     ]

diff --git a/include/v8-cppgc.h b/include/v8-cppgc.h
index 201773f59d..f2b16463cd 100644
--- a/include/v8-cppgc.h
+++ b/include/v8-cppgc.h
@@ -77,6 +77,8 @@ struct WrapperDescriptor final {
 };

 struct V8_EXPORT CppHeapCreateParams {
+  CppHeapCreateParams(const CppHeapCreateParams&) = delete;
+  CppHeapCreateParams& operator=(const CppHeapCreateParams&) = delete;
   std::vector<std::unique_ptr<cppgc::CustomSpaceBase>> custom_spaces;
   WrapperDescriptor wrapper_descriptor;
 };
diff --git a/include/v8-fast-api-calls.h b/include/v8-fast-api-calls.h
index 3403de93ec..1c5ff23f7a 100644
--- a/include/v8-fast-api-calls.h
+++ b/include/v8-fast-api-calls.h
@@ -731,7 +731,7 @@ struct TypeInfoHelper<FastApiCallbackOptions&> {
 }  // namespace internal

 template <typename T, CTypeInfo::Flags... Flags>
-class V8_EXPORT CTypeInfoBuilder {
+class CTypeInfoBuilder {
  public:
   using BaseType = T;

diff --git a/src/codegen/code-stub-assembler.h b/src/codegen/code-stub-assembler.h
index 55485d004a..79f3be2921 100644
--- a/src/codegen/code-stub-assembler.h
+++ b/src/codegen/code-stub-assembler.h
@@ -313,7 +313,7 @@ enum class PrimitiveType { kBoolean, kNumber, kString, kSymbol };
 // it's possible to add JavaScript-specific useful CodeAssembler "macros"
 // without modifying files in the compiler directory (and requiring a review
 // from a compiler directory OWNER).
-class V8_EXPORT_PRIVATE CodeStubAssembler
+class V8_EXPORT CodeStubAssembler
     : public compiler::CodeAssembler,
       public TorqueGeneratedExportedMacrosAssembler {
  public:
diff --git a/src/common/globals.h b/src/common/globals.h
index f26b0a06e2..7e11c28525 100644
--- a/src/common/globals.h
+++ b/src/common/globals.h
@@ -1476,7 +1476,7 @@ class BinaryOperationFeedback {
 // This is distinct from BinaryOperationFeedback on purpose, because the
 // feedback that matters differs greatly as well as the way it is consumed.
 class CompareOperationFeedback {
-  enum {
+  enum : uint32_t {
     kSignedSmallFlag = 1 << 0,
     kOtherNumberFlag = 1 << 1,
     kBooleanFlag = 1 << 2,
@@ -1490,7 +1490,7 @@ class CompareOperationFeedback {
   };

  public:
-  enum Type {
+  enum Type : uint32_t {
     kNone = 0,

     kBoolean = kBooleanFlag,
diff --git a/src/compiler/node-cache.h b/src/compiler/node-cache.h
index 8e1d3d4eae..c55d8329de 100644
--- a/src/compiler/node-cache.h
+++ b/src/compiler/node-cache.h
@@ -29,7 +29,7 @@ class Node;
 // nodes such as constants, parameters, etc.
 template <typename Key, typename Hash = base::hash<Key>,
           typename Pred = std::equal_to<Key> >
-class EXPORT_TEMPLATE_DECLARE(V8_EXPORT_PRIVATE) NodeCache final {
+class V8_EXPORT_PRIVATE NodeCache final {
  public:
   explicit NodeCache(Zone* zone) : map_(zone) {}
   ~NodeCache() = default;
diff --git a/src/heap/paged-spaces-inl.h b/src/heap/paged-spaces-inl.h
index fbade0ea3d..ad401a1361 100644
--- a/src/heap/paged-spaces-inl.h
+++ b/src/heap/paged-spaces-inl.h
@@ -18,7 +18,7 @@ namespace internal {
 // -----------------------------------------------------------------------------
 // PagedSpaceObjectIterator

-HeapObject PagedSpaceObjectIterator::Next() {
+inline HeapObject PagedSpaceObjectIterator::Next() {
   do {
     HeapObject next_obj = FromCurrentPage();
     if (!next_obj.is_null()) return next_obj;
diff --git a/src/heap/paged-spaces.h b/src/heap/paged-spaces.h
index 2df7083a84..54d46ae192 100644
--- a/src/heap/paged-spaces.h
+++ b/src/heap/paged-spaces.h
@@ -47,7 +47,7 @@ class V8_EXPORT_PRIVATE PagedSpaceObjectIterator : public ObjectIterator {
   // Advance to the next object, skipping free spaces and other fillers and
   // skipping the special garbage section of which there is one per space.
   // Returns nullptr when the iteration has ended.
-  inline HeapObject Next() override;
+  HeapObject Next() override;

   // The pointer compression cage base value used for decompression of all
   // tagged values except references to Code objects.
diff --git a/src/objects/feedback-vector.cc b/src/objects/feedback-vector.cc
index f4f517f73b..875d3fc4c7 100644
--- a/src/objects/feedback-vector.cc
+++ b/src/objects/feedback-vector.cc
@@ -117,9 +117,9 @@ Handle<FeedbackMetadata> FeedbackMetadata::New(IsolateT* isolate,
   return metadata;
 }

-template Handle<FeedbackMetadata> FeedbackMetadata::New(
+template V8_EXPORT Handle<FeedbackMetadata> FeedbackMetadata::New(
     Isolate* isolate, const FeedbackVectorSpec* spec);
-template Handle<FeedbackMetadata> FeedbackMetadata::New(
+template V8_EXPORT Handle<FeedbackMetadata> FeedbackMetadata::New(
     LocalIsolate* isolate, const FeedbackVectorSpec* spec);

 bool FeedbackMetadata::SpecDiffersFrom(
diff --git a/src/objects/fixed-array-inl.h b/src/objects/fixed-array-inl.h
index 5dea891511..9d992deb0d 100644
--- a/src/objects/fixed-array-inl.h
+++ b/src/objects/fixed-array-inl.h
@@ -64,7 +64,7 @@ bool FixedArray::ContainsOnlySmisOrHoles() {
   return true;
 }

-Object FixedArray::get(int index) const {
+V8_EXPORT_PRIVATE Object FixedArray::get(int index) const {
   PtrComprCageBase cage_base = GetPtrComprCageBase(*this);
   return get(cage_base, index);
 }
@@ -83,7 +83,7 @@ bool FixedArray::is_the_hole(Isolate* isolate, int index) {
   return get(isolate, index).IsTheHole(isolate);
 }

-void FixedArray::set(int index, Smi value) {
+inline V8_EXPORT_PRIVATE void FixedArray::set(int index, Smi value) {
   DCHECK_NE(map(), GetReadOnlyRoots().fixed_cow_array_map());
   DCHECK_LT(static_cast<unsigned>(index), static_cast<unsigned>(length()));
   DCHECK(Object(value).IsSmi());
diff --git a/src/objects/fixed-array.h b/src/objects/fixed-array.h
index f0c3bfc097..6eda3ac869 100644
--- a/src/objects/fixed-array.h
+++ b/src/objects/fixed-array.h
@@ -102,7 +102,7 @@ class FixedArray
     : public TorqueGeneratedFixedArray<FixedArray, FixedArrayBase> {
  public:
   // Setter and getter for elements.
-  inline Object get(int index) const;
+  V8_EXPORT_PRIVATE inline Object get(int index) const;
   inline Object get(PtrComprCageBase cage_base, int index) const;

   static inline Handle<Object> get(FixedArray array, int index,
@@ -134,7 +134,7 @@ class FixedArray
   inline bool is_the_hole(Isolate* isolate, int index);

   // Setter that doesn't need write barrier.
-  inline void set(int index, Smi value);
+  inline V8_EXPORT_PRIVATE void set(int index, Smi value);
   // Setter with explicit barrier mode.
   inline void set(int index, Object value, WriteBarrierMode mode);

diff --git a/src/objects/intl-objects.cc b/src/objects/intl-objects.cc
index 3ac016aaa8..fbdb915a0e 100644
--- a/src/objects/intl-objects.cc
+++ b/src/objects/intl-objects.cc
@@ -958,9 +958,11 @@ Intl::CompareStringsOptions Intl::CompareStringsOptionsFor(
 }

 // Instantiations.
-template Intl::CompareStringsOptions Intl::CompareStringsOptionsFor(
+template
+V8_EXPORT_PRIVATE Intl::CompareStringsOptions Intl::CompareStringsOptionsFor(
     Isolate*, Handle<Object>, Handle<Object>);
-template Intl::CompareStringsOptions Intl::CompareStringsOptionsFor(
+template
+V8_EXPORT_PRIVATE Intl::CompareStringsOptions Intl::CompareStringsOptionsFor(
     LocalIsolate*, Handle<Object>, Handle<Object>);

 base::Optional<int> Intl::StringLocaleCompare(
@@ -2092,10 +2094,14 @@ class ResourceAvailableCurrencies {
     UErrorCode status = U_ZERO_ERROR;
     int32_t len = 0;
     const UChar* result =
-        ucurr_getName(code.getTerminatedBuffer(), "en", UCURR_LONG_NAME,
-                      nullptr, &len, &status);
+        ucurr_getName(
+		reinterpret_cast<const UChar*>(code.getTerminatedBuffer()),
+               "en", UCURR_LONG_NAME,
+                nullptr, &len, &status);
     if (U_SUCCESS(status) &&
-        u_strcmp(result, code.getTerminatedBuffer()) != 0) {
+        u_strcmp(
+	  result,
+	  reinterpret_cast<const UChar*>(code.getTerminatedBuffer())) != 0) {
       list_.push_back(currency);
     }
   }
diff --git a/src/snapshot/snapshot-utils.cc b/src/snapshot/snapshot-utils.cc
index 6db6698d7e..b56d31085f 100644
--- a/src/snapshot/snapshot-utils.cc
+++ b/src/snapshot/snapshot-utils.cc
@@ -5,7 +5,7 @@
 #include "src/snapshot/snapshot-utils.h"

 #include "src/base/sanitizer/msan.h"
-#include "third_party/zlib/zlib.h"
+#include "zlib.h"

 namespace v8 {
 namespace internal {
diff --git a/src/wasm/function-body-decoder-impl.h b/src/wasm/function-body-decoder-impl.h
index 5b7201abb6..ced9830cd6 100644
--- a/src/wasm/function-body-decoder-impl.h
+++ b/src/wasm/function-body-decoder-impl.h
@@ -1930,7 +1930,7 @@ class WasmDecoder : public Decoder {
   }

   // TODO(clemensb): This is only used by the interpreter; move there.
-  V8_EXPORT_PRIVATE std::pair<uint32_t, uint32_t> StackEffect(const byte* pc) {
+  std::pair<uint32_t, uint32_t> StackEffect(const byte* pc) {
     WasmOpcode opcode = static_cast<WasmOpcode>(*pc);
     // Handle "simple" opcodes with a fixed signature first.
     const FunctionSig* sig = WasmOpcodes::Signature(opcode);
diff --git a/test/cctest/BUILD.gn b/test/cctest/BUILD.gn
index d5d20fdfe9..e66fe366b8 100644
--- a/test/cctest/BUILD.gn
+++ b/test/cctest/BUILD.gn
@@ -501,6 +501,10 @@ v8_source_set("cctest_sources") {
     # C4309: 'static_cast': truncation of constant value
     cflags += [ "/wd4309" ]

+    if(!is_clang) {
+      cflags += [ "/wd4789" ]
+    }
+
     # MSVS wants this for gay-{precision,shortest}.cc.
     cflags += [ "/bigobj" ]

diff --git a/tools/debug_helper/BUILD.gn b/tools/debug_helper/BUILD.gn
index 2256df1f55..29e27c6af9 100644
--- a/tools/debug_helper/BUILD.gn
+++ b/tools/debug_helper/BUILD.gn
@@ -100,10 +100,12 @@ v8_component("v8_debug_helper") {
     "../..:v8_libbase",
     "../..:v8_shared_internal_headers",
     "../..:v8_tracing",
+    "../..:v8",
   ]

   configs = [ ":internal_config" ]
   if (v8_enable_i18n_support) {
+    public_deps = [ "//third_party/icu" ]
     configs += [ "//third_party/icu:icu_config" ]
   }

diff --git a/tools/v8windbg/BUILD.gn b/tools/v8windbg/BUILD.gn
index 5516a6109f..a1c53fceac 100644
--- a/tools/v8windbg/BUILD.gn
+++ b/tools/v8windbg/BUILD.gn
@@ -6,7 +6,7 @@ import("../../gni/v8.gni")

 config("v8windbg_config") {
   # Required for successful compilation of SDK header file DbgModel.h.
-  cflags_cc = [ "/Zc:twoPhase-" ]
+  cflags_cc = [ "/Zc:twoPhase-", "/std:c++latest" ]

   include_dirs = [ "../.." ]
 }
diff --git a/tools/v8windbg/base/dbgext.h b/tools/v8windbg/base/dbgext.h
index 8b36a8f361..f8d9f0d64e 100644
--- a/tools/v8windbg/base/dbgext.h
+++ b/tools/v8windbg/base/dbgext.h
@@ -9,6 +9,7 @@
 #error Unicode not defined
 #endif

+#include <new>
 #include <DbgEng.h>
 #include <DbgModel.h>
 #include <Windows.h>
diff --git a/tools/v8windbg/src/v8-debug-helper-interop.h b/tools/v8windbg/src/v8-debug-helper-interop.h
index f7d78c5dd3..1c70e54e7a 100644
--- a/tools/v8windbg/src/v8-debug-helper-interop.h
+++ b/tools/v8windbg/src/v8-debug-helper-interop.h
@@ -5,10 +5,11 @@
 #ifndef V8_TOOLS_V8WINDBG_SRC_V8_DEBUG_HELPER_INTEROP_H_
 #define V8_TOOLS_V8WINDBG_SRC_V8_DEBUG_HELPER_INTEROP_H_

-#include <wrl/client.h>
-
+#include <new>
+#include <DbgEng.h>
 #include <DbgModel.h>

+#include <wrl/client.h>
 #include <cstdint>
 #include <map>
 #include <string>
diff --git a/tools/v8windbg/test/debug-callbacks.h b/tools/v8windbg/test/debug-callbacks.h
index 8855d6ffbc..ed2b0f62e9 100644
--- a/tools/v8windbg/test/debug-callbacks.h
+++ b/tools/v8windbg/test/debug-callbacks.h
@@ -9,6 +9,7 @@
 #error Unicode not defined
 #endif

+#include <new>
 #include <DbgEng.h>
 #include <DbgModel.h>
 #include <Windows.h>
