diff --git a/src/Makefile b/src/Makefile
index bc1e049..cb6925f 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -3,3 +3,3 @@ C++ = g++
 ifndef os
-   os = LINUX
+   os = __linux__
 endif
diff --git a/src/api.cpp b/src/api.cpp
index e444218..eefdbad 100644
--- a/src/api.cpp
+++ b/src/api.cpp
@@ -40,6 +40,6 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    #include <winsock2.h>
    #include <ws2tcpip.h>
-   #ifdef LEGACY_WIN32
+   #ifdef _MSC_VER <= 1200
       #include <wspiapi.h>
@@ -73,3 +73,3 @@ m_iMuxID(-1)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_AcceptLock, NULL);
@@ -103,3 +103,3 @@ CUDTSocket::~CUDTSocket()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_AcceptLock);
@@ -138,3 +138,3 @@ m_ClosedSockets()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_ControlLock, NULL);
@@ -148,3 +148,3 @@ m_ClosedSockets()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_key_create(&m_TLSError, TLSDestroy);
@@ -160,3 +160,3 @@ CUDTUnited::~CUDTUnited()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_ControlLock);
@@ -170,3 +170,3 @@ CUDTUnited::~CUDTUnited()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_key_delete(m_TLSError);
@@ -188,3 +188,3 @@ int CUDTUnited::startup()
    // Global initialization code
-   #ifdef WIN32
+   #ifdef _WIN32
       WORD wVersionRequested;
@@ -203,3 +203,3 @@ int CUDTUnited::startup()
    m_bClosing = false;
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_GCStopLock, NULL);
@@ -232,3 +232,3 @@ int CUDTUnited::cleanup()
    m_bClosing = true;
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_cond_signal(&m_GCStopCond);
@@ -248,3 +248,3 @@ int CUDTUnited::cleanup()
    // Global destruction code
-   #ifdef WIN32
+   #ifdef _WIN32
       WSACleanup();
@@ -454,3 +454,3 @@ int CUDTUnited::newConnection(const UDTSOCKET listen, const sockaddr* peer, CHan
    // wake up a waiting accept() call
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_lock(&(ls->m_AcceptLock));
@@ -640,3 +640,3 @@ UDTSOCKET CUDTUnited::accept(const UDTSOCKET listen, sockaddr* addr, int* addrle
    // !!only one conection can be set up each time!!
-   #ifndef WIN32
+   #ifndef _WIN32
       while (!accepted)
@@ -824,3 +824,3 @@ int CUDTUnited::close(const UDTSOCKET u)
       // broadcast all "accept" waiting
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_lock(&(s->m_AcceptLock));
@@ -1318,3 +1318,3 @@ void CUDTUnited::setError(CUDTException* e)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       delete (CUDTException*)pthread_getspecific(m_TLSError);
@@ -1331,3 +1331,3 @@ CUDTException* CUDTUnited::getError()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       if(NULL == pthread_getspecific(m_TLSError))
@@ -1347,3 +1347,3 @@ CUDTException* CUDTUnited::getError()
 
-#ifdef WIN32
+#ifdef _WIN32
 void CUDTUnited::checkTLSValue()
@@ -1465,3 +1465,3 @@ void CUDTUnited::updateMux(CUDTSocket* s, const CUDTSocket* ls)
 
-#ifndef WIN32
+#ifndef _WIN32
    void* CUDTUnited::garbageCollect(void* p)
@@ -1479,3 +1479,3 @@ void CUDTUnited::updateMux(CUDTSocket* s, const CUDTSocket* ls)
 
-      #ifdef WIN32
+      #ifdef _WIN32
          self->checkTLSValue();
@@ -1483,3 +1483,3 @@ void CUDTUnited::updateMux(CUDTSocket* s, const CUDTSocket* ls)
 
-      #ifndef WIN32
+      #ifndef _WIN32
          timeval now;
@@ -1542,3 +1542,3 @@ void CUDTUnited::updateMux(CUDTSocket* s, const CUDTSocket* ls)
 
-   #ifndef WIN32
+   #ifndef _WIN32
       return NULL;
diff --git a/src/api.h b/src/api.h
index 24f1a02..db7b729 100644
--- a/src/api.h
+++ b/src/api.h
@@ -216,3 +216,3 @@ private:
    pthread_key_t m_TLSError;                         // thread local error record (last error)
-   #ifndef WIN32
+   #ifndef _WIN32
       static void TLSDestroy(void* e) {if (NULL != e) delete (CUDTException*)e;}
@@ -248,3 +248,3 @@ private:
    pthread_t m_GCThread;
-   #ifndef WIN32
+   #ifndef _WIN32
       static void* garbageCollect(void*);
diff --git a/src/buffer.cpp b/src/buffer.cpp
index 327ab76..317a494 100644
--- a/src/buffer.cpp
+++ b/src/buffer.cpp
@@ -86,3 +86,3 @@ m_iCount(0)
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_BufLock, NULL);
@@ -112,3 +112,3 @@ CSndBuffer::~CSndBuffer()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_BufLock);
diff --git a/src/cache.cpp b/src/cache.cpp
index ea0aad1..9a7db80 100644
--- a/src/cache.cpp
+++ b/src/cache.cpp
@@ -40,6 +40,6 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    #include <winsock2.h>
    #include <ws2tcpip.h>
-   #ifdef LEGACY_WIN32
+   #if defined(_MSC_VER) && (_MSC_VER <= 1200)
       #include <wspiapi.h>
diff --git a/src/channel.cpp b/src/channel.cpp
index 7b010f0..a40a97b 100644
--- a/src/channel.cpp
+++ b/src/channel.cpp
@@ -40,3 +40,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #include <netdb.h>
@@ -51,3 +51,3 @@ written by
    #include <ws2tcpip.h>
-   #ifdef LEGACY_WIN32
+   #if defined(_MSC_VER) && (_MSC_VER <= 1200)
       #include <wspiapi.h>
@@ -58,3 +58,3 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    #define socklen_t int
@@ -62,3 +62,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #define NET_ERROR errno
@@ -96,3 +96,3 @@ void CChannel::open(const sockaddr* addr)
 
-   #ifdef WIN32
+   #ifdef _WIN32
       if (INVALID_SOCKET == m_iSocket)
@@ -142,3 +142,3 @@ void CChannel::setUDPSockOpt()
 {
-   #if defined(BSD) || defined(OSX)
+   #if defined(__unix__) || defined(__APPLE__)
       // BSD system will fail setsockopt if the requested buffer size exceeds system maximum value
@@ -158,3 +158,3 @@ void CChannel::setUDPSockOpt()
    tv.tv_sec = 0;
-   #if defined (BSD) || defined (OSX)
+   #if defined (__unix__) || defined (__APPLE__)
       // Known BSD bug as the day I wrote this code.
@@ -172,3 +172,3 @@ void CChannel::setUDPSockOpt()
          throw CUDTException(1, 3, NET_ERROR);
-   #elif WIN32
+   #elif _WIN32
       DWORD ot = 1; //milliseconds
@@ -185,3 +185,3 @@ void CChannel::close() const
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       ::close(m_iSocket);
@@ -245,3 +245,3 @@ int CChannel::sendto(const sockaddr* addr, CPacket& packet) const
 
-   #ifndef WIN32
+   #ifndef _WIN32
       msghdr mh;
@@ -284,3 +284,3 @@ int CChannel::recvfrom(sockaddr* addr, CPacket& packet) const
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       msghdr mh;   
diff --git a/src/common.cpp b/src/common.cpp
index 3b6ffda..204bed5 100644
--- a/src/common.cpp
+++ b/src/common.cpp
@@ -41,3 +41,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #include <cstring>
@@ -45,3 +45,3 @@ written by
    #include <unistd.h>
-   #ifdef OSX
+   #ifdef __APPLE__
       #include <mach/mach_time.h>
@@ -51,3 +51,3 @@ written by
    #include <ws2tcpip.h>
-   #ifdef LEGACY_WIN32
+   #if defined(_MSC_VER) && (_MSC_VER <= 1200)
       #include <wspiapi.h>
@@ -62,3 +62,3 @@ bool CTimer::m_bUseMicroSecond = false;
 uint64_t CTimer::s_ullCPUFrequency = CTimer::readCPUFrequency();
-#ifndef WIN32
+#ifndef _WIN32
    pthread_mutex_t CTimer::m_EventLock = PTHREAD_MUTEX_INITIALIZER;
@@ -75,3 +75,3 @@ m_TickLock()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_TickLock, NULL);
@@ -86,3 +86,3 @@ CTimer::~CTimer()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_TickLock);
@@ -118,3 +118,3 @@ void CTimer::rdtsc(uint64_t &x)
       x = (x << 32) | lval;
-   #elif defined(WIN32)
+   #elif defined(_WIN32)
       //HANDLE hCurThread = ::GetCurrentThread(); 
@@ -125,3 +125,3 @@ void CTimer::rdtsc(uint64_t &x)
          x = getTime() * s_ullCPUFrequency;
-   #elif defined(OSX)
+   #elif defined(__APPLE__)
       x = mach_absolute_time();
@@ -149,3 +149,3 @@ uint64_t CTimer::readCPUFrequency()
       frequency = (t2 - t1) / 100000;
-   #elif defined(WIN32)
+   #elif defined(_WIN32)
       int64_t ccf;
@@ -153,3 +153,3 @@ uint64_t CTimer::readCPUFrequency()
          frequency = ccf / 1000000;
-   #elif defined(OSX)
+   #elif defined(__APPLE__)
       mach_timebase_info_data_t info;
@@ -201,3 +201,3 @@ void CTimer::sleepto(uint64_t nexttime)
       #else
-         #ifndef WIN32
+         #ifndef _WIN32
             timeval now;
@@ -236,3 +236,3 @@ void CTimer::tick()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_cond_signal(&m_TickCond);
@@ -251,3 +251,3 @@ uint64_t CTimer::getTime()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       timeval t;
@@ -276,3 +276,3 @@ void CTimer::triggerEvent()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_cond_signal(&m_EventCond);
@@ -285,3 +285,3 @@ void CTimer::waitForEvent()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       timeval now;
@@ -309,3 +309,3 @@ void CTimer::sleep()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       usleep(10);
@@ -323,3 +323,3 @@ m_iLocked()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       m_iLocked = pthread_mutex_lock(&m_Mutex);
@@ -333,3 +333,3 @@ CGuard::~CGuard()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       if (0 == m_iLocked)
@@ -344,3 +344,3 @@ void CGuard::enterCS(pthread_mutex_t& lock)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_lock(&lock);
@@ -353,3 +353,3 @@ void CGuard::leaveCS(pthread_mutex_t& lock)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_unlock(&lock);
@@ -362,3 +362,3 @@ void CGuard::createMutex(pthread_mutex_t& lock)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&lock, NULL);
@@ -371,3 +371,3 @@ void CGuard::releaseMutex(pthread_mutex_t& lock)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&lock);
@@ -380,3 +380,3 @@ void CGuard::createCond(pthread_cond_t& cond)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_cond_init(&cond, NULL);
@@ -389,3 +389,3 @@ void CGuard::releaseCond(pthread_cond_t& cond)
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_cond_destroy(&cond);
@@ -403,3 +403,3 @@ m_iMinor(minor)
    if (-1 == err)
-      #ifndef WIN32
+      #ifndef _WIN32
          m_iErrno = errno;
@@ -619,3 +619,3 @@ const char* CUDTException::getErrorMessage()
       m_strMsg += ": ";
-      #ifndef WIN32
+      #ifndef _WIN32
          char errmsg[1024];
@@ -632,3 +632,3 @@ const char* CUDTException::getErrorMessage()
    // period
-   #ifndef WIN32
+   #ifndef _WIN32
       m_strMsg += ".";
diff --git a/src/common.h b/src/common.h
index 3782d61..205b090 100644
--- a/src/common.h
+++ b/src/common.h
@@ -44,3 +44,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #include <sys/time.h>
@@ -55,3 +55,3 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    // Windows compability
diff --git a/src/core.cpp b/src/core.cpp
index ba989aa..47df3bb 100644
--- a/src/core.cpp
+++ b/src/core.cpp
@@ -40,3 +40,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #include <unistd.h>
@@ -50,3 +50,3 @@ written by
    #include <ws2tcpip.h>
-   #ifdef LEGACY_WIN32
+   #if defined(_MSC_VER) && (_MSC_VER <= 1200)
       #include <wspiapi.h>
@@ -938,3 +938,3 @@ void CUDT::close()
 
-         #ifndef WIN32
+         #ifndef _WIN32
             timespec ts;
@@ -1043,3 +1043,3 @@ int CUDT::send(const char* data, int len)
          // wait here during a blocking sending
-         #ifndef WIN32
+         #ifndef _WIN32
             pthread_mutex_lock(&m_SendBlockLock);
@@ -1143,3 +1143,3 @@ int CUDT::recv(char* data, int len)
       {
-         #ifndef WIN32
+         #ifndef _WIN32
             pthread_mutex_lock(&m_RecvDataLock);
@@ -1242,3 +1242,3 @@ int CUDT::sendmsg(const char* data, int len, int msttl, bool inorder)
          // wait here during a blocking sending
-         #ifndef WIN32
+         #ifndef _WIN32
             pthread_mutex_lock(&m_SendBlockLock);
@@ -1355,3 +1355,3 @@ int CUDT::recvmsg(char* data, int len)
    {
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_lock(&m_RecvDataLock);
@@ -1457,3 +1457,3 @@ int64_t CUDT::sendfile(fstream& ifs, int64_t& offset, int64_t size, int block)
 
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_lock(&m_SendBlockLock);
@@ -1544,3 +1544,3 @@ int64_t CUDT::recvfile(fstream& ofs, int64_t& offset, int64_t size, int block)
 
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_lock(&m_RecvDataLock);
@@ -1622,3 +1622,3 @@ void CUDT::sample(CPerfMon* perf, bool clear)
 
-   #ifndef WIN32
+   #ifndef _WIN32
       if (0 == pthread_mutex_trylock(&m_ConnectionLock))
@@ -1631,3 +1631,3 @@ void CUDT::sample(CPerfMon* perf, bool clear)
 
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_unlock(&m_ConnectionLock);
@@ -1665,3 +1665,3 @@ void CUDT::initSynch()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_SendBlockLock, NULL);
@@ -1688,3 +1688,3 @@ void CUDT::destroySynch()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_SendBlockLock);
@@ -1711,3 +1711,3 @@ void CUDT::releaseSynch()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       // wake up user calls
@@ -1780,3 +1780,3 @@ void CUDT::sendCtrl(int pkttype, void* lparam, void* rparam, int size)
          // signal a waiting "recv" call if there is any data available
-         #ifndef WIN32
+         #ifndef _WIN32
             pthread_mutex_lock(&m_RecvDataLock);
@@ -2037,3 +2037,3 @@ void CUDT::processCtrl(CPacket& ctrlpkt)
 
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_lock(&m_SendBlockLock);
diff --git a/src/epoll.cpp b/src/epoll.cpp
index 0e7ddb1..ec1fe14 100644
--- a/src/epoll.cpp
+++ b/src/epoll.cpp
@@ -40,3 +40,3 @@ written by
 
-#ifdef LINUX
+#ifdef __linux__
    #include <sys/epoll.h>
@@ -72,3 +72,3 @@ int CEPoll::create()
 
-   #ifdef LINUX
+   #ifdef __linux__
    localid = epoll_create(1024);
@@ -117,3 +117,3 @@ int CEPoll::add_ssock(const int eid, const SYSSOCKET& s, const int* events)
 
-#ifdef LINUX
+#ifdef __linux__
    epoll_event ev;
@@ -167,3 +167,3 @@ int CEPoll::remove_ssock(const int eid, const SYSSOCKET& s)
 
-#ifdef LINUX
+#ifdef __linux__
    epoll_event ev;  // ev is ignored, for compatibility with old Linux kernel only.
@@ -229,3 +229,3 @@ int CEPoll::wait(const int eid, set<UDTSOCKET>* readfds, set<UDTSOCKET>* writefd
       {
-         #ifdef LINUX
+         #ifdef __linux__
          const int max_events = p->second.m_sLocals.size();
@@ -310,3 +310,3 @@ int CEPoll::release(const int eid)
 
-   #ifdef LINUX
+   #ifdef __linux__
    // release local/system epoll descriptor
diff --git a/src/list.cpp b/src/list.cpp
index 00b7e57..bf142ec 100644
--- a/src/list.cpp
+++ b/src/list.cpp
@@ -64,3 +64,3 @@ m_ListLock()
    // sender list needs mutex protection
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_ListLock, 0);
@@ -77,3 +77,3 @@ CSndLossList::~CSndLossList()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_ListLock);
diff --git a/src/packet.h b/src/packet.h
index 76cc951..216505a 100644
--- a/src/packet.h
+++ b/src/packet.h
@@ -46,3 +46,3 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    struct iovec
diff --git a/src/queue.cpp b/src/queue.cpp
index 2caea2a..3a7f7e9 100644
--- a/src/queue.cpp
+++ b/src/queue.cpp
@@ -40,6 +40,6 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    #include <winsock2.h>
    #include <ws2tcpip.h>
-   #ifdef LEGACY_WIN32
+   #if defined(_MSC_VER) && (_MSC_VER <= 1200)
       #include <wspiapi.h>
@@ -236,3 +236,3 @@ m_pTimer(NULL)
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_ListLock, NULL);
@@ -247,3 +247,3 @@ CSndUList::~CSndUList()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_ListLock);
@@ -392,3 +392,3 @@ void CSndUList::insert_(int64_t ts, const CUDT* u)
    {
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_mutex_lock(m_pWindowLock);
@@ -454,3 +454,3 @@ m_ExitCond()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_cond_init(&m_WindowCond, NULL);
@@ -468,3 +468,3 @@ CSndQueue::~CSndQueue()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_lock(&m_WindowLock);
@@ -498,3 +498,3 @@ void CSndQueue::init(CChannel* c, CTimer* t)
 
-   #ifndef WIN32
+   #ifndef _WIN32
       if (0 != pthread_create(&m_WorkerThread, NULL, CSndQueue::worker, this))
@@ -512,3 +512,3 @@ void CSndQueue::init(CChannel* c, CTimer* t)
 
-#ifndef WIN32
+#ifndef _WIN32
    void* CSndQueue::worker(void* param)
@@ -543,3 +543,3 @@ void CSndQueue::init(CChannel* c, CTimer* t)
          // wait here if there is no sockets with data to be sent
-         #ifndef WIN32
+         #ifndef _WIN32
             pthread_mutex_lock(&self->m_WindowLock);
@@ -554,3 +554,3 @@ void CSndQueue::init(CChannel* c, CTimer* t)
 
-   #ifndef WIN32
+   #ifndef _WIN32
       return NULL;
@@ -753,3 +753,3 @@ m_RIDVectorLock()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_RIDVectorLock, NULL);
@@ -762,3 +762,3 @@ CRendezvousQueue::~CRendezvousQueue()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_destroy(&m_RIDVectorLock);
@@ -886,3 +886,3 @@ m_PassCond()
 {
-   #ifndef WIN32
+   #ifndef _WIN32
       pthread_mutex_init(&m_PassLock, NULL);
@@ -904,3 +904,3 @@ CRcvQueue::~CRcvQueue()
 
-   #ifndef WIN32
+   #ifndef _WIN32
       if (0 != m_WorkerThread)
@@ -954,3 +954,3 @@ void CRcvQueue::init(int qsize, int payload, int version, int hsize, CChannel* c
 
-   #ifndef WIN32
+   #ifndef _WIN32
       if (0 != pthread_create(&m_WorkerThread, NULL, CRcvQueue::worker, this))
@@ -968,3 +968,3 @@ void CRcvQueue::init(int qsize, int payload, int version, int hsize, CChannel* c
 
-#ifndef WIN32
+#ifndef _WIN32
    void* CRcvQueue::worker(void* param)
@@ -1097,3 +1097,3 @@ TIMER_CHECK:
 
-   #ifndef WIN32
+   #ifndef _WIN32
       return NULL;
@@ -1113,3 +1113,3 @@ int CRcvQueue::recvfrom(int32_t id, CPacket& packet)
    {
-      #ifndef WIN32
+      #ifndef _WIN32
          uint64_t now = CTimer::getTime();
@@ -1238,3 +1238,3 @@ void CRcvQueue::storePkt(int32_t id, CPacket* pkt)
 
-      #ifndef WIN32
+      #ifndef _WIN32
          pthread_cond_signal(&m_PassCond);
diff --git a/src/queue.h b/src/queue.h
index 9feff18..1062a0c 100644
--- a/src/queue.h
+++ b/src/queue.h
@@ -399,3 +399,3 @@ public:
 private:
-#ifndef WIN32
+#ifndef _WIN32
    static void* worker(void* param);
@@ -459,3 +459,3 @@ public:
 private:
-#ifndef WIN32
+#ifndef _WIN32
    static void* worker(void* param);
diff --git a/src/udt.h b/src/udt.h
index 6436363..64700d1 100644
--- a/src/udt.h
+++ b/src/udt.h
@@ -44,3 +44,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #include <sys/types.h>
@@ -70,3 +70,3 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    #ifndef __MINGW__
@@ -76,7 +76,7 @@ written by
       typedef unsigned __int32 uint32_t;
-      #ifndef LEGACY_WIN32
-         typedef unsigned __int64 uint64_t;
-      #else
+      #if defined(_MSC_VER) && (_MSC_VER <= 1200)
          // VC 6.0 does not support unsigned __int64: may cause potential problems.
          typedef __int64 uint64_t;
+      #else
+         typedef unsigned __int64 uint64_t;
       #endif
@@ -97,3 +97,3 @@ written by
 
-#ifdef WIN32
+#ifdef _WIN32
    #ifndef __MINGW__
diff --git a/src/window.h b/src/window.h
index f118a26..565aeb6 100644
--- a/src/window.h
+++ b/src/window.h
@@ -44,3 +44,3 @@ written by
 
-#ifndef WIN32
+#ifndef _WIN32
    #include <sys/time.h>
