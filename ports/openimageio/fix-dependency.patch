diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 39a8d98..fd04e79 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -158,7 +158,7 @@ checked_find_package (HDF5
                    ISDEPOF      Field3D)
 checked_find_package (OpenColorIO
                    DEFINITIONS  -DUSE_OCIO=1 -DUSE_OPENCOLORIO=1)
-checked_find_package (OpenCV
+checked_find_package (OpenCV CONFIG
                    DEFINITIONS  -DUSE_OPENCV=1)
 
 # Intel TBB
@@ -168,7 +168,7 @@ checked_find_package (TBB 2017
                       PREFER_CONFIG)
 
 checked_find_package (DCMTK VERSION_MIN 3.6.1)  # For DICOM images
-checked_find_package (FFmpeg VERSION_MIN 2.6)
+checked_find_package (FFmpeg)
 checked_find_package (Field3D
                    DEPS         HDF5
                    DEFINITIONS  -DUSE_FIELD3D=1)
@@ -178,7 +178,7 @@ checked_find_package (GIF
                       RECOMMEND_MIN_REASON "for stability and thread safety")
 
 # For HEIF/HEIC/AVIF formats
-checked_find_package (Libheif VERSION_MIN 1.3
+checked_find_package (Libheif CONFIG
                       RECOMMEND_MIN 1.7
                       RECOMMEND_MIN_REASON "for AVIF support")
 if (APPLE AND LIBHEIF_VERSION VERSION_GREATER_EQUAL 1.10 AND LIBHEIF_VERSION VERSION_LESS 1.11)
@@ -186,10 +186,10 @@ if (APPLE AND LIBHEIF_VERSION VERSION_GREATER_EQUAL 1.10 AND LIBHEIF_VERSION VER
     set (Libheif_FOUND 0)
 endif ()
 
-checked_find_package (LibRaw
+checked_find_package (LibRaw CONFIG
                       RECOMMEND_MIN 0.18
                       RECOMMEND_MIN_REASON "for ACES support and better camera metadata"
-                      PRINT LibRaw_r_LIBRARIES)
+                      PRINT LibRaw_LIBRARIES)
 if (LibRaw_FOUND AND LibRaw_VERSION VERSION_LESS 0.20 AND CMAKE_CXX_STANDARD VERSION_GREATER_EQUAL 17)
     message (STATUS "${ColorYellow}WARNING When building for C++17, LibRaw should be 0.20 or higher (found ${LibRaw_VERSION}). You may get errors, depending on the compiler.${ColorReset}")
     # Currently, we issue the above warning and let them take their chances.
@@ -199,7 +199,7 @@ if (LibRaw_FOUND AND LibRaw_VERSION VERSION_LESS 0.20 AND CMAKE_CXX_STANDARD VER
     # set (LIBRAW_FOUND 0)
 endif ()
 
-checked_find_package (OpenJPEG VERSION_MIN 2.0)
+checked_find_package (OpenJPEG CONFIG)
 
 checked_find_package (OpenVDB
                       VERSION_MIN 5.0
@@ -218,13 +218,15 @@ if (OpenVDB_FOUND AND OpenVDB_VERSION VERSION_GREATER_EQUAL 8.0
     message (STATUS "${ColorRed}Not using OpenVDB -- OpenVDB ${OpenVDB_VERSION} requires C++14 or later. ${ColorReset}")
 endif ()
 
-checked_find_package (Ptex PREFER_CONFIG)
-if (NOT Ptex_FOUND OR NOT Ptex_VERSION)
-    # Fallback for inadequate Ptex exported configs. This will eventually
-    # disappear when we can 100% trust Ptex's exports.
-    unset (Ptex_FOUND)
-    checked_find_package (Ptex)
-endif ()
+checked_find_package (ptex CONFIG)
+set(PTEX_FOUND ${ptex_FOUND})
+set(PTEX_LIBRARIES Ptex::Ptex)
+checked_find_package (WebP CONFIG)
+if(WebP_FOUND)
+    set(WEBP_FOUND TRUE)
+    add_library(WebP::WebP ALIAS WebP::webp)
+    add_library(WebP::WebPDemux ALIAS WebP::webpdemux)
+endif()
 
 checked_find_package (WebP)
 
@@ -340,4 +342,7 @@ macro (find_or_download_fmt)
 endmacro()
 
 find_or_download_fmt()
+find_package(fmt CONFIG REQUIRED)
+get_property(FMT_INCLUDES TARGET fmt::fmt PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
+checked_find_package (fmt CONFIG REQUIRED)
 include_directories (${FMT_INCLUDES})
diff --git a/src/field3d.imageio/CMakeLists.txt b/src/field3d.imageio/CMakeLists.txt
index a9e54e3..00fac07 100644
--- a/src/field3d.imageio/CMakeLists.txt
+++ b/src/field3d.imageio/CMakeLists.txt
@@ -10,6 +10,6 @@ if (Field3D_FOUND)
     add_oiio_plugin (field3dinput.cpp field3doutput.cpp
                      INCLUDE_DIRS ${FIELD3D_INCLUDES}
                      LINK_LIBRARIES Field3D::Field3D
-                                    # ${HDF5_LIBRARIES}
+                                    ${HDF5_LIBRARIES}
                                     ${SZIP_LIBRARY})
 endif()
diff --git a/src/heif.imageio/CMakeLists.txt b/src/heif.imageio/CMakeLists.txt
index fed8001..884d131 100644
--- a/src/heif.imageio/CMakeLists.txt
+++ b/src/heif.imageio/CMakeLists.txt
@@ -4,7 +4,7 @@
 
 if (Libheif_FOUND)
     add_oiio_plugin (heifinput.cpp heifoutput.cpp
-                     LINK_LIBRARIES Libheif::Libheif
+                     LINK_LIBRARIES heif
                      DEFINITIONS "-DUSE_HEIF=1")
 else ()
     message (WARNING "heif plugin will not be built")
diff --git a/src/raw.imageio/CMakeLists.txt b/src/raw.imageio/CMakeLists.txt
index d235fd9..dd85c4b 100644
--- a/src/raw.imageio/CMakeLists.txt
+++ b/src/raw.imageio/CMakeLists.txt
@@ -5,7 +5,7 @@
 if (LIBRAW_FOUND)
     add_oiio_plugin (rawinput.cpp
                      INCLUDE_DIRS ${LibRaw_INCLUDE_DIR}
-                     LINK_LIBRARIES ${LibRaw_r_LIBRARIES}
+                     LINK_LIBRARIES ${LibRaw_LIBRARIES}
                      DEFINITIONS "-DUSE_LIBRAW=1" ${LibRaw_r_DEFINITIONS})
 else ()
     message (WARNING "Raw plugin will not be built")
