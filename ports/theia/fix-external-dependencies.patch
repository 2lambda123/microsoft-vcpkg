diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9c1b150..8091593 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -130,69 +130,45 @@ endif ()
 # GFlags. The namespace patch is borrow from Ceres Solver (see license in
 # FindGflags.cmake)
 find_package(Gflags REQUIRED)
-if (GFLAGS_FOUND)
-  message("-- Found Google Flags: ${GFLAGS_INCLUDE_DIRS} in namespace: ${GFLAGS_NAMESPACE}")
-  add_definitions(-DTHEIA_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})
-else (GFLAGS_FOUND)
-  message(FATAL_ERROR "Can't find Google FLAGS.")
-endif (GFLAGS_FOUND)
+if (GFLAGS_TARGET)
+  message("-- Found Google Flags target: ${GFLAGS_TARGET} in namespace: ${GFLAGS_TARGET_NAMESPACE}::")
+  add_definitions(-DTHEIA_GFLAGS_NAMESPACE=${GFLAGS_TARGET_NAMESPACE})
+endif ()
 
 # Google Logging
 message("-- Check for Google Log")
 find_package(Glog REQUIRED)
 if (GLOG_FOUND)
   message("-- Found Google Logging: ${GLOG_INCLUDE_DIRS}")
-else (GLOG_FOUND)
-  message(FATAL_ERROR "Can't find Google Logging. Please set GLOG_INCLUDE_DIR & "
-    "GLOG_LIBRARY")
-endif (GLOG_FOUND)
+endif ()
+
+# Flann
+message("-- Check for Flann")
+find_package(Flann REQUIRED)
+if (FLANN_FOUND)
+  message("-- Found Flann: ${FLANN_INCLUDE_DIRS}")
+endif ()
 
 # Ceres
 message("-- Check for Ceres")
 find_package(Ceres REQUIRED SuiteSparse)
 if (CERES_FOUND)
   message("-- Found Ceres: ${CERES_INCLUDE_DIRS}")
-else (CERES_FOUND)
-  message(FATAL_ERROR "Can't find Ceres. Please set CERES_INCLUDE_DIR & "
-    "CERES_LIBRARY")
-endif (CERES_FOUND)
+endif ()
 
 # OpenImageIO
 message("-- Check for OpenImageIO")
 find_package(OpenImageIO REQUIRED)
 if (OPENIMAGEIO_FOUND)
   message("-- Found OpenImageIO: ${OPENIMAGEIO_INCLUDE_DIRS}")
-else (OPENIMAGEIO_FOUND)
-  message(FATAL_ERROR "Can't find OpenImageIO. Please set OPENIMAGEIO_INCLUDE_DIR & "
-    "OPENIMAGEIO_LIBRARY")
-endif (OPENIMAGEIO_FOUND)
+endif ()
 
 # Suitesparse
 find_package(SuiteSparse REQUIRED)
 if (SUITESPARSE_FOUND)
-  # On Ubuntu the system install of SuiteSparse (v3.4.0) up to at least
-  # Ubuntu 13.10 cannot be used to link shared libraries.
-  if (BUILD_SHARED_LIBS AND
-      SUITESPARSE_IS_BROKEN_SHARED_LINKING_UBUNTU_SYSTEM_VERSION)
-    message(FATAL_ERROR "You are attempting to build Theia as a shared "
-      "library on Ubuntu using a system package install of SuiteSparse "
-      "3.4.0. This package is broken and does not support the "
-      "construction of shared libraries (you can still build Theia as "
-      "a static library).  If you wish to build a shared version of Theia "
-      "you should uninstall the system install of SuiteSparse "
-      "(libsuitesparse-dev) and perform a source install of SuiteSparse "
-      "(we recommend that you use the latest version), "
-      "see http://theia-solver.org/building.html for more information.")
-  endif (BUILD_SHARED_LIBS AND
-    SUITESPARSE_IS_BROKEN_SHARED_LINKING_UBUNTU_SYSTEM_VERSION)
-  message("-- Found SuiteSparse ${SUITESPARSE_VERSION}")
+  message("-- Found SuiteSparse v${SUITESPARSE_VERSION}")
   add_definitions(-DTHEIA_SUITESPARSE_VERSION="${SUITESPARSE_VERSION}")
-else (SUITESPARSE_FOUND)
-  # Disable use of SuiteSparse if it cannot be found and continue.
-  message(FATAL ERROR "Can't find SuiteSparse. This library is required "
-    "for bundle adjustment and for solving convex optimization problems. "
-    "Please set SUITESPARSE_INCLUDE_DIR & SUITESPARSE_LIBRARY")
-endif (SUITESPARSE_FOUND)
+endif ()
 
 include_directories(
   include
@@ -225,24 +201,19 @@ include_directories(
   libraries/spectra
   ${akaze_SOURCE_DIR}
   ${akaze_INCLUDE_DIR}
-  ${cereal_SOURCE_DIR}
-  ${cereal_SOURCE_DIR}/include
-  ${flann_SOURCE_DIR}
-  ${flann_SOURCE_DIR}/src/cpp
-  ${gtest_SOURCE_DIR}/include
-  ${gtest_SOURCE_DIR}
   ${optimo_SOURCE_DIR}
   ${statx_SOURCE_DIR}
   ${stlplus3_SOURCE_DIR}
   ${vlfeat_SOURCE_DIR}
-  ${visual_sfm_SOURCE_DIR})
+  ${visual_sfm_SOURCE_DIR}
+)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
 include(OptimizeTheiaCompilerFlags)
 optimizetheiacompilerflags()
 
 add_subdirectory(src/theia)
-add_subdirectory(applications)
+#add_subdirectory(applications)
 
 if (BUILD_DOCUMENTATION)
   message("-- Documentation building is enabled")
@@ -260,7 +231,13 @@ install(FILES ${THEIA_HDRS} DESTINATION include/theia)
 file(GLOB_RECURSE THEIA_INTERNAL_HDRS ${CMAKE_SOURCE_DIR}/src/theia/*.h)
 install(DIRECTORY src/theia/ DESTINATION include/theia FILES_MATCHING PATTERN "*.h")
 
-install(DIRECTORY libraries/ DESTINATION include/theia/libraries FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/akaze/ DESTINATION include/theia/libraries/akaze FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/optimo/ DESTINATION include/theia/libraries/optimo FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/spectra/ DESTINATION include/theia/libraries/spectra FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/statx/ DESTINATION include/theia/libraries/statx FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/stlplus3/ DESTINATION include/theia/libraries/stlplus3 FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/visual_sfm/ DESTINATION include/theia/libraries/visual_sfm FILES_MATCHING PATTERN "*.h*")
+install(DIRECTORY libraries/vlfeat/ DESTINATION include/theia/libraries/vlfeat FILES_MATCHING PATTERN "*.h*")
 
 # Add an uninstall target to remove all installed files.
 configure_file("${CMAKE_SOURCE_DIR}/cmake/uninstall.cmake.in"
@@ -272,17 +249,10 @@ add_custom_target(uninstall
 
 # Set up install directories. INCLUDE_INSTALL_DIR, LIB_INSTALL_DIR and
 # CMAKECONFIG_INSTALL_DIR must not be absolute paths.
-if (WIN32)
-  set(INCLUDE_INSTALL_DIR Include)
-  set(LIB_INSTALL_DIR Lib)
-  set(CMAKECONFIG_INSTALL_DIR CMake)
-  set(RELATIVE_CMAKECONFIG_INSTALL_DIR CMake)
-else ()
-  set(INCLUDE_INSTALL_DIR include)
-  set(LIB_INSTALL_DIR lib)
-  set(CMAKECONFIG_INSTALL_DIR share/Theia)
-  set(RELATIVE_CMAKECONFIG_INSTALL_DIR share/Theia)
-endif ()
+set(INCLUDE_INSTALL_DIR include)
+set(LIB_INSTALL_DIR lib)
+set(CMAKECONFIG_INSTALL_DIR share/theia)
+set(RELATIVE_CMAKECONFIG_INSTALL_DIR share/theia)
 
 # This "exports" all targets which have been put into the export set
 # "TheiaExport". This means that CMake generates a file with the given
@@ -319,9 +289,5 @@ configure_file("${CMAKE_SOURCE_DIR}/cmake/TheiaConfigVersion.cmake.in"
 # in the public API of Theia and should thus be present in THEIA_INCLUDE_DIRS.
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/TheiaConfig.cmake"
               "${CMAKE_CURRENT_BINARY_DIR}/TheiaConfigVersion.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindEigen.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindGlog.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindGflags.cmake"
-	      "${CMAKE_SOURCE_DIR}/cmake/FindOpenImageIO.cmake"
-              "${CMAKE_SOURCE_DIR}/cmake/FindSuiteSparse.cmake"
+              "${CMAKE_SOURCE_DIR}/cmake/FindOpenImageIO.cmake"
               DESTINATION ${CMAKECONFIG_INSTALL_DIR})
diff --git a/cmake/TheiaConfig.cmake.in b/cmake/TheiaConfig.cmake.in
index a3ea187..1f2f1a5 100644
--- a/cmake/TheiaConfig.cmake.in
+++ b/cmake/TheiaConfig.cmake.in
@@ -207,22 +207,28 @@ endif (NOT TARGET theia AND NOT Theia_BINARY_DIR)
 # Set the expected XX_LIBRARIES variable for FindPackage().
 set(THEIA_LIBRARIES theia)
 
+find_package(cereal REQUIRED)
+message(STATUS "Found required Theia dependency: Cereal")
+list(APPEND THEIA_LIBRARIES cereal)
+
+find_package(Flann REQUIRED)
+message(STATUS "Found required Theia dependency: Flann")
+list(APPEND THEIA_INCLUDE_DIRS ${FLANN_INCLUDE_DIR})
+list(APPEND THEIA_LIBRARIES ${FLANN_LIBRARY})
+
 # Add the libraries included with the distribution.
 set(THEIA_INTERNAL_LIB_PREFIX ${THEIA_INCLUDE_DIR}/theia/libraries)
 set(THEIA_INTERNAL_LIBS_INCLUDES
   ${THEIA_INTERNAL_LIB_PREFIX}
   ${THEIA_INTERNAL_LIB_PREFIX}/akaze
-  ${THEIA_INTERNAL_LIB_PREFIX}/cereal
-  ${THEIA_INTERNAL_LIB_PREFIX}/cereal/include
-  ${THEIA_INTERNAL_LIB_PREFIX}/flann
   ${THEIA_INTERNAL_LIB_PREFIX}/gtest
   ${THEIA_INTERNAL_LIB_PREFIX}/gtest/include
   ${THEIA_INTERNAL_LIB_PREFIX}/optimo
   ${THEIA_INTERNAL_LIB_PREFIX}/spectra
   ${THEIA_INTERNAL_LIB_PREFIX}/statx
   ${THEIA_INTERNAL_LIB_PREFIX}/stlplus3
-  ${THEIA_INTERNAL_LIB_PREFIX}/vlfeat
-  ${THEIA_INTERNAL_LIB_PREFIX}/visual_sfm)
+  ${THEIA_INTERNAL_LIB_PREFIX}/visual_sfm
+  ${THEIA_INTERNAL_LIB_PREFIX}/vlfeat)
 
 list(APPEND THEIA_INCLUDE_DIRS ${THEIA_INTERNAL_LIBS_INCLUDES})
 
diff --git a/libraries/CMakeLists.txt b/libraries/CMakeLists.txt
index 84f3829..f88d75a 100644
--- a/libraries/CMakeLists.txt
+++ b/libraries/CMakeLists.txt
@@ -5,12 +5,6 @@ endif (${BUILD_TESTING})
 # AKAZE feature extractor.
 add_subdirectory(akaze)
 
-# Cereal for portable IO.
-add_subdirectory(cereal)
-
-# Flann for fast approximate nearest neighbor searches.
-add_subdirectory(flann)
-
 # Add Optimo.
 add_subdirectory(optimo)
 
@@ -24,4 +18,4 @@ add_subdirectory(stlplus3)
 add_subdirectory(vlfeat)
 
 # Add VisualSfM files.
-add_subdirectory(visual_sfm)
\ No newline at end of file
+add_subdirectory(visual_sfm)
diff --git a/src/theia/CMakeLists.txt b/src/theia/CMakeLists.txt
index 6830f71..768586d 100644
--- a/src/theia/CMakeLists.txt
+++ b/src/theia/CMakeLists.txt
@@ -209,7 +209,6 @@ set(THEIA_LIBRARY_DEPENDENCIES
   ${SUITESPARSE_LIBRARIES}
   ${OPENIMAGEIO_LIBRARIES}
   akaze
-  flann_cpp
   statx
   stlplus3
   vlfeat
