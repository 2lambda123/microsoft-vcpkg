diff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt
index 1c706cd..4b9677f 100644
--- a/cpp/CMakeLists.txt
+++ b/cpp/CMakeLists.txt
@@ -625,6 +625,9 @@ if(ARROW_USE_GLOG)
   list(APPEND ARROW_LINK_LIBS GLOG::glog)
   list(APPEND ARROW_STATIC_LINK_LIBS GLOG::glog)
   list(APPEND ARROW_STATIC_INSTALL_INTERFACE_LIBS GLOG::glog)
+  if(ARROW_NEED_GFLAGS)
+    list(APPEND ARROW_STATIC_LINK_LIBS gflags::gflags)
+  endif()
   add_definitions("-DARROW_USE_GLOG")
 endif()
 
diff --git a/cpp/cmake_modules/FindBrotli.cmake b/cpp/cmake_modules/FindBrotli.cmake
index bf47915..084c580 100644
--- a/cpp/cmake_modules/FindBrotli.cmake
+++ b/cpp/cmake_modules/FindBrotli.cmake
@@ -43,6 +43,7 @@ set(BROTLI_DEC_LIB_NAMES
     ${CMAKE_STATIC_LIBRARY_PREFIX}brotlidec${CMAKE_STATIC_LIBRARY_SUFFIX})
 
 if(BROTLI_ROOT)
+  if (0)
   find_library(BROTLI_COMMON_LIBRARY
                NAMES ${BROTLI_COMMON_LIB_NAMES}
                PATHS ${BROTLI_ROOT}
@@ -63,6 +64,7 @@ if(BROTLI_ROOT)
             PATHS ${BROTLI_ROOT}
             PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES}
             NO_DEFAULT_PATH)
+  endif()
 else()
   pkg_check_modules(BROTLI_PC libbrotlicommon libbrotlienc libbrotlidec)
   if(BROTLI_PC_FOUND)
@@ -72,7 +74,7 @@ else()
     list(APPEND BROTLI_PC_LIBRARY_DIRS "${BROTLI_PC_libbrotlicommon_LIBDIR}")
     list(APPEND BROTLI_PC_LIBRARY_DIRS "${BROTLI_PC_libbrotlienc_LIBDIR}")
     list(APPEND BROTLI_PC_LIBRARY_DIRS "${BROTLI_PC_libbrotlidec_LIBDIR}")
-
+    if (0)
     find_library(BROTLI_COMMON_LIBRARY
                  NAMES ${BROTLI_COMMON_LIB_NAMES}
                  PATHS ${BROTLI_PC_LIBRARY_DIRS}
@@ -88,7 +90,9 @@ else()
                  PATHS ${BROTLI_PC_LIBRARY_DIRS}
                  PATH_SUFFIXES ${LIB_PATH_SUFFIXES}
                  NO_DEFAULT_PATH)
+    endif()
   else()
+    if (0)
     find_library(BROTLI_COMMON_LIBRARY
                  NAMES ${BROTLI_COMMON_LIB_NAMES}
                  PATH_SUFFIXES ${LIB_PATH_SUFFIXES})
@@ -101,9 +105,15 @@ else()
     find_path(BROTLI_INCLUDE_DIR
               NAMES brotli/decode.h
               PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES})
+    endif()
   endif()
 endif()
 
+find_path(BROTLI_INCLUDE_DIR NAMES brotli/decode.h PATH_SUFFIXES "include")
+find_library(BROTLI_COMMON_LIBRARY NAMES brotlicommon brotlicommon-static libbrotlicommon libbrotlicommon-static)
+find_library(BROTLI_ENC_LIBRARY NAMES libbrotlienc libbrotlienc-static brotlienc brotlienc-static)
+find_library(BROTLI_DEC_LIBRARY NAMES brotlidec libbrotlidec libbrotlidec-static brotlidec brotlidec-static)
+
 find_package_handle_standard_args(Brotli
                                   REQUIRED_VARS
                                   BROTLI_COMMON_LIBRARY
diff --git a/cpp/cmake_modules/FindLz4.cmake b/cpp/cmake_modules/FindLz4.cmake
index 8410916..baf0e99 100644
--- a/cpp/cmake_modules/FindLz4.cmake
+++ b/cpp/cmake_modules/FindLz4.cmake
@@ -19,15 +19,17 @@ if(MSVC AND NOT DEFINED LZ4_MSVC_STATIC_LIB_SUFFIX)
   set(LZ4_MSVC_STATIC_LIB_SUFFIX "_static")
 endif()
 
-set(LZ4_STATIC_LIB_SUFFIX "${LZ4_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
+if(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
+  set(LZ4_LIB_NAME_DEBUG_SUFFIX d)
+endif()
 
-set(LZ4_STATIC_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}lz4${LZ4_STATIC_LIB_SUFFIX})
+set(LZ4_STATIC_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}lz4${LZ4_MSVC_STATIC_LIB_SUFFIX}${LZ4_LIB_NAME_DEBUG_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
 
 if(LZ4_ROOT)
   find_library(
     LZ4_LIB
-    NAMES lz4 ${LZ4_STATIC_LIB_NAME} lib${LZ4_STATIC_LIB_NAME}
-          "${CMAKE_SHARED_LIBRARY_PREFIX}lz4_static${CMAKE_SHARED_LIBRARY_SUFFIX}"
+    NAMES lz4${LZ4_LIB_NAME_DEBUG_SUFFIX} ${LZ4_STATIC_LIB_NAME} lib${LZ4_STATIC_LIB_NAME}
+          "${CMAKE_SHARED_LIBRARY_PREFIX}lz4_static${CMAKE_SHARED_LIBRARY_SUFFIX}${LZ4_LIB_NAME_DEBUG_SUFFIX}"
     PATHS ${LZ4_ROOT}
     PATH_SUFFIXES ${LIB_PATH_SUFFIXES}
     NO_DEFAULT_PATH)
@@ -43,15 +45,15 @@ else()
     set(LZ4_INCLUDE_DIR "${LZ4_PC_INCLUDEDIR}")
 
     list(APPEND LZ4_PC_LIBRARY_DIRS "${LZ4_PC_LIBDIR}")
-    find_library(LZ4_LIB lz4
+    find_library(LZ4_LIB lz4${LZ4_LIB_NAME_DEBUG_SUFFIX}
                  PATHS ${LZ4_PC_LIBRARY_DIRS}
                  NO_DEFAULT_PATH
                  PATH_SUFFIXES ${LIB_PATH_SUFFIXES})
   else()
     find_library(
       LZ4_LIB
-      NAMES lz4 ${LZ4_STATIC_LIB_NAME} lib${LZ4_STATIC_LIB_NAME}
-            "${CMAKE_SHARED_LIBRARY_PREFIX}lz4_static${CMAKE_SHARED_LIBRARY_SUFFIX}"
+      NAMES lz4${LZ4_LIB_NAME_DEBUG_SUFFIX} ${LZ4_STATIC_LIB_NAME} lib${LZ4_STATIC_LIB_NAME}
+            "${CMAKE_SHARED_LIBRARY_PREFIX}lz4_static${CMAKE_SHARED_LIBRARY_SUFFIX}${LZ4_LIB_NAME_DEBUG_SUFFIX}"
       PATH_SUFFIXES ${LIB_PATH_SUFFIXES})
     find_path(LZ4_INCLUDE_DIR NAMES lz4.h PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES})
   endif()
diff --git a/cpp/cmake_modules/FindThrift.cmake b/cpp/cmake_modules/FindThrift.cmake
index 87cc24e..4de0760 100644
--- a/cpp/cmake_modules/FindThrift.cmake
+++ b/cpp/cmake_modules/FindThrift.cmake
@@ -54,6 +54,10 @@ if(MSVC AND NOT THRIFT_MSVC_STATIC_LIB_SUFFIX)
   set(THRIFT_MSVC_STATIC_LIB_SUFFIX md)
 endif()
 
+if(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
+  set(THRIFT_LIB_NAME_DEBUG_SUFFIX d)
+endif()
+
 if(Thrift_ROOT)
   find_library(THRIFT_STATIC_LIB thrift${THRIFT_MSVC_STATIC_LIB_SUFFIX}
                PATHS ${Thrift_ROOT}
@@ -71,15 +75,13 @@ else()
 
     list(APPEND THRIFT_PC_LIBRARY_DIRS "${THRIFT_PC_LIBDIR}")
 
-    find_library(THRIFT_STATIC_LIB thrift${THRIFT_MSVC_STATIC_LIB_SUFFIX}
-                 PATHS ${THRIFT_PC_LIBRARY_DIRS}
-                 NO_DEFAULT_PATH)
+    find_library(THRIFT_STATIC_LIB thrift${THRIFT_MSVC_STATIC_LIB_SUFFIX}${THRIFT_LIB_NAME_DEBUG_SUFFIX}
+                 PATHS ${THRIFT_PC_LIBRARY_DIRS})
     find_program(THRIFT_COMPILER thrift
                  HINTS ${THRIFT_PC_PREFIX}
-                 NO_DEFAULT_PATH
                  PATH_SUFFIXES "bin")
   else()
-    find_library(THRIFT_STATIC_LIB thrift${THRIFT_MSVC_STATIC_LIB_SUFFIX}
+    find_library(THRIFT_STATIC_LIB thrift${THRIFT_MSVC_STATIC_LIB_SUFFIX}${THRIFT_LIB_NAME_DEBUG_SUFFIX}
                  PATH_SUFFIXES "lib/${CMAKE_LIBRARY_ARCHITECTURE}" "lib")
     find_path(THRIFT_INCLUDE_DIR thrift/Thrift.h PATH_SUFFIXES "include")
     find_program(THRIFT_COMPILER thrift PATH_SUFFIXES "bin")
diff --git a/cpp/cmake_modules/FindZSTD.cmake b/cpp/cmake_modules/FindZSTD.cmake
index 8e47086..1e63c25 100644
--- a/cpp/cmake_modules/FindZSTD.cmake
+++ b/cpp/cmake_modules/FindZSTD.cmake
@@ -19,18 +19,27 @@ if(MSVC AND NOT DEFINED ZSTD_MSVC_STATIC_LIB_SUFFIX)
   set(ZSTD_MSVC_STATIC_LIB_SUFFIX "_static")
 endif()
 
-set(ZSTD_STATIC_LIB_SUFFIX "${ZSTD_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
+set(ZSTD_LIB_NAME_DEBUG_SUFFIX d)
+set(ZSTD_STATIC_LIB_SUFFIX "${ZSTD_MSVC_STATIC_LIB_SUFFIX}")
 set(ZSTD_STATIC_LIB_NAME ${CMAKE_STATIC_LIBRARY_PREFIX}zstd${ZSTD_STATIC_LIB_SUFFIX})
+ 
+set(ZSTD_LIB_NAMES_RELEASE zstd "${ZSTD_STATIC_LIB_NAME}"
+                     "${CMAKE_SHARED_LIBRARY_PREFIX}zstd")
+set(ZSTD_LIB_NAMES_DEBUG)
+foreach(_zstd_name ${ZSTD_LIB_NAMES_RELEASE})
+    list(APPEND ZSTD_LIB_NAMES_DEBUG ${_zstd_name}${ZSTD_LIB_NAME_DEBUG_SUFFIX})
+    if(DEFINED CMAKE_DEBUG_POSTFIX)
+        list(APPEND ZSTD_LIB_NAMES_DEBUG ${_zstd_name}${CMAKE_DEBUG_POSTFIX})
+    endif()
+endforeach()
 
 # First, find via if specified ZTD_ROOT
 if(ZSTD_ROOT)
   message(STATUS "Using ZSTD_ROOT: ${ZSTD_ROOT}")
-  find_library(ZSTD_LIB
-               NAMES zstd "${ZSTD_STATIC_LIB_NAME}" "lib${ZSTD_STATIC_LIB_NAME}"
-                     "${CMAKE_SHARED_LIBRARY_PREFIX}zstd${CMAKE_SHARED_LIBRARY_SUFFIX}"
-               PATHS ${ZSTD_ROOT}
-               PATH_SUFFIXES ${LIB_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
+  find_library(ZSTD_LIBRARY_RELEASE
+               NAMES ${ZSTD_LIB_NAMES_RELEASE})
+  find_library(ZSTD_LIBRARY_DEBUG
+               NAMES ${ZSTD_LIB_NAMES_DEBUG})
   find_path(ZSTD_INCLUDE_DIR
             NAMES zstd.h
             PATHS ${ZSTD_ROOT}
@@ -44,25 +53,33 @@ else()
     set(ZSTD_INCLUDE_DIR "${ZSTD_PC_INCLUDEDIR}")
 
     list(APPEND ZSTD_PC_LIBRARY_DIRS "${ZSTD_PC_LIBDIR}")
-    find_library(ZSTD_LIB zstd
+    find_library(ZSTD_LIBRARY_RELEASE ${ZSTD_LIB_NAMES_RELEASE}
                  PATHS ${ZSTD_PC_LIBRARY_DIRS}
                  NO_DEFAULT_PATH
                  PATH_SUFFIXES ${LIB_PATH_SUFFIXES})
+    find_library(ZSTD_LIBRARY_DEBUG ${ZSTD_LIB_NAMES_DEBUG}
+                 PATHS ${ZSTD_PC_LIBRARY_DIRS}
+                 NO_DEFAULT_PATH
+                 PATH_SUFFIXES "${CMAKE_LIBRARY_ARCHITECTURE}")
     # Third, check all other CMake paths
   else()
-    find_library(ZSTD_LIB
-                 NAMES zstd "${ZSTD_STATIC_LIB_NAME}" "lib${ZSTD_STATIC_LIB_NAME}"
-                       "${CMAKE_SHARED_LIBRARY_PREFIX}zstd${CMAKE_SHARED_LIBRARY_SUFFIX}"
-                 PATH_SUFFIXES ${LIB_PATH_SUFFIXES})
+    find_library(ZSTD_LIBRARY_RELEASE
+                 NAMES ${ZSTD_LIB_NAMES_RELEASE})
+    find_library(ZSTD_LIBRARY_DEBUG
+                 NAMES ${ZSTD_LIB_NAMES_DEBUG})
     find_path(ZSTD_INCLUDE_DIR NAMES zstd.h PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES})
   endif()
 endif()
 
+select_library_configurations(ZSTD)
+set(ZSTD_LIB ${ZSTD_LIBRARY})
+
 find_package_handle_standard_args(ZSTD REQUIRED_VARS ZSTD_LIB ZSTD_INCLUDE_DIR)
 
 if(ZSTD_FOUND)
   add_library(ZSTD::zstd UNKNOWN IMPORTED)
   set_target_properties(ZSTD::zstd
-                        PROPERTIES IMPORTED_LOCATION "${ZSTD_LIB}"
+                        PROPERTIES IMPORTED_LOCATION_RELEASE "${ZSTD_LIBRARY_RELEASE}"
+                                   IMPORTED_LOCATION_DEBUG "${ZSTD_LIBRARY_DEBUG}"
                                    INTERFACE_INCLUDE_DIRECTORIES "${ZSTD_INCLUDE_DIR}")
 endif()
diff --git a/cpp/cmake_modules/FindgflagsAlt.cmake b/cpp/cmake_modules/FindgflagsAlt.cmake
index dfd64f8..b50c5bb 100644
--- a/cpp/cmake_modules/FindgflagsAlt.cmake
+++ b/cpp/cmake_modules/FindgflagsAlt.cmake
@@ -15,24 +15,14 @@
 # specific language governing permissions and limitations
 # under the License.
 
-if(gflags_ROOT)
-  find_library(gflags_LIB
-               NAMES gflags
-               PATHS ${gflags_ROOT}
-               PATH_SUFFIXES ${LIB_PATH_SUFFIXES}
-               NO_DEFAULT_PATH)
-  find_path(GFLAGS_INCLUDE_DIR
-            NAMES gflags/gflags.h
-            PATHS ${gflags_ROOT}
-            NO_DEFAULT_PATH
-            PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES})
-else()
-  find_library(gflags_LIB NAMES gflags)
-  find_path(GFLAGS_INCLUDE_DIR
-            NAMES gflags/gflags.h
-            PATH_SUFFIXES ${INCLUDE_PATH_SUFFIXES})
+
+if(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
+  set(GFLAGS_LIB_NAME_DEBUG_SUFFIX _debug)
 endif()
 
+find_library(gflags_LIB NAMES gflags${GFLAGS_LIB_NAME_DEBUG_SUFFIX} gflags_static${GFLAGS_LIB_NAME_DEBUG_SUFFIX})
+find_path(GFLAGS_INCLUDE_DIR NAMES gflags/gflags.h PATH_SUFFIXES "include")
+
 find_package_handle_standard_args(gflagsAlt REQUIRED_VARS gflags_LIB GFLAGS_INCLUDE_DIR)
 
 if(gflagsAlt_FOUND)
diff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake
index f6677e0..2ebc43e 100644
--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake
@@ -1066,10 +1066,7 @@ if(ARROW_NEED_GFLAGS)
   elseif(gflags_SOURCE STREQUAL "SYSTEM")
     # gflagsConfig.cmake is not installed on Ubuntu/Debian
     # TODO: Make a bug report upstream
-    find_package(gflags)
-    if(NOT gflags_FOUND)
-      find_package(gflagsAlt REQUIRED)
-    endif()
+    find_package(gflagsAlt REQUIRED)
   endif()
   # TODO: Don't use global includes but rather target_include_directories
   include_directories(SYSTEM ${GFLAGS_INCLUDE_DIR})
@@ -1720,7 +1717,7 @@ if(ARROW_WITH_FLATBUFFERS)
   elseif(Flatbuffers_SOURCE STREQUAL "BUNDLED")
     build_flatbuffers()
   elseif(Flatbuffers_SOURCE STREQUAL "SYSTEM")
-    find_package(Flatbuffers QUIET)
+    #find_package(Flatbuffers QUIET) - disabled because on vcpkg this looks in the wrong place for the fb compiler and causes an error
     if(NOT Flatbuffers_FOUND)
       find_package(FlatbuffersAlt REQUIRED)
     endif()
