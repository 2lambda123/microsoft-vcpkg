diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4448b98..cb9d87e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -710,6 +710,8 @@ endif()
 
 set(ARROW_TEST_LINK_LIBS ${ARROW_MIN_TEST_LIBS})
 
+message(STATUS, "Arrow Pre Dependencies Are: ${ARROW_STATIC_LINK_LIBS} and ${PTHREAD_LIBRARY}")
+
 if (ARROW_JEMALLOC)
   add_definitions(-DARROW_JEMALLOC)
   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})
@@ -743,10 +745,10 @@ elseif (PTHREAD_LIBRARY)
   # linking order.
   set(ARROW_LINK_LIBS
     ${ARROW_LINK_LIBS}
-    ${PTHREAD_LIBRARY})
+    pthreadshared)
   set(ARROW_STATIC_LINK_LIBS
     ${ARROW_STATIC_LINK_LIBS}
-    ${PTHREAD_LIBRARY})
+    pthreadshared)
 endif()
 
 ############################################################
@@ -780,3 +782,4 @@ endif()
 if(ARROW_GANDIVA)
   add_subdirectory(src/gandiva)
 endif()
+
diff --git a/cmake_modules/FindBrotli.cmake b/cmake_modules/FindBrotli.cmake
index ea971f0..3e98ede 100644
--- a/cmake_modules/FindBrotli.cmake
+++ b/cmake_modules/FindBrotli.cmake
@@ -43,53 +43,31 @@ find_path( BROTLI_INCLUDE_DIR NAMES brotli/decode.h
   NO_DEFAULT_PATH
   PATH_SUFFIXES "include" )
 
-find_library( BROTLI_LIBRARY_ENC NAMES libbrotlienc.a libbrotlienc-static.a brotlienc
+find_library( BROTLI_LIBRARY_ENC NAMES libbrotlienc libbrotlienc-static brotlienc brotlienc-static
   PATHS ${_brotli_roots}
   NO_DEFAULT_PATH
   PATH_SUFFIXES "lib/${CMAKE_LIBRARY_ARCHITECTURE}" "lib" )
 
-find_library( BROTLI_LIBRARY_DEC NAMES libbrotlidec.a libbrotlidec-static.a brotlidec
+find_library( BROTLI_LIBRARY_DEC NAMES libbrotlidec libbrotlidec-static brotlidec brotlidec-static
   PATHS ${_brotli_roots}
   NO_DEFAULT_PATH
   PATH_SUFFIXES "lib/${CMAKE_LIBRARY_ARCHITECTURE}" "lib" )
 
-find_library( BROTLI_LIBRARY_COMMON NAMES libbrotlicommon.a libbrotlicommon-static.a brotlicommon
+find_library( BROTLI_LIBRARY_COMMON NAMES libbrotlicommon libbrotlicommon-static brotlicommon brotlicommon-static
   PATHS ${_brotli_roots}
   NO_DEFAULT_PATH
   PATH_SUFFIXES "lib/${CMAKE_LIBRARY_ARCHITECTURE}" "lib" )
 
 set(BROTLI_LIBRARIES ${BROTLI_LIBRARY_ENC} ${BROTLI_LIBRARY_DEC}
     ${BROTLI_LIBRARY_COMMON})
-
+	
 if (BROTLI_INCLUDE_DIR AND (PARQUET_MINIMAL_DEPENDENCY OR BROTLI_LIBRARIES))
   set(BROTLI_FOUND TRUE)
-  get_filename_component( BROTLI_LIBS ${BROTLI_LIBRARY_ENC} PATH )
-  set(BROTLI_LIB_NAME brotli)
-  if (BROTLI_MSVC_STATIC_LIB_SUFFIX)
-    set(BROTLI_STATIC_LIB_SUFFIX "${BROTLI_MSVC_STATIC_LIB_SUFFIX}")
-  endif()
-  if (NOT BROTLI_STATIC_LIB_SUFFIX)
-    if (EXISTS "${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}enc-static${CMAKE_STATIC_LIBRARY_SUFFIX}")
-      set(BROTLI_STATIC_LIB_SUFFIX -static)
-    else()
-      if (MSVC)
-        set(BROTLI_STATIC_LIB_SUFFIX _static)
-      else()
-        set(BROTLI_STATIC_LIB_SUFFIX "")
-      endif()
-    endif()
-  endif()
-  set(BROTLI_STATIC_LIB
-      ${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}enc${BROTLI_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}dec${BROTLI_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
-      ${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}common${BROTLI_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
-  set(BROTLI_STATIC_LIBRARY_ENC ${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}enc${BROTLI_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
-  set(BROTLI_STATIC_LIBRARY_DEC ${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}dec${BROTLI_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
-  set(BROTLI_STATIC_LIBRARY_COMMON ${BROTLI_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${BROTLI_LIB_NAME}common${BROTLI_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
-  set(BROTLI_SHARED_LIB
-      ${BROTLI_LIBS}/${CMAKE_SHARED_LIBRARY_PREFIX}${BROTLI_LIB_NAME}enc${CMAKE_SHARED_LIBRARY_SUFFIX}
-      ${BROTLI_LIBS}/${CMAKE_SHARED_LIBRARY_PREFIX}${BROTLI_LIB_NAME}dec${CMAKE_SHARED_LIBRARY_SUFFIX}
-      ${BROTLI_LIBS}/${CMAKE_SHARED_LIBRARY_PREFIX}${BROTLI_LIB_NAME}common${CMAKE_SHARED_LIBRARY_SUFFIX})
+  set(BROTLI_STATIC_LIB ${BROTLI_LIBRARIES})
+  set(BROTLI_STATIC_LIBRARY_ENC ${BROTLI_LIBRARY_ENC})
+  set(BROTLI_STATIC_LIBRARY_DEC ${BROTLI_LIBRARY_DEC})
+  set(BROTLI_STATIC_LIBRARY_COMMON ${BROTLI_LIBRARY_COMMON})
+  set(BROTLI_SHARED_LIB ${BROTLI_LIBRARIES})
 else ()
   set(BROTLI_FOUND FALSE)
 endif ()
diff --git a/cmake_modules/FindFlatbuffers.cmake b/cmake_modules/FindFlatbuffers.cmake
index 975c869..c714218 100644
--- a/cmake_modules/FindFlatbuffers.cmake
+++ b/cmake_modules/FindFlatbuffers.cmake
@@ -53,6 +53,7 @@ endif ()
 
 find_program(FLATBUFFERS_COMPILER flatc
   "${FLATBUFFERS_HOME}/bin"
+  "${FLATBUFFERS_HOME}/tools/flatbuffers"
   /usr/local/bin
   /usr/bin
   NO_DEFAULT_PATH
diff --git a/cmake_modules/FindLz4.cmake b/cmake_modules/FindLz4.cmake
index 3a89c8d..3157197 100644
--- a/cmake_modules/FindLz4.cmake
+++ b/cmake_modules/FindLz4.cmake
@@ -29,21 +29,11 @@ elseif ( Lz4_HOME )
     list( APPEND _lz4_roots ${Lz4_HOME} )
 endif()
 
-if (MSVC AND NOT DEFINED LZ4_MSVC_STATIC_LIB_SUFFIX)
-  set(LZ4_MSVC_STATIC_LIB_SUFFIX "_static")
-endif()
-
-set(LZ4_STATIC_LIB_SUFFIX
-  "${LZ4_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
-
-set(LZ4_STATIC_LIB_NAME
-  ${CMAKE_STATIC_LIBRARY_PREFIX}lz4${LZ4_STATIC_LIB_SUFFIX})
-
 find_path(LZ4_INCLUDE_DIR NAMES lz4.h
   PATHS ${_lz4_roots}
   NO_DEFAULT_PATH
   PATH_SUFFIXES "include" )
-find_library(LZ4_STATIC_LIB NAMES ${LZ4_STATIC_LIB_NAME} lib${LZ4_STATIC_LIB_NAME}
+find_library(LZ4_STATIC_LIB NAMES lz4 liblz4
   PATHS ${_lz4_roots}
   NO_DEFAULT_PATH
   PATH_SUFFIXES "lib" )
diff --git a/cmake_modules/FindSnappy.cmake b/cmake_modules/FindSnappy.cmake
index 867963c..8a432db 100644
--- a/cmake_modules/FindSnappy.cmake
+++ b/cmake_modules/FindSnappy.cmake
@@ -55,7 +55,7 @@ if (SNAPPY_INCLUDE_DIR AND (PARQUET_MINIMAL_DEPENDENCY OR SNAPPY_LIBRARIES))
   set(SNAPPY_HEADER_NAME snappy.h)
   set(SNAPPY_HEADER ${SNAPPY_INCLUDE_DIR}/${SNAPPY_HEADER_NAME})
   set(SNAPPY_LIB_NAME snappy)
-  set(SNAPPY_STATIC_LIB ${SNAPPY_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${SNAPPY_LIB_NAME}${SNAPPY_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX})
+  set(SNAPPY_STATIC_LIB ${SNAPPY_LIBS}/${CMAKE_STATIC_LIBRARY_PREFIX}${SNAPPY_LIB_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX})
   set(SNAPPY_SHARED_LIB ${SNAPPY_LIBS}/${CMAKE_SHARED_LIBRARY_PREFIX}${SNAPPY_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX})
 else ()
   set(SNAPPY_FOUND FALSE)
diff --git a/cmake_modules/FindThrift.cmake b/cmake_modules/FindThrift.cmake
index 5402766..5ed3a03 100644
--- a/cmake_modules/FindThrift.cmake
+++ b/cmake_modules/FindThrift.cmake
@@ -28,41 +28,22 @@
 #  THRIFT_STATIC_LIB, THRIFT static library
 #  THRIFT_FOUND, If false, do not try to use ant
 
-# prefer the thrift version supplied in THRIFT_HOME
-if( NOT "${THRIFT_HOME}" STREQUAL "")
-    file( TO_CMAKE_PATH "${THRIFT_HOME}" _native_path )
-    list( APPEND _thrift_roots ${_native_path} )
-elseif ( Thrift_HOME )
-    list( APPEND _thrift_roots ${Thrift_HOME} )
-endif()
-
-message(STATUS "THRIFT_HOME: ${THRIFT_HOME}")
-find_path(THRIFT_INCLUDE_DIR thrift/Thrift.h HINTS
-  ${_thrift_roots}
-  NO_DEFAULT_PATH
+find_path(THRIFT_INCLUDE_DIR thrift/Thrift.h
   PATH_SUFFIXES "include"
 )
 
-find_path(THRIFT_CONTRIB_DIR share/fb303/if/fb303.thrift HINTS
-  ${_thrift_roots}
-  NO_DEFAULT_PATH
-)
-
-if (MSVC AND NOT THRIFT_MSVC_STATIC_LIB_SUFFIX)
-  set(THRIFT_MSVC_STATIC_LIB_SUFFIX md)
+if(CMAKE_BUILD_TYPE STREQUAL "DEBUG")
+  set(THRIFT_LIB_SUFFIX mdd)
+else()
+  set(THRIFT_LIB_SUFFIX md)
 endif()
 
 find_library(THRIFT_STATIC_LIB NAMES
-  ${CMAKE_STATIC_LIBRARY_PREFIX}thrift${THRIFT_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}
-  HINTS ${_thrift_roots}
-  NO_DEFAULT_PATH
-  PATH_SUFFIXES "lib/${CMAKE_LIBRARY_ARCHITECTURE}" "lib"
+  thrift${THRIFT_LIB_SUFFIX}
 )
 
 find_program(THRIFT_COMPILER thrift HINTS
-  ${_thrift_roots}
-  NO_DEFAULT_PATH
-  PATH_SUFFIXES "bin"
+  PATH_SUFFIXES "tools"
 )
 
 function(EXTRACT_THRIFT_VERSION)
@@ -111,7 +92,6 @@ else ()
   endif ()
 endif ()
 
-
 mark_as_advanced(
   THRIFT_STATIC_LIB
   THRIFT_COMPILER
diff --git a/cmake_modules/FindZLIB.cmake b/cmake_modules/FindZLIB.cmake
index ca6060b..2ba97fd 100644
--- a/cmake_modules/FindZLIB.cmake
+++ b/cmake_modules/FindZLIB.cmake
@@ -30,13 +30,6 @@
 #  ZLIB_SHARED_LIB, path to libz's shared library
 #  ZLIB_FOUND, whether zlib has been found
 
-if( NOT "${ZLIB_HOME}" STREQUAL "")
-    file( TO_CMAKE_PATH "${ZLIB_HOME}" _native_path )
-    list( APPEND _zlib_roots ${_native_path} )
-elseif ( ZLIB_HOME )
-    list( APPEND _zlib_roots ${ZLIB_HOME} )
-endif()
-
 if (MSVC)
   # zlib uses zlib.lib for Windows.
   set(ZLIB_LIB_NAME zlib.lib)
@@ -47,25 +40,15 @@ else ()
 endif ()
 
 # Try the parameterized roots, if they exist
-if (_zlib_roots)
-  find_path(ZLIB_INCLUDE_DIR NAMES zlib.h
-    PATHS ${_zlib_roots} NO_DEFAULT_PATH
-    PATH_SUFFIXES "include")
+pkg_check_modules(PKG_ZLIB zlib)
+if (PKG_ZLIB_FOUND)
+  set(ZLIB_INCLUDE_DIR ${PKG_ZLIB_INCLUDEDIR})
   find_library(ZLIB_SHARED_LIB
     NAMES ${ZLIB_LIB_NAME}
-    PATHS ${_zlib_roots} NO_DEFAULT_PATH
-    PATH_SUFFIXES "lib")
+    PATHS ${PKG_ZLIB_LIBDIR} NO_DEFAULT_PATH)
 else ()
-  pkg_check_modules(PKG_ZLIB zlib)
-  if (PKG_ZLIB_FOUND)
-    set(ZLIB_INCLUDE_DIR ${PKG_ZLIB_INCLUDEDIR})
-    find_library(ZLIB_SHARED_LIB
-      NAMES ${ZLIB_LIB_NAME}
-      PATHS ${PKG_ZLIB_LIBDIR} NO_DEFAULT_PATH)
-  else ()
-    find_path(ZLIB_INCLUDE_DIR NAMES zlib.h)
-    find_library(ZLIB_SHARED_LIB NAMES ${ZLIB_LIB_NAME})
-  endif ()
+  find_path(ZLIB_INCLUDE_DIR NAMES zlib.h)
+  find_library(ZLIB_SHARED_LIB NAMES ${ZLIB_LIB_NAME})
 endif ()
 
 if (ZLIB_INCLUDE_DIR AND ZLIB_SHARED_LIB)
diff --git a/cmake_modules/FindZSTD.cmake b/cmake_modules/FindZSTD.cmake
index 810e5c0..7dfa050 100644
--- a/cmake_modules/FindZSTD.cmake
+++ b/cmake_modules/FindZSTD.cmake
@@ -22,30 +22,10 @@
 #  ZSTD_STATIC_LIB, path to libzstd static library
 #  ZSTD_FOUND, whether zstd has been found
 
-if( NOT "${ZSTD_HOME}" STREQUAL "")
-    file( TO_CMAKE_PATH "${ZSTD_HOME}" _native_path )
-    list( APPEND _zstd_roots ${_native_path} )
-elseif ( ZStd_HOME )
-    list( APPEND _zstd_roots ${ZStd_HOME} )
-endif()
-
-if (MSVC AND NOT DEFINED ZSTD_MSVC_STATIC_LIB_SUFFIX)
-  set(ZSTD_MSVC_STATIC_LIB_SUFFIX "_static")
-endif()
-
-set(ZSTD_STATIC_LIB_SUFFIX
-  "${ZSTD_MSVC_STATIC_LIB_SUFFIX}${CMAKE_STATIC_LIBRARY_SUFFIX}")
-
-set(ZSTD_STATIC_LIB_NAME
-  ${CMAKE_STATIC_LIBRARY_PREFIX}zstd${ZSTD_STATIC_LIB_SUFFIX})
-
 find_path(ZSTD_INCLUDE_DIR NAMES zstd.h
-  PATHS ${_zstd_roots}
-  NO_DEFAULT_PATH
   PATH_SUFFIXES "include" )
-find_library(ZSTD_STATIC_LIB NAMES ${ZSTD_STATIC_LIB_NAME} lib${ZSTD_STATIC_LIB_NAME}
-  PATHS ${_zstd_roots}
-  NO_DEFAULT_PATH
+
+find_library(ZSTD_STATIC_LIB NAMES zstd libzstd zstd_static libzstd_static
   PATH_SUFFIXES "lib" )
 
 include(FindPackageHandleStandardArgs)
diff --git a/cmake_modules/ThirdpartyToolchain.cmake b/cmake_modules/ThirdpartyToolchain.cmake
index 1c7cd62..0e2be76 100644
--- a/cmake_modules/ThirdpartyToolchain.cmake
+++ b/cmake_modules/ThirdpartyToolchain.cmake
@@ -302,6 +302,8 @@ if (WIN32)
 else()
   find_library(PTHREAD_LIBRARY pthread)
   message(STATUS "Found pthread: ${PTHREAD_LIBRARY}")
+  add_library(pthreadshared SHARED IMPORTED)
+  set_target_properties(pthreadshared PROPERTIES IMPORTED_LOCATION ${PTHREAD_LIBRARY})
 endif()
 
 # ----------------------------------------------------------------------
