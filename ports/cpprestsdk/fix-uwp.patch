diff --git a/Release/CMakeLists.txt b/Release/CMakeLists.txt
index b8f3809..3857cfc 100644
--- a/Release/CMakeLists.txt
+++ b/Release/CMakeLists.txt
@@ -187,7 +187,7 @@ elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
   set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /profile /OPT:REF /OPT:ICF")
 
   if (WINDOWS_STORE OR WINDOWS_PHONE)
-    add_compile_options(/ZW)
+    # add_compile_options(/ZW)
   else()
     if (NOT (MSVC_VERSION LESS 1920))
       add_compile_options(/permissive-)
diff --git a/Release/include/cpprest/details/fileio.h b/Release/include/cpprest/details/fileio.h
index ee88c15..709c076 100644
--- a/Release/include/cpprest/details/fileio.h
+++ b/Release/include/cpprest/details/fileio.h
@@ -104,7 +104,7 @@ extern "C"
 /// <remarks>
 /// True does not signal that the file will eventually be successfully opened, just that the process was started.
 /// </remarks>
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     _ASYNCRTIMP bool __cdecl _open_fsb_str(_In_ concurrency::streams::details::_filestream_callback* callback,
                                            const utility::char_t* filename,
                                            std::ios_base::openmode mode,
@@ -122,7 +122,7 @@ extern "C"
 /// True does not signal that the file will eventually be successfully opened, just that the process was started.
 /// This is only available for WinRT.
 /// </remarks>
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     _ASYNCRTIMP bool __cdecl _open_fsb_stf_str(_In_ concurrency::streams::details::_filestream_callback* callback,
                                                ::Windows::Storage::StorageFile ^ file,
                                                std::ios_base::openmode mode,
diff --git a/Release/include/cpprest/details/web_utilities.h b/Release/include/cpprest/details/web_utilities.h
index 853d761..d608be8 100644
--- a/Release/include/cpprest/details/web_utilities.h
+++ b/Release/include/cpprest/details/web_utilities.h
@@ -26,7 +26,7 @@ typedef std::unique_ptr<::utility::string_t, zero_memory_deleter> plaintext_stri
 
 #ifdef _WIN32
 #if _WIN32_WINNT >= _WIN32_WINNT_VISTA
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 class winrt_encryption
 {
 public:
@@ -118,7 +118,7 @@ private:
     ::utility::string_t m_username;
 
 #if defined(_WIN32) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     details::winrt_encryption m_password;
 #else
     details::win32_encryption m_password;
diff --git a/Release/include/cpprest/filestream.h b/Release/include/cpprest/filestream.h
index 1e4a0f2..12d4a0b 100644
--- a/Release/include/cpprest/filestream.h
+++ b/Release/include/cpprest/filestream.h
@@ -710,7 +710,7 @@ private:
 
     basic_file_buffer(_In_ _file_info* info) : streambuf_state_manager<_CharType>(info->m_mode), m_info(info) {}
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     static pplx::task<std::shared_ptr<basic_streambuf<_CharType>>> open(
         const utility::string_t& _Filename,
         std::ios_base::openmode _Mode = std::ios_base::out,
@@ -946,7 +946,7 @@ template<typename _CharType>
 class file_buffer
 {
 public:
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     /// Open a new stream buffer representing the given file.
     /// </summary>
@@ -1000,7 +1000,7 @@ template<typename _CharType>
 class file_stream
 {
 public:
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     /// Open a new input stream representing the given file.
     /// The file should already exist on disk, or an exception will be thrown.
diff --git a/Release/include/cpprest/http_client.h b/Release/include/cpprest/http_client.h
index fb7c606..6937abf 100644
--- a/Release/include/cpprest/http_client.h
+++ b/Release/include/cpprest/http_client.h
@@ -15,7 +15,7 @@
 #ifndef CASA_HTTP_CLIENT_H
 #define CASA_HTTP_CLIENT_H
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #if !defined(__WRL_NO_DEFAULT_LIB__)
 #define __WRL_NO_DEFAULT_LIB__
 #endif
@@ -60,7 +60,7 @@ typedef void* native_handle;
 
 #include "cpprest/oauth2.h"
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
 #if defined(__clang__)
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wconversion"
@@ -98,13 +98,13 @@ public:
         , m_timeout(std::chrono::seconds(30))
         , m_chunksize(0)
         , m_request_compressed(false)
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         , m_validate_certificates(true)
 #endif
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
         , m_tlsext_sni_enabled(true)
 #endif
-#if (defined(_WIN32) && !defined(__cplusplus_winrt)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if (defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
         , m_buffer_request(false)
 #endif
         , m_max_redirects(10)
@@ -248,7 +248,7 @@ public:
     /// only supported on Windows and OSX.</remarks>
     void set_request_compressed_response(bool request_compressed) { m_request_compressed = request_compressed; }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     /// Gets the server certificate validation property.
     /// </summary>
@@ -264,7 +264,7 @@ public:
     void set_validate_certificates(bool validate_certs) { m_validate_certificates = validate_certs; }
 #endif
 
-#if (defined(_WIN32) && !defined(__cplusplus_winrt)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if (defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
     /// <summary>
     /// Checks if request data buffering is turned on, the default is off.
     /// </summary>
@@ -362,7 +362,7 @@ public:
         if (m_set_user_nativehandle_options) m_set_user_nativehandle_options(handle);
     }
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
     /// <summary>
     /// Sets a callback to enable custom setting of the ssl context, at construction time.
     /// </summary>
@@ -411,7 +411,7 @@ private:
     size_t m_chunksize;
     bool m_request_compressed;
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // IXmlHttpRequest2 doesn't allow configuration of certificate verification.
     bool m_validate_certificates;
 #endif
@@ -419,11 +419,11 @@ private:
     std::function<void(native_handle)> m_set_user_nativehandle_options;
     std::function<void(native_handle)> m_set_user_nativesessionhandle_options;
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
     std::function<void(boost::asio::ssl::context&)> m_ssl_context_callback;
     bool m_tlsext_sni_enabled;
 #endif
-#if (defined(_WIN32) && !defined(__cplusplus_winrt)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if (defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
     bool m_buffer_request;
 #endif
 
@@ -667,7 +667,7 @@ public:
             mtd, path_query_fragment, body_data, ::utility::conversions::to_utf16string("text/plain"), token);
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     /// Asynchronously sends an HTTP request.
     /// </summary>
diff --git a/Release/include/cpprest/http_listener.h b/Release/include/cpprest/http_listener.h
index a5457c0..0e46eaf 100644
--- a/Release/include/cpprest/http_listener.h
+++ b/Release/include/cpprest/http_listener.h
@@ -16,11 +16,11 @@
 #include "cpprest/http_msg.h"
 #include <functional>
 #include <limits>
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
 #include <boost/asio/ssl.hpp>
 #endif
 
-#if !defined(_WIN32) || (_WIN32_WINNT >= _WIN32_WINNT_VISTA && !defined(__cplusplus_winrt)) ||                         \
+#if !defined(_WIN32) || (_WIN32_WINNT >= _WIN32_WINNT_VISTA && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) ||                         \
     defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
 
 namespace web
diff --git a/Release/include/cpprest/interopstream.h b/Release/include/cpprest/interopstream.h
index e3287c1..76daec9 100644
--- a/Release/include/cpprest/interopstream.h
+++ b/Release/include/cpprest/interopstream.h
@@ -494,7 +494,7 @@ private:
     details::basic_async_streambuf<CharType> m_strbuf;
 };
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 /// <summary>
 /// Static class containing factory functions for WinRT streams implemented on top of Casablanca async streams.
diff --git a/Release/include/cpprest/ws_client.h b/Release/include/cpprest/ws_client.h
index af17bd6..e3dad7e 100644
--- a/Release/include/cpprest/ws_client.h
+++ b/Release/include/cpprest/ws_client.h
@@ -28,7 +28,7 @@
 #include <memory>
 #include <mutex>
 
-#if !defined(_WIN32) || !defined(__cplusplus_winrt)
+#if !defined(_WIN32) || !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #if defined(__clang__)
 #pragma clang diagnostic push
 #pragma clang diagnostic ignored "-Wconversion"
@@ -179,7 +179,7 @@ public:
     /// caution.</remarks>
     void set_validate_certificates(bool validate_certs) { m_validate_certificates = validate_certs; }
 
-#if !defined(_WIN32) || !defined(__cplusplus_winrt)
+#if !defined(_WIN32) || !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     /// Sets a callback to enable custom setting of the ssl context, at construction time.
     /// </summary>
@@ -206,7 +206,7 @@ private:
     bool m_sni_enabled;
     utf8string m_sni_hostname;
     bool m_validate_certificates;
-#if !defined(_WIN32) || !defined(__cplusplus_winrt)
+#if !defined(_WIN32) || !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     std::function<void(boost::asio::ssl::context&)> m_ssl_context_callback;
 #endif
 };
diff --git a/Release/include/cpprest/ws_msg.h b/Release/include/cpprest/ws_msg.h
index 9b13a80..80f789a 100644
--- a/Release/include/cpprest/ws_msg.h
+++ b/Release/include/cpprest/ws_msg.h
@@ -32,7 +32,7 @@ namespace details
 {
 class winrt_callback_client;
 class wspp_callback_client;
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 ref class ReceiveContext;
 #endif
 } // namespace details
@@ -58,7 +58,7 @@ enum class websocket_message_type
 class websocket_outgoing_message
 {
 public:
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     /// Sets the outgoing message to be a ping message.
     /// This is useful when the client side wants to check whether the server is alive.
@@ -152,7 +152,7 @@ private:
 
     const pplx::task_completion_event<void>& body_sent() const { return m_body_sent; }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     void set_message_ping(const concurrency::streams::container_buffer<std::string>& buffer)
     {
         m_msg_type = websocket_message_type::ping;
@@ -232,7 +232,7 @@ public:
 private:
     friend class details::winrt_callback_client;
     friend class details::wspp_callback_client;
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     friend ref class details::ReceiveContext;
 #endif
 
diff --git a/Release/include/pplx/pplx.h b/Release/include/pplx/pplx.h
index d9ba9c6..c2f4ffb 100644
--- a/Release/include/pplx/pplx.h
+++ b/Release/include/pplx/pplx.h
@@ -21,7 +21,7 @@
 #endif
 
 #ifndef _WIN32
-#if defined(_WIN32) || defined(__cplusplus_winrt)
+#if defined(_WIN32) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #define _WIN32
 #endif
 #endif // _WIN32
diff --git a/Release/include/pplx/pplxtasks.h b/Release/include/pplx/pplxtasks.h
index 1f48e98..93581e0 100644
--- a/Release/include/pplx/pplxtasks.h
+++ b/Release/include/pplx/pplxtasks.h
@@ -81,7 +81,7 @@ void cpprest_init(JavaVM*);
 
 #if defined(_MSC_VER)
 #include <intrin.h>
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include <agile.h>
 #include <ctxtcall.h>
 #include <winapifamily.h>
@@ -116,9 +116,9 @@ void cpprest_init(JavaVM*);
 #endif /* _UITHREADCTXT_SUPPORT */
 
 #pragma detect_mismatch("PPLXTASKS_WITH_WINRT", "1")
-#else /* defined(__cplusplus_winrt) */
+#else /* (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) */
 #pragma detect_mismatch("PPLXTASKS_WITH_WINRT", "0")
-#endif /* defined(__cplusplus_winrt) */
+#endif /* (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) */
 #endif /* defined(_MSC_VER) */
 
 #ifdef _DEBUG
@@ -140,7 +140,7 @@ exception_ptr make_exception_ptr(_E _Except)
 } // namespace std
 #endif              /* _MSC_VER < 1700 */
 #ifndef PPLX_TASK_ASYNC_LOGGING
-#if _MSC_VER >= 1800 && defined(__cplusplus_winrt)
+#if _MSC_VER >= 1800 && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #define PPLX_TASK_ASYNC_LOGGING 1 // Only enable async logging under dev12 winrt
 #else
 #define PPLX_TASK_ASYNC_LOGGING 0
@@ -210,7 +210,7 @@ class task<void>;
 /// itself.
 /// </remarks>
 #if PPLX_TASK_SAVE_FRAME_COUNT > 1
-#if defined(__cplusplus_winrt) && !defined(_DEBUG)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && !defined(_DEBUG)
 #pragma message(                                                                                                       \
     "WARNING: Redefining PPLX_TASK_SAVE_FRAME_COUNT under Release build for non-desktop applications is not supported; only one frame will be captured!")
 #define PPLX_CAPTURE_CALLSTACK() ::pplx::details::_TaskCreationCallstack::_CaptureSingleFrameCallstack(_ReturnAddress())
@@ -362,7 +362,7 @@ _TypeSelectorAsyncTask _AsyncOperationKindSelector(task<_T>);
 
 _TypeSelectorNoAsync _AsyncOperationKindSelector(...);
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 template<typename _Type>
 struct _Unhat
 {
@@ -631,7 +631,7 @@ class _ContextCallback
 {
     typedef std::function<void(void)> _CallbackFunction;
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 public:
     static _ContextCallback _CaptureCurrent()
@@ -847,7 +847,7 @@ struct _ResultHolder
     _Type _Result;
 };
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 template<typename _Type>
 struct _ResultHolder<_Type ^>
@@ -916,7 +916,7 @@ struct _ExceptionHolder
 private:
     void ReportUnhandledError()
     {
-#if _MSC_VER >= 1800 && defined(__cplusplus_winrt)
+#if _MSC_VER >= 1800 && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         if (_M_winRTException != nullptr)
         {
             ::Platform::Details::ReportUnhandledError(_M_winRTException);
@@ -929,13 +929,13 @@ public:
         : _M_exceptionObserved(0)
         , _M_stdException(_E)
         , _M_stackTrace(_stackTrace)
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         , _M_winRTException(nullptr)
 #endif /* defined (__cplusplus_winrt) */
     {
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     explicit _ExceptionHolder(::Platform::Exception ^ _E, const _TaskCreationCallstack& _stackTrace)
         : _M_exceptionObserved(0), _M_winRTException(_E), _M_stackTrace(_stackTrace)
     {
@@ -960,7 +960,7 @@ public:
             atomic_exchange(_M_exceptionObserved, 1l);
         }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         if (_M_winRTException != nullptr)
         {
             throw _M_winRTException;
@@ -975,7 +975,7 @@ public:
 
     // Either _M_stdException or _M_winRTException is populated based on the type of exception encountered.
     std::exception_ptr _M_stdException;
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     ::Platform::Exception ^ _M_winRTException;
 #endif /* defined (__cplusplus_winrt) */
 
@@ -986,7 +986,7 @@ public:
     _TaskCreationCallstack _M_stackTrace;
 };
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 /// <summary>
 ///     Base converter class for converting asynchronous interfaces to IAsyncOperation
 /// </summary>
@@ -1142,7 +1142,7 @@ public:
     /**/
     static task_continuation_context use_default()
     {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         // The callback context is created with the context set to CaptureDeferred and resolved when it is used in
         // .then()
         return task_continuation_context(
@@ -1152,7 +1152,7 @@ public:
 #endif /* defined (__cplusplus_winrt) */
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     ///     Creates a task continuation context which allows the Runtime to choose the execution context for a
     ///     continuation.
@@ -1652,7 +1652,7 @@ struct _PPLTaskHandle : _BaseTaskHandle
         {
             _M_pTask->_Cancel(true);
         }
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         catch (::Platform::Exception ^ _E)
         {
             _M_pTask->_CancelWithException(_E);
@@ -1727,7 +1727,7 @@ struct _Task_impl_base
     {
         bool _DoWait = true;
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         if (_IsNonBlockingThread())
         {
             // In order to prevent Windows Runtime STA threads from blocking the UI, calling task.wait() task.get() is
@@ -1790,7 +1790,7 @@ struct _Task_impl_base
                     // the exception here.
                     _ASSERTE(_IsCanceled());
                 }
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
                 catch (::Platform::Exception ^ _E)
                 {
                     // Its possible the task body hasn't seen the exception, if so we need to cancel with exception
@@ -1878,7 +1878,7 @@ struct _Task_impl_base
         return _CancelAndRunContinuations(true, true, _PropagatedFromAncestor, _ExHolder);
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     bool _CancelWithException(::Platform::Exception ^ _Exception)
     {
         // This task was canceled because the task body encountered an exception.
@@ -2077,7 +2077,7 @@ struct _Task_impl_base
                                 _TaskImplPtr->_ScheduleTask(_PTaskHandle1, details::_ForceInline);
                             });
                         }
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
                         catch (::Platform::Exception ^ _E)
                         {
                             _TaskImplPtr->_CancelWithException(_E);
@@ -2197,7 +2197,7 @@ struct _Task_impl_base
         }
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     static bool _IsNonBlockingThread()
     {
         APTTYPE _AptType;
@@ -2405,13 +2405,13 @@ inline void _TaskEventLogger::_LogTaskCompleted()
 template<typename _ReturnType>
 struct _Task_impl : public _Task_impl_base
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     typedef Windows::Foundation::IAsyncOperation<typename details::_ValueTypeOrRefType<_ReturnType>::_Value>
         _AsyncOperationType;
-#endif // defined(__cplusplus_winrt)
+#endif // (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     _Task_impl(_CancellationTokenState* _Ct, scheduler_ptr _Scheduler_arg) : _Task_impl_base(_Ct, _Scheduler_arg)
     {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         _M_unwrapped_async_op = nullptr;
 #endif /* defined (__cplusplus_winrt) */
     }
@@ -2484,7 +2484,7 @@ struct _Task_impl : public _Task_impl_base
 
                 if (_IsStarted())
                 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
                     if (_M_unwrapped_async_op != nullptr)
                     {
                         // We will only try to cancel async operation but not unwrapped tasks, since unwrapped tasks
@@ -2562,7 +2562,7 @@ struct _Task_impl : public _Task_impl_base
         return true;
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     void _SetUnwrappedAsyncOp(_AsyncOperationType ^ _AsyncOp)
     {
         ::pplx::extensibility::scoped_critical_section_t _LockHolder(_M_ContinuationsCritSec);
@@ -2585,7 +2585,7 @@ struct _Task_impl : public _Task_impl_base
     _ReturnType _GetResult() { return _M_Result.Get(); }
 
     _ResultHolder<_ReturnType> _M_Result; // this means that the result type must have a public default ctor.
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     _AsyncOperationType ^ _M_unwrapped_async_op;
 #endif /* defined (__cplusplus_winrt) */
 };
@@ -3054,7 +3054,7 @@ namespace details
 template<typename _ReturnType, typename _Ty>
 auto _IsValidTaskCtor(_Ty _Param, int, int, int, int) -> decltype(_Param(), std::true_type());
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 // Anything that has GetResults is fine: this covers all async operations
 template<typename _ReturnType, typename _Ty>
 auto _IsValidTaskCtor(_Ty _Param, int, int, int, ...) -> decltype(_Param->GetResults(), std::true_type());
@@ -3076,20 +3076,20 @@ template<typename _ReturnType, typename _Ty>
 void _ValidateTaskConstructorArgs(_Ty _Param)
 {
     static_assert(std::is_same<decltype(_IsValidTaskCtor<_ReturnType>(_Param, 0, 0, 0, 0)), std::true_type>::value,
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
                   "incorrect argument for task constructor; can be a callable object, an asynchronous operation, or a "
                   "task_completion_event"
 #else  /* defined (__cplusplus_winrt) */
                   "incorrect argument for task constructor; can be a callable object or a task_completion_event"
 #endif /* defined (__cplusplus_winrt) */
     );
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     static_assert(!(std::is_same<_Ty, _ReturnType>::value && details::_IsIAsyncInfo<_Ty>::_Value),
                   "incorrect template argument for task; consider using the return type of the async operation");
 #endif /* defined (__cplusplus_winrt) */
 }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 // Helpers for create_async validation
 //
 // A parameter lambda taking no arguments is valid
@@ -3832,7 +3832,7 @@ private:
                 this->_M_pTask, _LogWorkItemAndInvokeUserLambda(_M_function));
         }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         //
         // Overload 2: returns IAsyncAction^
         //
@@ -3984,7 +3984,7 @@ private:
                     _M_ancestorTaskImpl->_GetResult()));
         }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         //
         // Overload 0-2: _InternalReturnType -> IAsyncAction^
         //
@@ -4077,7 +4077,7 @@ private:
                 this->_M_pTask, _LogWorkItemAndInvokeUserLambda(_M_function, std::move(_ResultTask)));
         }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
         //
         // Overload 1-2: task<_InternalReturnType> -> IAsyncAction^
@@ -4163,7 +4163,7 @@ private:
     /// </summary>
     void _TaskInitNoFunctor(task_completion_event<_ReturnType>& _Event) { _Event._RegisterTask(_M_Impl); }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     ///     Initializes a task using an asynchronous operation IAsyncOperation<T>^
     /// </summary>
@@ -4726,7 +4726,7 @@ private:
         _M_unitTask._TaskInitNoFunctor(_Event._M_unitEvent);
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     /// <summary>
     ///     Initializes a task using an asynchronous action IAsyncAction^
     /// </summary>
@@ -4775,7 +4775,7 @@ namespace details
 ///   The following type traits are used for the create_task function.
 /// </summary>
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 // Unwrap functions for asyncOperations
 template<typename _Ty>
 _Ty _GetUnwrappedType(Windows::Foundation::IAsyncOperation<_Ty> ^);
@@ -4875,7 +4875,7 @@ __declspec(noinline) auto create_task(_Ty _Param, task_options _TaskOptions = ta
     -> task<typename details::_TaskTypeFromParam<_Ty>::_Type>
 {
     static_assert(!std::is_same<typename details::_TaskTypeFromParam<_Ty>::_Type, details::_BadArgType>::value,
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
                   "incorrect argument for create_task; can be a callable object, an asynchronous operation, or a "
                   "task_completion_event"
 #else  /* defined (__cplusplus_winrt) */
@@ -4931,7 +4931,7 @@ __declspec(noinline) task<_ReturnType> create_task(const task<_ReturnType>& _Tas
     return _CreatedTask;
 }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 namespace details
 {
 template<typename _T>
diff --git a/Release/include/pplx/pplxwin.h b/Release/include/pplx/pplxwin.h
index 95a23b3..ad2e20f 100644
--- a/Release/include/pplx/pplxwin.h
+++ b/Release/include/pplx/pplxwin.h
@@ -39,7 +39,7 @@ _PPLXIMP void __cdecl YieldExecution();
 /// </summary>
 __declspec(noinline) _PPLXIMP size_t __cdecl CaptureCallstack(void**, size_t, size_t);
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 /// <summary>
 // Internal API which retrieves the next async id.
 /// </summary>
diff --git a/Release/samples/Oauth1Client/Oauth1Client.cpp b/Release/samples/Oauth1Client/Oauth1Client.cpp
index dec9b34..8ceacc1 100644
--- a/Release/samples/Oauth1Client/Oauth1Client.cpp
+++ b/Release/samples/Oauth1Client/Oauth1Client.cpp
@@ -29,7 +29,7 @@ Set following entry in the hosts file:
 #include "cpprest/http_client.h"
 #include <mutex>
 
-#if defined(_WIN32) && !defined(__cplusplus_winrt)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 // Extra includes for Windows desktop.
 #include <windows.h>
 
@@ -60,7 +60,7 @@ static const utility::string_t s_twitter_secret;
 //
 static void open_browser(utility::string_t auth_uri)
 {
-#if defined(_WIN32) && !defined(__cplusplus_winrt)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // NOTE: Windows desktop only.
     auto r = ShellExecuteA(NULL, "open", conversions::utf16_to_utf8(auth_uri).c_str(), NULL, NULL, SW_SHOWNORMAL);
 #elif defined(__APPLE__)
diff --git a/Release/samples/Oauth2Client/Oauth2Client.cpp b/Release/samples/Oauth2Client/Oauth2Client.cpp
index 19072cf..f58893c 100644
--- a/Release/samples/Oauth2Client/Oauth2Client.cpp
+++ b/Release/samples/Oauth2Client/Oauth2Client.cpp
@@ -29,7 +29,7 @@ Set following entry in the hosts file:
 #include "cpprest/http_client.h"
 #include <mutex>
 
-#if defined(_WIN32) && !defined(__cplusplus_winrt)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 // Extra includes for Windows desktop.
 #include <windows.h>
 
@@ -63,7 +63,7 @@ static const utility::string_t s_live_secret;
 //
 static void open_browser(utility::string_t auth_uri)
 {
-#if defined(_WIN32) && !defined(__cplusplus_winrt)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // NOTE: Windows desktop only.
     auto r = ShellExecuteA(NULL, "open", conversions::utf16_to_utf8(auth_uri).c_str(), NULL, NULL, SW_SHOWNORMAL);
 #elif defined(__APPLE__)
diff --git a/Release/samples/WindowsLiveAuth/live_connect.h b/Release/samples/WindowsLiveAuth/live_connect.h
index 325538c..0a1d4c8 100644
--- a/Release/samples/WindowsLiveAuth/live_connect.h
+++ b/Release/samples/WindowsLiveAuth/live_connect.h
@@ -23,7 +23,7 @@ namespace web
 {
 namespace live
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 /// <summary>
 /// This namespace contains symbols for the standard Windows Live permission scopes, which
diff --git a/Release/src/CMakeLists.txt b/Release/src/CMakeLists.txt
index 128f6d6..098d33f 100644
--- a/Release/src/CMakeLists.txt
+++ b/Release/src/CMakeLists.txt
@@ -47,6 +47,10 @@ target_include_directories(cpprest
     pch
 )
 
+if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC" AND (WINDOWS_STORE OR WINDOWS_PHONE))
+    target_compile_options(cpprest PUBLIC /ZW)
+endif()
+
 ## Sub-components
 # Websockets component
 if(CPPREST_WEBSOCKETS_IMPL STREQUAL "none")
diff --git a/Release/src/http/common/x509_cert_utilities.h b/Release/src/http/common/x509_cert_utilities.h
index 854e305..cecb7ab 100644
--- a/Release/src/http/common/x509_cert_utilities.h
+++ b/Release/src/http/common/x509_cert_utilities.h
@@ -63,7 +63,7 @@ struct winhttp_cert_chain_context
 
 #if defined(__APPLE__) || (defined(ANDROID) || defined(__ANDROID__)) ||                                                \
     (defined(_WIN32) && defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)) ||                                                    \
-    (defined(_WIN32) && !defined(__cplusplus_winrt) && !defined(_M_ARM) && !defined(CPPREST_EXCLUDE_WEBSOCKETS))
+    (defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && !defined(_M_ARM) && !defined(CPPREST_EXCLUDE_WEBSOCKETS))
 #define CPPREST_PLATFORM_ASIO_CERT_VERIFICATION_AVAILABLE
 #endif
 
diff --git a/Release/src/http/listener/http_listener.cpp b/Release/src/http/listener/http_listener.cpp
index 6a2edf6..093d4b2 100644
--- a/Release/src/http/listener/http_listener.cpp
+++ b/Release/src/http/listener/http_listener.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if !defined(_WIN32) || (_WIN32_WINNT >= _WIN32_WINNT_VISTA && !defined(__cplusplus_winrt)) ||                         \
+#if !defined(_WIN32) || (_WIN32_WINNT >= _WIN32_WINNT_VISTA && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) ||                         \
     defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
 
 using namespace web::http::experimental;
diff --git a/Release/src/http/listener/http_listener_msg.cpp b/Release/src/http/listener/http_listener_msg.cpp
index 3cc4cc4..d91adbc 100644
--- a/Release/src/http/listener/http_listener_msg.cpp
+++ b/Release/src/http/listener/http_listener_msg.cpp
@@ -30,7 +30,7 @@ pplx::task<void> details::_http_request::_reply_impl(http_response response)
 
     pplx::task<void> response_completed;
 
-#if !defined(__cplusplus_winrt) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && _WIN32_WINNT >= _WIN32_WINNT_VISTA
     auto server_api = experimental::details::http_server_api::server_api();
 
     if (m_server_context && server_api)
diff --git a/Release/src/http/listener/http_server_api.cpp b/Release/src/http/listener/http_server_api.cpp
index ea985f4..fe3f764 100644
--- a/Release/src/http/listener/http_server_api.cpp
+++ b/Release/src/http/listener/http_server_api.cpp
@@ -11,7 +11,7 @@
 
 #include "stdafx.h"
 
-#if !defined(_WIN32) || (_WIN32_WINNT >= _WIN32_WINNT_VISTA && !defined(__cplusplus_winrt)) ||                         \
+#if !defined(_WIN32) || (_WIN32_WINNT >= _WIN32_WINNT_VISTA && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) ||                         \
     defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
 #include "http_server_impl.h"
 
diff --git a/Release/src/http/oauth/oauth1.cpp b/Release/src/http/oauth/oauth1.cpp
index b313cfc..c34a1a8 100644
--- a/Release/src/http/oauth/oauth1.cpp
+++ b/Release/src/http/oauth/oauth1.cpp
@@ -44,7 +44,7 @@ namespace experimental
 //
 // Start of platform-dependent _hmac_sha1() block...
 //
-#if defined(_WIN32) && !defined(__cplusplus_winrt) // Windows desktop
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) // Windows desktop
 
 #include <bcrypt.h>
 #include <winternl.h>
@@ -107,7 +107,7 @@ cleanup:
 }
 #pragma warning(pop)
 
-#elif defined(_WIN32) && defined(__cplusplus_winrt) // Windows RT
+#elif defined(_WIN32) && (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) // Windows RT
 
 using namespace Windows::Security::Cryptography;
 using namespace Windows::Security::Cryptography::Core;
diff --git a/Release/src/pch/stdafx.h b/Release/src/pch/stdafx.h
index 5c398e1..e6cdd92 100644
--- a/Release/src/pch/stdafx.h
+++ b/Release/src/pch/stdafx.h
@@ -38,7 +38,7 @@
 #include <windows.h>
 
 // Windows Header Files:
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include <winhttp.h>
 #endif // !__cplusplus_winrt
 
@@ -106,7 +106,7 @@
 #endif
 #include "cpprest/oauth2.h"
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #if _WIN32_WINNT >= _WIN32_WINNT_VISTA
 #include "cpprest/details/http_server.h"
 #include "cpprest/details/http_server_api.h"
diff --git a/Release/src/pplx/pplxwin.cpp b/Release/src/pplx/pplxwin.cpp
index e25d9ac..5cdfd69 100644
--- a/Release/src/pplx/pplxwin.cpp
+++ b/Release/src/pplx/pplxwin.cpp
@@ -38,23 +38,23 @@ _PPLXIMP size_t __cdecl CaptureCallstack(void** stackData, size_t skipFrames, si
     size_t capturedFrames = 0;
     // RtlCaptureSTackBackTrace is not available in MSDK, so we only call it under Desktop or _DEBUG MSDK.
     //  For MSDK unsupported version, we will return zero frame number.
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     capturedFrames = RtlCaptureStackBackTrace(
         static_cast<DWORD>(skipFrames + 1), static_cast<DWORD>(captureFrames), stackData, nullptr);
 #endif // !__cplusplus_winrt
     return capturedFrames;
 }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 volatile long s_asyncId = 0;
 
 _PPLXIMP unsigned int __cdecl GetNextAsyncId() { return static_cast<unsigned int>(_InterlockedIncrement(&s_asyncId)); }
 
-#endif // defined(__cplusplus_winrt)
+#endif // (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 void InitializeCriticalSection(LPCRITICAL_SECTION _cs)
 {
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // InitializeCriticalSection can cause STATUS_NO_MEMORY see C28125
     __try
     {
@@ -78,7 +78,7 @@ _PPLXIMP event_impl::event_impl()
 {
     static_assert(sizeof(HANDLE) <= sizeof(_M_impl), "HANDLE version mismatch");
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     _M_impl = CreateEvent(NULL, true, false, NULL);
 #else
     _M_impl = CreateEventEx(NULL, NULL, CREATE_EVENT_MANUAL_RESET, EVENT_ALL_ACCESS);
@@ -160,7 +160,7 @@ _PPLXIMP void reader_writer_lock_impl::unlock()
 //
 // scheduler implementation
 //
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 _PPLXIMP void windows_scheduler::schedule(TaskProc_t proc, _In_ void* param)
 {
diff --git a/Release/src/utilities/asyncrt_utils.cpp b/Release/src/utilities/asyncrt_utils.cpp
index cf747c6..1c11d7a 100644
--- a/Release/src/utilities/asyncrt_utils.cpp
+++ b/Release/src/utilities/asyncrt_utils.cpp
@@ -239,7 +239,7 @@ std::string windows_category_impl::message(int errorCode) const CPPREST_NOEXCEPT
     DWORD dwFlags = FORMAT_MESSAGE_FROM_SYSTEM;
     LPCVOID lpSource = NULL;
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     if (errorCode >= 12000)
     {
         dwFlags = FORMAT_MESSAGE_FROM_HMODULE;
@@ -274,7 +274,7 @@ std::error_condition windows_category_impl::default_error_condition(int errorCod
 
     switch (errorCode)
     {
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         case ERROR_WINHTTP_TIMEOUT: return std::errc::timed_out;
         case ERROR_WINHTTP_CANNOT_CONNECT: return std::errc::host_unreachable;
         case ERROR_WINHTTP_CONNECTION_ERROR: return std::errc::connection_aborted;
diff --git a/Release/src/utilities/web_utilities.cpp b/Release/src/utilities/web_utilities.cpp
index ce00078..890ccaf 100644
--- a/Release/src/utilities/web_utilities.cpp
+++ b/Release/src/utilities/web_utilities.cpp
@@ -15,11 +15,11 @@
 
 #include <assert.h>
 
-#if defined(_WIN32) && !defined(__cplusplus_winrt)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include <Wincrypt.h>
 #endif
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include <robuffer.h>
 #endif
 
@@ -29,7 +29,7 @@ namespace details
 {
 #ifdef _WIN32
 #if _WIN32_WINNT >= _WIN32_WINNT_VISTA
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 // Helper function to zero out memory of an IBuffer.
 void winrt_secure_zero_buffer(Windows::Storage::Streams::IBuffer ^ buffer)
diff --git a/Release/tests/common/TestRunner/test_runner.cpp b/Release/tests/common/TestRunner/test_runner.cpp
index 4913699..6bc3e3e 100644
--- a/Release/tests/common/TestRunner/test_runner.cpp
+++ b/Release/tests/common/TestRunner/test_runner.cpp
@@ -337,7 +337,7 @@ static void handle_list_option(bool listProperties, const UnitTest::TestList& te
 
 static void ChangeConsoleTextColorToRed()
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0x0004 | 0x0008);
 #else
@@ -347,7 +347,7 @@ static void ChangeConsoleTextColorToRed()
 
 static void ChangeConsoleTextColorToGreen()
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0x0002 | 0x0008);
 #else
@@ -357,7 +357,7 @@ static void ChangeConsoleTextColorToGreen()
 
 static void ChangeConsoleTextColorToGrey()
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN);
 #else
@@ -495,13 +495,13 @@ void run_all_tests(UnitTest::TestRunner& testRunner, testlist_t& testlists)
     }
 }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include "ROApi.h"
 #endif
 
 int main(int argc, char* argv[])
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     Windows::Foundation::Initialize(RO_INIT_MULTITHREADED);
 #elif defined(_WIN32)
     // Add standard error as output as well.
@@ -625,7 +625,7 @@ int main(int argc, char* argv[])
                   << "Took " << elapsedTime << "ms" << std::endl;
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     if (hComBase != nullptr)
     {
diff --git a/Release/tests/common/UnitTestpp/src/TestList.cpp b/Release/tests/common/UnitTestpp/src/TestList.cpp
index ab3eaaa..fa4ec65 100644
--- a/Release/tests/common/UnitTestpp/src/TestList.cpp
+++ b/Release/tests/common/UnitTestpp/src/TestList.cpp
@@ -84,7 +84,7 @@ ListAdder::ListAdder(TestList& list, Test* test, ...)
     // Only a desktop runner environment can execute a desktop test case and vice versa on winrt.
     // This starts with visual studio versions after VS 2012.
 #if defined(_MSC_VER) && (_MSC_VER >= 1800)
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     test->m_properties.Add("Requires", "winrt");
 #else
     test->m_properties.Add("Requires", "desktop");
diff --git a/Release/tests/common/UnitTestpp/src/TestReporterStdout.cpp b/Release/tests/common/UnitTestpp/src/TestReporterStdout.cpp
index 04f210c..d3d43da 100644
--- a/Release/tests/common/UnitTestpp/src/TestReporterStdout.cpp
+++ b/Release/tests/common/UnitTestpp/src/TestReporterStdout.cpp
@@ -49,7 +49,7 @@ static void PrintfWrapper(const char* format, ...)
     va_list args;
     va_start(args, format);
 
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     const auto bufSize = _vscprintf(format, args) + 1; // add 1 for null termination
     std::vector<char> byteArray;
     byteArray.resize(bufSize);
@@ -71,7 +71,7 @@ static void PrintfWrapper(const char* format, ...)
 
 static void ChangeConsoleTextColorToRed()
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0x0004 | 0x0008);
 #else
@@ -81,7 +81,7 @@ static void ChangeConsoleTextColorToRed()
 
 static void ChangeConsoleTextColorToGreen()
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 0x0002 | 0x0008);
 #else
@@ -91,7 +91,7 @@ static void ChangeConsoleTextColorToGreen()
 
 static void ChangeConsoleTextColorToGrey()
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #elif defined(_WIN32)
     SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN);
 #else
diff --git a/Release/tests/common/utilities/include/common_utilities_public.h b/Release/tests/common/utilities/include/common_utilities_public.h
index 67abfb8..13b90b9 100644
--- a/Release/tests/common/utilities/include/common_utilities_public.h
+++ b/Release/tests/common/utilities/include/common_utilities_public.h
@@ -11,7 +11,7 @@
 
 #pragma once
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #define TEST_UTILITY_API
 #endif // !_WIN32 && !__cplusplus_winrt
 
diff --git a/Release/tests/functional/http/client/authentication_tests.cpp b/Release/tests/functional/http/client/authentication_tests.cpp
index c0440fe..d89cd04 100644
--- a/Release/tests/functional/http/client/authentication_tests.cpp
+++ b/Release/tests/functional/http/client/authentication_tests.cpp
@@ -14,7 +14,7 @@
 #include <stdexcept>
 
 #ifdef _WIN32
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #if !defined(__WRL_NO_DEFAULT_LIB__)
 #define __WRL_NO_DEFAULT_LIB__
 #endif
@@ -114,7 +114,7 @@ SUITE(authentication_tests)
     }
 
 // TFS 648783
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, proxy_auth_known_contentlength, "Ignore:Linux", "88", "Ignore:Apple", "88")
     {
         pplx::task<void> t, t2;
@@ -199,7 +199,7 @@ SUITE(authentication_tests)
     }
 
 // Must specify content length with winrt client, so this test case isn't possible.
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, proxy_auth_unknown_contentlength, "Ignore:Linux", "88", "Ignore:Apple", "88")
     {
         pplx::task<void> t;
@@ -309,7 +309,7 @@ SUITE(authentication_tests)
                         // Client resent the request
                         return scoped.server()->next_request().then(replyFunc);
                     })
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
                     .then([&scoped, &replyFunc]() {
                         // in winrt, client resent the request again
                         return scoped.server()->next_request().then(replyFunc);
@@ -437,7 +437,7 @@ SUITE(authentication_tests)
         VERIFY_ARE_EQUAL(status_codes::OK, response.status_code());
     }
 
-#ifndef __cplusplus_winrt // WinRT implementation doesn't support request buffer caching.
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) // WinRT implementation doesn't support request buffer caching.
     TEST_FIXTURE(server_properties, failed_authentication_resend_request_error, "Requires", "Server;UserName;Password")
     {
         load_parameters();
@@ -460,7 +460,7 @@ SUITE(authentication_tests)
     }
 #endif
 
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, set_user_options_winrt)
     {
         test_http_server::scoped_server scoped(m_uri);
@@ -478,7 +478,7 @@ SUITE(authentication_tests)
 #endif // __cplusplus_winrt
 
 #ifdef _WIN32
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(server_properties, set_user_options, "Requires", "Server;UserName;Password")
     {
         load_parameters();
diff --git a/Release/tests/functional/http/client/client_construction.cpp b/Release/tests/functional/http/client/client_construction.cpp
index acad00e..d343d01 100644
--- a/Release/tests/functional/http/client/client_construction.cpp
+++ b/Release/tests/functional/http/client/client_construction.cpp
@@ -173,7 +173,7 @@ SUITE(client_construction)
         VERIFY_ARE_EQUAL(baseclient2.base_uri(), m_uri);
     }
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
 
     // Verify that the callback of sslcontext is called for HTTPS
     TEST_FIXTURE(uri_address, ssl_context_callback_https)
diff --git a/Release/tests/functional/http/client/compression_tests.cpp b/Release/tests/functional/http/client/compression_tests.cpp
index 46ac3f4..afd2cda 100644
--- a/Release/tests/functional/http/client/compression_tests.cpp
+++ b/Release/tests/functional/http/client/compression_tests.cpp
@@ -18,7 +18,7 @@
 #include "cpprest/version.h"
 #include <fstream>
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include "cpprest/http_listener.h"
 #endif
 
@@ -825,7 +825,7 @@ SUITE(compression_tests)
 
                         if (transfer)
                         {
-#if defined(_WIN32) && !defined(__cplusplus_winrt) && !defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && !defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
                             // Compression happens in the listener itself
                             done = request.headers().match(web::http::header_names::te, encoding);
                             VERIFY_IS_TRUE(done);
@@ -1080,7 +1080,7 @@ SUITE(compression_tests)
                                                         compression::details::header_types::content_encoding,
                                                         dfactories);
                                                 }
-#if defined(_WIN32) && !defined(__cplusplus_winrt) && !defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && !defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
                                                 VERIFY_IS_TRUE((bool)d);
 #else  // _WIN32
                                                 VERIFY_ARE_NOT_EQUAL((bool)d, !!transfer);
diff --git a/Release/tests/functional/http/client/connections_and_errors.cpp b/Release/tests/functional/http/client/connections_and_errors.cpp
index 847755d..29eff46 100644
--- a/Release/tests/functional/http/client/connections_and_errors.cpp
+++ b/Release/tests/functional/http/client/connections_and_errors.cpp
@@ -12,7 +12,7 @@
 
 #include "stdafx.h"
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include "cpprest/http_listener.h"
 #endif
 
@@ -203,7 +203,7 @@ SUITE(connections_and_errors)
         VERIFY_THROWS(request.get(), http_exception);
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, content_ready_timeout)
     {
         web::http::experimental::listener::http_listener listener(m_uri);
@@ -276,7 +276,7 @@ SUITE(connections_and_errors)
     }
 
 // This test can't be implemented with our test server so isn't available on WinRT.
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, cancel_after_headers)
     {
         web::http::experimental::listener::http_listener listener(m_uri);
@@ -367,7 +367,7 @@ SUITE(connections_and_errors)
     }
 
 // This test can't be implemented with our test server since it doesn't stream data so isn't avaliable on WinRT.
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, cancel_while_downloading_data)
     {
         web::http::experimental::listener::http_listener listener(m_uri);
diff --git a/Release/tests/functional/http/client/header_tests.cpp b/Release/tests/functional/http/client/header_tests.cpp
index 4936aab..61da8ba 100644
--- a/Release/tests/functional/http/client/header_tests.cpp
+++ b/Release/tests/functional/http/client/header_tests.cpp
@@ -36,7 +36,7 @@ SUITE(outside_tests)
 
         http_request msg(methods::POST);
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         // The WinRT-based HTTP stack does not support headers that have no
         // value, which means that there is no point in making this particular
         // header test, it is an unsupported feature on WinRT.
@@ -385,7 +385,7 @@ SUITE(outside_tests)
 
         client.request(default_host_headers_request).get();
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         // Test case where we overwrite the host header
         http_request overwritten_host_headers_request(methods::GET);
         overwritten_host_headers_request.headers().add(U("Host"), host);
diff --git a/Release/tests/functional/http/client/http_client_fuzz_tests.cpp b/Release/tests/functional/http/client/http_client_fuzz_tests.cpp
index 85cb9de..7fe7610 100644
--- a/Release/tests/functional/http/client/http_client_fuzz_tests.cpp
+++ b/Release/tests/functional/http/client/http_client_fuzz_tests.cpp
@@ -63,7 +63,7 @@ SUITE(http_client_fuzz_tests)
         http_client client(m_uri);
         http_request msg(methods::POST);
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         // The WinRT-based HTTP stack does not support headers that have no
         // value, which means that there is no point in making this particular
         // header test, it is an unsupported feature on WinRT.
diff --git a/Release/tests/functional/http/client/http_methods_tests.cpp b/Release/tests/functional/http/client/http_methods_tests.cpp
index b8f60c9..54f2e46 100644
--- a/Release/tests/functional/http/client/http_methods_tests.cpp
+++ b/Release/tests/functional/http/client/http_methods_tests.cpp
@@ -44,7 +44,7 @@ SUITE(http_methods_tests)
                                             methods::POST,
                                             methods::PUT,
                                             methods::PATCH,
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #ifdef _WIN32 // - ditto
                                             methods::TRCE,
 #endif
@@ -61,7 +61,7 @@ SUITE(http_methods_tests)
                                             U("POST"),
                                             U("PUT"),
                                             U("PATCH"),
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #ifdef _WIN32
                                             U("TRACE"),
 #endif
@@ -80,7 +80,7 @@ SUITE(http_methods_tests)
         }
     }
 
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, http_trace_fails_on_winrt)
     {
         http_client client(m_uri);
diff --git a/Release/tests/functional/http/client/outside_tests.cpp b/Release/tests/functional/http/client/outside_tests.cpp
index 439772c..5bb54c6 100644
--- a/Release/tests/functional/http/client/outside_tests.cpp
+++ b/Release/tests/functional/http/client/outside_tests.cpp
@@ -10,7 +10,7 @@
  ****/
 
 #include "stdafx.h"
-#if defined(_MSC_VER) && !defined(__cplusplus_winrt)
+#if defined(_MSC_VER) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #define WIN32_LEAN_AND_MEAN
 #include <Windows.h>
 
@@ -205,7 +205,7 @@ SUITE(outside_tests)
         });
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     static void test_ignored_ssl_cert(const uri& base_uri)
     {
         handle_timeout([&base_uri] {
@@ -216,17 +216,17 @@ SUITE(outside_tests)
             VERIFY_ARE_EQUAL(status_codes::OK, response.status_code());
         });
     }
-#endif // !defined(__cplusplus_winrt)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
     TEST(server_selfsigned_cert) { test_failed_ssl_cert(U("https://self-signed.badssl.com/")); }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST(server_selfsigned_cert_ignored) { test_ignored_ssl_cert(U("https://self-signed.badssl.com/")); }
-#endif // !defined(__cplusplus_winrt)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
     TEST(server_hostname_mismatch) { test_failed_ssl_cert(U("https://wrong.host.badssl.com/")); }
 
-#if !defined(__cplusplus_winrt) && !defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && !defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
     TEST(server_hostname_host_override)
     {
         handle_timeout([] {
@@ -248,30 +248,30 @@ SUITE(outside_tests)
         auto response = client.request(req).get();
         VERIFY_ARE_EQUAL(status_codes::OK, response.status_code());
     }
-#endif // !defined(__cplusplus_winrt) && !defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) && !defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
 
     TEST(server_cert_expired) { test_failed_ssl_cert(U("https://expired.badssl.com/")); }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST(server_cert_expired_ignored) { test_ignored_ssl_cert(U("https://expired.badssl.com/")); }
-#endif // !defined(__cplusplus_winrt)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
     TEST(server_cert_revoked, "Ignore:Android", "229", "Ignore:Apple", "229", "Ignore:Linux", "229")
     {
         test_failed_ssl_cert(U("https://revoked.badssl.com/"));
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST(server_cert_revoked_ignored) { test_ignored_ssl_cert(U("https://revoked.badssl.com/")); }
-#endif // !defined(__cplusplus_winrt)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
     TEST(server_cert_untrusted) { test_failed_ssl_cert(U("https://untrusted-root.badssl.com/")); }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST(server_cert_untrusted_ignored) { test_ignored_ssl_cert(U("https://untrusted-root.badssl.com/")); }
-#endif // !defined(__cplusplus_winrt)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST(ignore_server_cert_invalid, "Ignore:Android", "229", "Ignore:Apple", "229", "Ignore:Linux", "229")
     {
         handle_timeout([] {
@@ -284,7 +284,7 @@ SUITE(outside_tests)
             VERIFY_ARE_EQUAL(status_codes::OK, request.status_code());
         });
     }
-#endif // !defined(__cplusplus_winrt)
+#endif // !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 } // SUITE(outside_tests)
 
 } // namespace client
diff --git a/Release/tests/functional/http/client/proxy_tests.cpp b/Release/tests/functional/http/client/proxy_tests.cpp
index 9a6c520..c1d3a38 100644
--- a/Release/tests/functional/http/client/proxy_tests.cpp
+++ b/Release/tests/functional/http/client/proxy_tests.cpp
@@ -91,7 +91,7 @@ SUITE(proxy_tests)
         VERIFY_ARE_EQUAL(u, hconfig.proxy().address());
     }
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // IXHR2 does not allow the proxy settings to be changed
     TEST_FIXTURE(uri_address, auto_discovery_proxy)
     {
@@ -132,7 +132,7 @@ SUITE(proxy_tests)
 
 #endif // __cplusplus_winrt
 
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, no_proxy_options_on_winrt)
     {
         http_client_config config;
@@ -143,7 +143,7 @@ SUITE(proxy_tests)
     }
 #endif
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // Can't specify a proxy with WinRT implementation.
     TEST_FIXTURE(uri_address,
                  http_proxy_with_credentials,
diff --git a/Release/tests/functional/http/client/request_stream_tests.cpp b/Release/tests/functional/http/client/request_stream_tests.cpp
index 6d38072..5df8234 100644
--- a/Release/tests/functional/http/client/request_stream_tests.cpp
+++ b/Release/tests/functional/http/client/request_stream_tests.cpp
@@ -11,7 +11,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
@@ -33,7 +33,7 @@ namespace client
 {
 utility::string_t get_full_name(const utility::string_t& name)
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // On WinRT, we must compensate for the fact that we will be accessing files in the
     // Documents folder
     auto file = pplx::create_task(KnownFolders::DocumentsLibrary->CreateFileAsync(
@@ -48,7 +48,7 @@ utility::string_t get_full_name(const utility::string_t& name)
 template<typename _CharType>
 pplx::task<streams::streambuf<_CharType>> OPEN_R(const utility::string_t& name)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return streams::file_buffer<_CharType>::open(name, std::ios_base::in);
 #else
     auto file =
@@ -77,7 +77,7 @@ SUITE(request_stream_tests)
             rbuf.putn_nocopy((const uint8_t*)text, len);
     }
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, ixhr2_transfer_encoding)
     {
         // Transfer encoding chunked is not supported. Not specifying the
@@ -110,7 +110,7 @@ SUITE(request_stream_tests)
         auto stream = OPEN_R<uint8_t>(fname).get();
         http_request msg(methods::POST);
         msg.set_body(stream);
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         msg.headers().set_content_length(26);
 #endif
         p_server->next_request().then([&](test_request* p_request) {
@@ -139,7 +139,7 @@ SUITE(request_stream_tests)
         auto stream = OPEN_R<uint8_t>(fname).get();
         http_request msg(methods::POST);
         msg.set_body(stream);
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         msg.headers().set_content_length(26);
 #endif
         p_server->next_request().then([&](test_request* p_request) {
@@ -183,7 +183,7 @@ SUITE(request_stream_tests)
         }
         else
         {
-#if defined __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
             http_asserts::assert_response_equals(
                 client.request(methods::POST, U(""), stream, 26, U("text/plain")).get(), status_codes::OK);
 #else
@@ -195,7 +195,7 @@ SUITE(request_stream_tests)
         stream.close().wait();
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, without_content_length_1)
     {
         stream_request_impl(m_uri, false, 64 * 1024, U("without_content_length_1.txt"));
@@ -304,7 +304,7 @@ SUITE(request_stream_tests)
     };
 
 // Ignore on WinRT CodePlex 144
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, set_body_stream_exception)
     {
         test_http_server::scoped_server scoped(m_uri);
@@ -332,7 +332,7 @@ SUITE(request_stream_tests)
 
 // These tests aren't possible on WinRT because they don't
 // specify a Content-Length.
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, stream_close_early)
     {
         http_client client(m_uri);
@@ -379,7 +379,7 @@ SUITE(request_stream_tests)
 #endif
 
     // Ignore on WinRT only CodePlex 144
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, stream_close_early_with_exception_and_contentlength)
     {
         http_client client(m_uri);
@@ -406,7 +406,7 @@ SUITE(request_stream_tests)
 #endif
 
 // Ignore on WinRT only CodePlex 144
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, stream_close_early_with_contentlength, "Ignore:Apple", "328")
     {
         http_client client(m_uri);
diff --git a/Release/tests/functional/http/client/request_uri_tests.cpp b/Release/tests/functional/http/client/request_uri_tests.cpp
index 5d61556..6c94f92 100644
--- a/Release/tests/functional/http/client/request_uri_tests.cpp
+++ b/Release/tests/functional/http/client/request_uri_tests.cpp
@@ -88,7 +88,7 @@ SUITE(request_uri_tests)
 
         // WinRT implementation percent encodes the '#'.
         utility::string_t expected_value = U("/heheh?key1=value2#fragment");
-#if defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
         expected_value = percent_encode_pound(expected_value);
 #endif
 
@@ -137,7 +137,7 @@ SUITE(request_uri_tests)
             p_server->next_request().then([&](test_request* p_request) {
                 // WinRT implementation percent encodes the '#'.
                 utility::string_t expected_value = U("/path1?key1=value1&key2=value2#frag");
-#if defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
                 expected_value = percent_encode_pound(expected_value);
 #endif
                 http_asserts::assert_test_request_equals(p_request, methods::GET, expected_value);
@@ -157,7 +157,7 @@ SUITE(request_uri_tests)
             p_server->next_request().then([&](test_request* p_request) {
                 // WinRT implementation percent encodes the '#'.
                 utility::string_t expected_value = U("/path1/path2?key2=value2#fragmentfg2");
-#if defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_WINHTTPPAL)
                 expected_value = percent_encode_pound(expected_value);
 #endif
                 http_asserts::assert_test_request_equals(p_request, methods::GET, expected_value);
diff --git a/Release/tests/functional/http/client/response_extract_tests.cpp b/Release/tests/functional/http/client/response_extract_tests.cpp
index f269f62..1b594aa 100644
--- a/Release/tests/functional/http/client/response_extract_tests.cpp
+++ b/Release/tests/functional/http/client/response_extract_tests.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include "cpprest/http_listener.h"
 #endif
 
@@ -307,7 +307,7 @@ SUITE(response_extract_tests)
         VERIFY_THROWS(rsp.extract_string().get(), http_exception);
     }
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, extract_empty_string)
     {
         web::http::experimental::listener::http_listener listener(m_uri);
diff --git a/Release/tests/functional/http/client/response_stream_tests.cpp b/Release/tests/functional/http/client/response_stream_tests.cpp
index 9806d79..c643470 100644
--- a/Release/tests/functional/http/client/response_stream_tests.cpp
+++ b/Release/tests/functional/http/client/response_stream_tests.cpp
@@ -13,11 +13,11 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include "cpprest/http_listener.h"
 #endif
 
@@ -40,7 +40,7 @@ namespace client
 template<typename _CharType>
 pplx::task<streams::streambuf<_CharType>> OPENSTR_R(const utility::string_t& name)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return streams::file_buffer<_CharType>::open(name, std::ios_base::in);
 #else
     auto file =
@@ -54,7 +54,7 @@ template<typename _CharType>
 pplx::task<Concurrency::streams::basic_ostream<_CharType>> OPENSTR_W(const utility::string_t& name,
                                                                      std::ios_base::openmode mode = std::ios_base::out)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return Concurrency::streams::file_stream<_CharType>::open_ostream(name, mode);
 #else
     auto file = pplx::create_task(KnownFolders::DocumentsLibrary->CreateFileAsync(
@@ -172,7 +172,7 @@ SUITE(response_stream_tests)
         // In the latter case, the server will not see a message, and so the
         // test will hang. In order to prevent that from happening, we will
         // not have a server listening on WinRT.
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         test_http_server::scoped_server scoped(m_uri);
         test_http_server* p_server = scoped.server();
 
@@ -239,7 +239,7 @@ SUITE(response_stream_tests)
         }
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
     template<typename CharType>
     class basic_throws_buffer : public streams::details::streambuf_state_manager<CharType>
diff --git a/Release/tests/functional/http/listener/listener_construction_tests.cpp b/Release/tests/functional/http/listener/listener_construction_tests.cpp
index c6d9587..f1069a3 100644
--- a/Release/tests/functional/http/listener/listener_construction_tests.cpp
+++ b/Release/tests/functional/http/listener/listener_construction_tests.cpp
@@ -425,7 +425,7 @@ SUITE(listener_construction_tests)
         }
     }
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_LISTENER_ASIO)
 
     TEST_FIXTURE(uri_address, create_https_listener_get, "Ignore", "github 209")
     {
@@ -549,7 +549,7 @@ XzJTD4slrGSJrcpLt/g/Jqqdjg==
         listener.open().wait();
 
         client::http_client_config client_config;
-#if !defined(_WIN32) && !defined(__cplusplus_winrt) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || defined(CPPREST_FORCE_HTTP_CLIENT_ASIO)
         client_config.set_ssl_context_callback(
             [&](boost::asio::ssl::context& ctx) { ctx.add_certificate_authority(cert); });
 #else
diff --git a/Release/tests/functional/http/utilities/include/http_test_utilities_public.h b/Release/tests/functional/http/utilities/include/http_test_utilities_public.h
index 9e2821c..e7731c7 100644
--- a/Release/tests/functional/http/utilities/include/http_test_utilities_public.h
+++ b/Release/tests/functional/http/utilities/include/http_test_utilities_public.h
@@ -11,7 +11,7 @@
 
 #pragma once
 
-#if !defined(_WIN32) && !defined(__cplusplus_winrt)
+#if !defined(_WIN32) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #define TEST_UTILITY_API
 #endif // !_WIN32 && !__cplusplus_winrt
 
diff --git a/Release/tests/functional/json/construction_tests.cpp b/Release/tests/functional/json/construction_tests.cpp
index 111b145..f3ace38 100644
--- a/Release/tests/functional/json/construction_tests.cpp
+++ b/Release/tests/functional/json/construction_tests.cpp
@@ -25,7 +25,7 @@ namespace json_tests
 {
 SUITE(construction_tests)
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
     TEST(winrt_platform_string)
     {
diff --git a/Release/tests/functional/streams/fstreambuf_tests.cpp b/Release/tests/functional/streams/fstreambuf_tests.cpp
index 190eb66..2cdb9df 100644
--- a/Release/tests/functional/streams/fstreambuf_tests.cpp
+++ b/Release/tests/functional/streams/fstreambuf_tests.cpp
@@ -14,7 +14,7 @@
 #include "CppSparseFile.h"
 #endif
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
@@ -59,7 +59,7 @@ pplx::task<concurrency::streams::streambuf<_CharType>> OPEN(const utility::strin
                                                             std::ios::ios_base::openmode mode,
                                                             int _Prot = DEFAULT_PROT)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return concurrency::streams::file_buffer<_CharType>::open(name, mode, _Prot);
 #else
     try
@@ -906,7 +906,7 @@ SUITE(file_buffer_tests)
     }
 #endif
 
-#if defined(_WIN32) && (!defined(__cplusplus_winrt)) && defined(_WIN64)
+#if defined(_WIN32) && (!(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)) && defined(_WIN64)
     // since casablanca does not use sparse file apis we're not doing the reverse test (write one byte at 4Gb and verify
     // with std apis) because the file created would be too big
     TEST(read_one_byte_at_4G)
diff --git a/Release/tests/functional/streams/istream_tests.cpp b/Release/tests/functional/streams/istream_tests.cpp
index 32cb545..c6ca822 100644
--- a/Release/tests/functional/streams/istream_tests.cpp
+++ b/Release/tests/functional/streams/istream_tests.cpp
@@ -17,7 +17,7 @@
 #undef max
 #endif
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
@@ -41,7 +41,7 @@ using namespace concurrency::streams;
 
 utility::string_t get_full_name(const utility::string_t& name)
 {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // On WinRT, we must compensate for the fact that we will be accessing files in the
     // Documents folder
     auto file = pplx::create_task(KnownFolders::DocumentsLibrary->CreateFileAsync(
@@ -107,7 +107,7 @@ void fill_file_w(const utility::string_t& name, size_t repetitions = 1)
 template<typename _CharType>
 pplx::task<streams::streambuf<_CharType>> OPEN_R(const utility::string_t& name, int _Prot = DEFAULT_PROT)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return streams::file_buffer<_CharType>::open(name, std::ios_base::in, _Prot);
 #else
     auto file =
diff --git a/Release/tests/functional/streams/memstream_tests.cpp b/Release/tests/functional/streams/memstream_tests.cpp
index 3bdbd68..d8cceae 100644
--- a/Release/tests/functional/streams/memstream_tests.cpp
+++ b/Release/tests/functional/streams/memstream_tests.cpp
@@ -9,7 +9,7 @@
  * =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  ****/
 #include "stdafx.h"
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include <wrl.h>
 #endif
 #ifdef _WIN32
@@ -1526,7 +1526,7 @@ SUITE(memstream_tests)
 #ifdef _WIN32
 
     class ISequentialStream_bridge
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::ClassicCom>,
                                               ISequentialStream>
 #endif
diff --git a/Release/tests/functional/streams/ostream_tests.cpp b/Release/tests/functional/streams/ostream_tests.cpp
index 078337d..3cdba38 100644
--- a/Release/tests/functional/streams/ostream_tests.cpp
+++ b/Release/tests/functional/streams/ostream_tests.cpp
@@ -12,7 +12,7 @@
 
 using namespace concurrency::streams;
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
@@ -36,7 +36,7 @@ template<typename _CharType>
 pplx::task<concurrency::streams::basic_ostream<_CharType>> OPENSTR_W(const utility::string_t& name,
                                                                      std::ios_base::openmode mode = std::ios_base::out)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return concurrency::streams::file_stream<_CharType>::open_ostream(name, mode);
 #else
     auto file = pplx::create_task(KnownFolders::DocumentsLibrary->CreateFileAsync(
@@ -55,7 +55,7 @@ template<typename _CharType>
 pplx::task<concurrency::streams::basic_istream<_CharType>> OPENSTR_R(const utility::string_t& name,
                                                                      std::ios_base::openmode mode = std::ios_base::in)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return concurrency::streams::file_stream<_CharType>::open_istream(name, mode);
 #else
     auto file =
diff --git a/Release/tests/functional/streams/stdstream_tests.cpp b/Release/tests/functional/streams/stdstream_tests.cpp
index 34b9b3a..b58d2b0 100644
--- a/Release/tests/functional/streams/stdstream_tests.cpp
+++ b/Release/tests/functional/streams/stdstream_tests.cpp
@@ -14,11 +14,11 @@
 #include "cpprest/producerconsumerstream.h"
 #include "cpprest/rawptrstream.h"
 
-#if (!defined(_WIN32) || !defined(CPPREST_EXCLUDE_WEBSOCKETS)) && !defined(__cplusplus_winrt)
+#if (!defined(_WIN32) || !defined(CPPREST_EXCLUDE_WEBSOCKETS)) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #include <boost/interprocess/streams/bufferstream.hpp>
 #endif
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
@@ -67,7 +67,7 @@ void fill_file(const utility::string_t& name, std::string text, size_t repetitio
 template<typename _CharType>
 pplx::task<Concurrency::streams::streambuf<_CharType>> OPEN_R(const utility::string_t& name)
 {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     return Concurrency::streams::file_buffer<_CharType>::open(name, std::ios_base::in);
 #else
     auto file =
@@ -778,7 +778,7 @@ SUITE(stdstreambuf_tests)
         }
     }
 
-#if (!defined(_WIN32) || !defined(CPPREST_EXCLUDE_WEBSOCKETS)) && !defined(__cplusplus_winrt)
+#if (!defined(_WIN32) || !defined(CPPREST_EXCLUDE_WEBSOCKETS)) && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST(ostream_full_throw_exception)
     {
         char tgt_buffer[5];
diff --git a/Release/tests/functional/streams/winrt_interop_tests.cpp b/Release/tests/functional/streams/winrt_interop_tests.cpp
index 8781c05..cf70259 100644
--- a/Release/tests/functional/streams/winrt_interop_tests.cpp
+++ b/Release/tests/functional/streams/winrt_interop_tests.cpp
@@ -14,7 +14,7 @@ using namespace concurrency::streams;
 using namespace utility;
 using namespace ::pplx;
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
diff --git a/Release/tests/functional/utils/win32_encryption_tests.cpp b/Release/tests/functional/utils/win32_encryption_tests.cpp
index a2be7cd..d21adeb 100644
--- a/Release/tests/functional/utils/win32_encryption_tests.cpp
+++ b/Release/tests/functional/utils/win32_encryption_tests.cpp
@@ -21,7 +21,7 @@ namespace functional
 {
 namespace utils_tests
 {
-#if defined(_WIN32) && _WIN32_WINNT >= _WIN32_WINNT_VISTA && !defined(__cplusplus_winrt)
+#if defined(_WIN32) && _WIN32_WINNT >= _WIN32_WINNT_VISTA && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 SUITE(win32_encryption)
 {
     TEST(win32_encryption_random_string)
@@ -42,7 +42,7 @@ SUITE(win32_encryption)
 
 } // SUITE(win32_encryption)
 
-#endif // defined(_WIN32) && _WIN32_WINNT >= _WIN32_WINNT_VISTA && !defined(__cplusplus_winrt)
+#endif // defined(_WIN32) && _WIN32_WINNT >= _WIN32_WINNT_VISTA && !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 } // namespace utils_tests
 } // namespace functional
diff --git a/Release/tests/functional/websockets/client/authentication_tests.cpp b/Release/tests/functional/websockets/client/authentication_tests.cpp
index a35949c..09bc64a 100644
--- a/Release/tests/functional/websockets/client/authentication_tests.cpp
+++ b/Release/tests/functional/websockets/client/authentication_tests.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace web::websockets;
 using namespace web::websockets::client;
@@ -31,7 +31,7 @@ namespace client
 SUITE(authentication_tests)
 {
 // Authorization not implemented in non WinRT websocket_client yet - CodePlex 254
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     void auth_helper(test_websocket_server & server,
                      const utility::string_t& username = U(""),
                      const utility::string_t& password = U(""))
diff --git a/Release/tests/functional/websockets/client/client_construction.cpp b/Release/tests/functional/websockets/client/client_construction.cpp
index cffe647..0449ff6 100644
--- a/Release/tests/functional/websockets/client/client_construction.cpp
+++ b/Release/tests/functional/websockets/client/client_construction.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace concurrency::streams;
 
diff --git a/Release/tests/functional/websockets/client/close_tests.cpp b/Release/tests/functional/websockets/client/close_tests.cpp
index 58a6e7c..fa446d9 100644
--- a/Release/tests/functional/websockets/client/close_tests.cpp
+++ b/Release/tests/functional/websockets/client/close_tests.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace concurrency::streams;
 
diff --git a/Release/tests/functional/websockets/client/error_tests.cpp b/Release/tests/functional/websockets/client/error_tests.cpp
index 7e24ec5..a5c1867 100644
--- a/Release/tests/functional/websockets/client/error_tests.cpp
+++ b/Release/tests/functional/websockets/client/error_tests.cpp
@@ -11,7 +11,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace concurrency::streams;
 
diff --git a/Release/tests/functional/websockets/client/proxy_tests.cpp b/Release/tests/functional/websockets/client/proxy_tests.cpp
index 16df878..66e9a00 100644
--- a/Release/tests/functional/websockets/client/proxy_tests.cpp
+++ b/Release/tests/functional/websockets/client/proxy_tests.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace web::websockets;
 using namespace web::websockets::client;
@@ -30,7 +30,7 @@ namespace client
 {
 SUITE(proxy_tests)
 {
-#ifdef __cplusplus_winrt
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     TEST_FIXTURE(uri_address, no_proxy_options_on_winrt)
     {
         websocket_client_config config;
@@ -40,7 +40,7 @@ SUITE(proxy_tests)
     }
 #endif
 
-#ifndef __cplusplus_winrt
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // Can't specify a proxy with WinRT implementation.
     TEST_FIXTURE(uri_address, proxy_with_credentials, "Ignore:Android", "390")
     {
diff --git a/Release/tests/functional/websockets/client/receive_msg_tests.cpp b/Release/tests/functional/websockets/client/receive_msg_tests.cpp
index 8100d51..ebbcc9a 100644
--- a/Release/tests/functional/websockets/client/receive_msg_tests.cpp
+++ b/Release/tests/functional/websockets/client/receive_msg_tests.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace concurrency;
 using namespace concurrency::streams;
diff --git a/Release/tests/functional/websockets/client/send_msg_tests.cpp b/Release/tests/functional/websockets/client/send_msg_tests.cpp
index eed1ded..8e10ca0 100644
--- a/Release/tests/functional/websockets/client/send_msg_tests.cpp
+++ b/Release/tests/functional/websockets/client/send_msg_tests.cpp
@@ -13,7 +13,7 @@
 
 #include "stdafx.h"
 
-#if defined(__cplusplus_winrt) || !defined(_M_ARM)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP) || !defined(_M_ARM)
 
 using namespace concurrency;
 using namespace concurrency::streams;
@@ -23,7 +23,7 @@ using namespace web::websockets::client;
 
 using namespace tests::functional::websocket::utilities;
 
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 using namespace Windows::Storage;
 #endif
 
@@ -39,7 +39,7 @@ SUITE(send_msg_tests)
 {
     utility::string_t get_full_name(const utility::string_t& name)
     {
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         // On WinRT, we must compensate for the fact that we will be accessing files in the
         // Documents folder
         auto file =
@@ -55,7 +55,7 @@ SUITE(send_msg_tests)
     template<typename _CharType>
     pplx::task<streams::streambuf<_CharType>> OPEN_R(const utility::string_t& name)
     {
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
         return streams::file_buffer<_CharType>::open(name, std::ios_base::in);
 #else
         auto file =
@@ -508,7 +508,7 @@ SUITE(send_msg_tests)
         client.close().wait();
     }
 
-#if !defined(__cplusplus_winrt)
+#if !(WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
     // Send a ping message to the server
     TEST_FIXTURE(uri_address, send_ping_msg)
     {
diff --git a/Release/tests/functional/websockets/utilities/stdafx.h b/Release/tests/functional/websockets/utilities/stdafx.h
index 0c6e351..b02bc8b 100644
--- a/Release/tests/functional/websockets/utilities/stdafx.h
+++ b/Release/tests/functional/websockets/utilities/stdafx.h
@@ -20,7 +20,7 @@
 // Trick Boost.Asio into thinking CE, otherwise _beginthreadex will be used which is banned
 // for the Windows Runtime pre VS2015. Then CreateThread will be used instead.
 #if _MSC_VER < 1900
-#if defined(__cplusplus_winrt)
+#if (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 #define UNDER_CE 1
 #endif
 #endif
diff --git a/Release/tests/functional/websockets/utilities/test_websocket_server.h b/Release/tests/functional/websockets/utilities/test_websocket_server.h
index 23fbea1..8d6a932 100644
--- a/Release/tests/functional/websockets/utilities/test_websocket_server.h
+++ b/Release/tests/functional/websockets/utilities/test_websocket_server.h
@@ -26,7 +26,7 @@
 #endif
 #endif
 
-#if !defined(_M_ARM) || defined(__cplusplus_winrt)
+#if !defined(_M_ARM) || (WINAPI_FAMILY == WINAPI_FAMILY_PC_APP)
 
 namespace tests
 {
