Subject: [PATCH] 3
---
Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	(revision 2dc874c490874d25b187f2fa0057073910096a3c)
+++ b/CMakeLists.txt	(revision df1095644b020d5f99a84ce84a187d3eb1152845)
@@ -2,10 +2,14 @@
 # Originally created for "roxlu build system" to compile libyuv on windows
 # Run with -DTEST=ON to build unit tests

-PROJECT ( YUV C CXX )	# "C" is required even for C++ projects
 CMAKE_MINIMUM_REQUIRED( VERSION 2.8.12 )
+CMAKE_POLICY( SET CMP0022 NEW )
+
+PROJECT ( YUV C CXX )	# "C" is required even for C++ projects
 OPTION( TEST "Built unit tests" OFF )

+SET( CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE ON )
+
 SET ( ly_base_dir	${PROJECT_SOURCE_DIR} )
 SET ( ly_src_dir	${ly_base_dir}/source )
 SET ( ly_inc_dir	${ly_base_dir}/include )
@@ -14,6 +18,7 @@
 SET ( ly_lib_static	${ly_lib_name} )
 SET ( ly_lib_shared	${ly_lib_name}_shared )

+FILE ( GLOB_RECURSE ly_include_files ${ly_inc_dir}/libyuv/*.h )
 FILE ( GLOB_RECURSE	ly_source_files ${ly_src_dir}/*.cc )
 LIST ( SORT			ly_source_files )

@@ -22,24 +27,29 @@

 INCLUDE_DIRECTORIES( BEFORE ${ly_inc_dir} )

-if(MSVC)
-  ADD_DEFINITIONS ( -D_CRT_SECURE_NO_WARNINGS )
-endif()
-
 # this creates the static library (.a)
-ADD_LIBRARY				( ${ly_lib_static} STATIC ${ly_source_files} )
-
-# this creates the shared library (.so)
-ADD_LIBRARY				( ${ly_lib_shared} SHARED ${ly_source_files} )
-SET_TARGET_PROPERTIES	( ${ly_lib_shared} PROPERTIES OUTPUT_NAME "${ly_lib_name}" )
-SET_TARGET_PROPERTIES	( ${ly_lib_shared} PROPERTIES PREFIX "lib" )
-if(WIN32)
-  SET_TARGET_PROPERTIES	( ${ly_lib_shared} PROPERTIES IMPORT_PREFIX "lib" )
+if (NOT BUILD_SHARED_LIBS)
+  ADD_LIBRARY				( ${ly_lib_static} STATIC ${ly_source_files} )
+  SET_TARGET_PROPERTIES     ( ${ly_lib_static} PROPERTIES PUBLIC_HEADER include/libyuv.h )
+else()
+  # this creates the shared library (.so)
+  ADD_LIBRARY			( ${ly_lib_shared} SHARED ${ly_source_files} )
+  SET_TARGET_PROPERTIES	( ${ly_lib_shared} PROPERTIES OUTPUT_NAME "${ly_lib_name}" )
+  SET_TARGET_PROPERTIES	( ${ly_lib_shared} PROPERTIES PREFIX "lib" )
+  if(WIN32)
+    SET_TARGET_PROPERTIES	( ${ly_lib_shared} PROPERTIES IMPORT_PREFIX "lib" )
+  endif()
 endif()
+

 # this creates the conversion tool
 ADD_EXECUTABLE			( yuvconvert ${ly_base_dir}/util/yuvconvert.cc )
-TARGET_LINK_LIBRARIES	( yuvconvert ${ly_lib_static} )
+
+if (BUILD_SHARED_LIBS)
+  TARGET_LINK_LIBRARIES   ( yuvconvert ${ly_lib_shared} )
+else()
+  TARGET_LINK_LIBRARIES   ( yuvconvert ${ly_lib_static} )
+endif()

 # this creates the yuvconstants tool
 ADD_EXECUTABLE      ( yuvconstants ${ly_base_dir}/util/yuvconstants.c )
@@ -47,8 +57,12 @@

 find_package ( JPEG )
 if (JPEG_FOUND)
-  include_directories( ${JPEG_INCLUDE_DIR} )
-  target_link_libraries( ${ly_lib_shared} ${JPEG_LIBRARY} )
+  include_directories( ${JPEG_INCLUDE_DIR})
+  if(BUILD_SHARED_LIBS)
+    target_link_libraries(${ly_lib_shared} PUBLIC ${JPEG_LIBRARY})
+  else()
+    target_link_libraries(${ly_lib_static} PUBLIC ${JPEG_LIBRARY})
+  endif()
   add_definitions( -DHAVE_JPEG )
 endif()

@@ -91,10 +105,15 @@


 # install the conversion tool, .so, .a, and all the header files
-INSTALL ( PROGRAMS ${CMAKE_BINARY_DIR}/yuvconvert			DESTINATION bin )
-INSTALL ( TARGETS ${ly_lib_static}						DESTINATION lib )
-INSTALL ( TARGETS ${ly_lib_shared} LIBRARY				DESTINATION lib RUNTIME DESTINATION bin )
-INSTALL ( DIRECTORY ${PROJECT_SOURCE_DIR}/include/		DESTINATION include )
+INSTALL ( TARGETS yuvconvert DESTINATION tools )
+INSTALL ( FILES ${ly_include_files} DESTINATION include/libyuv )
+if (NOT BUILD_SHARED_LIBS)
+  INSTALL ( TARGETS ${ly_lib_static} EXPORT libyuv-targets DESTINATION lib INCLUDES DESTINATION include PUBLIC_HEADER DESTINATION include )
+else()
+  INSTALL ( TARGETS ${ly_lib_shared} EXPORT libyuv-targets LIBRARY DESTINATION lib RUNTIME DESTINATION bin )
+endif()
+
+INSTALL( EXPORT libyuv-targets DESTINATION share/cmake/libyuv/ EXPORT_LINK_INTERFACE_LIBRARIES )
 
 # create the .deb and .rpm packages using cpack
 INCLUDE ( CM_linux_packages.cmake )
