function(_qt5_parse_prl)
    cmake_parse_arguments(_qt_prl "" "CONFIGURATION;TARGET;PRL_FILE;LIB_FILE;OUT_DEPS;OUT_FLAGS" "" ${ARGN})
    if(NOT _qt_prl_CONFIGURATION)
         message(FATAL_ERROR "qt_parse_prl requires parameter CONFIGURATION")
    endif()
    if(NOT _qt_prl_TARGET)
         message(FATAL_ERROR "qt_parse_prl requires parameter TARGET")
    endif()
    if(NOT _qt_prl_PRL_FILE AND NOT _qt_prl_LIB_FILE)
         message(FATAL_ERROR "qt_parse_prl requires parameter PRL_FILE or LIB_FILE")
    endif()
    if(NOT _qt_prl_OUT_DEPS)
         message(FATAL_ERROR "qt_parse_prl requires parameter OUT_DEPS")
    endif()
    if(NOT _qt_prl_OUT_FLAGS)
         message(FATAL_ERROR "qt_parse_prl requires parameter OUT_FLAGS")
    endif()

    if(_qt_prl_LIB_FILE)
         set(_parsed_prl "${_qt_prl_LIB_FILE}")
         string(REGEX REPLACE "\.(lib|a)$" ".prl" _parsed_prl "${_parsed_prl}")
    else()
         set(_parsed_prl "${_qt_prl_PRL_FILE}")
    endif()

    message(STATUS "Reading file: ${_parsed_prl}")
    if(NOT EXISTS "${_parsed_prl}")
         message(FATAL_ERROR "Could not find PRL file: ${_parsed_prl}")
    endif()
    file(STRINGS "${_parsed_prl}" _static_depends REGEX "^QMAKE_PRL_LIBS[ \t]+=[ \t]+.+$")
    message(STATUS "QMAKE_PRL_LIBS as read : ${_static_depends}\n\n")
    string(REGEX REPLACE "QMAKE_PRL_LIBS[ \t]+=[ \t]+" "" _static_depends "${_static_depends}")
    string(REGEX REPLACE " -L\\$\\$([^ ]+)" [[ ;-L$$\1; ]] _static_depends "${_static_depends}") # - L Normal Case
    if(WIN32)
         string(REGEX REPLACE "-L\\\"([^\\\"]+)\\\"" " ;-L\"\\1\"; " _static_depends "${_static_depends}") # -L Tricky Case with spaces
         string(REGEX REPLACE [[\"?[A-Z]:\\\\Program Files( \(x86\))*\\\\Windows Kits\\\\[0-9]+\\\\lib\\\\[0-9|.]+\\\\um\\\\x64(\\\\|/)([^\"]+)\"?]] ";\\3;" _static_depends "${_static_depends}")
         # Every path with a space in it should be handled now!
    else()
         string(REGEX REPLACE " -l([^ ]+)" [[;-l\1;]] _static_depends "${_static_depends}") # - l case on targets other than windows
    endif()
    string(REGEX REPLACE "[\t ]+[^\\\"]([^( |\\\")]+)[^\\\"]([\t ]+|[\t ]*$)" ";\\0; " _static_depends "${_static_depends}")
    string(REGEX REPLACE "[\t ]*;[\t ]*" ";" _static_depends "${_static_depends}")      # remove unnecessary whitespaces 
    string(REGEX REPLACE "(;[\t ]*;)+" ";" _static_depends "${_static_depends}")    # remove empty elements from the list
    message(STATUS "QMAKE_PRL_LIBS as a list : ${_static_depends}\n\n")

    #Logic Backported from Qt 5.14
    if("${_qt_prl_CONFIGURATION}" STREQUAL "DEBUG")
        set(_prl_location "${_qt5Core_install_prefix}/debug/lib/${LIB_LOCATION}")
    else()
        set(_prl_location "${_qt5Core_install_prefix}/lib/${LIB_LOCATION}")
    endif()
    string(REPLACE "$$[QT_INSTALL_LIBS]/" "${_prl_location}" _static_depends "${_static_depends}")
    string(REGEX REPLACE "[ \t]+" ";" _standard_libraries "${CMAKE_CXX_STANDARD_LIBRARIES}")
    foreach(_flag IN LISTS _static_depends)
      if(_flag MATCHES "^-l(.*)$")
          # Handle normal libraries passed as -lfoo
          set(_lib "${CMAKE_MATCH_1}")
          foreach(_standard_library ${_standard_libraries})
              if(_standard_library MATCHES "^${_lib}(\.lib)?$")
                  set(_lib_is_default_linked TRUE)
                  break()
              endif()
          endforeach()
          if (_lib_is_default_linked)
              unset(_lib_is_default_linked)
          elseif(_lib MATCHES "^pthread$")
              find_package(Threads REQUIRED)
              list(APPEND _lib_deps Threads::Threads)
          else()
              if(_search_paths)
                  find_library(_Qt5Core_${Configuration}_${_lib}_PATH ${_lib} HINTS ${_search_paths} NO_DEFAULT_PATH)
              endif()
              find_library(_Qt5Core_${Configuration}_${_lib}_PATH ${_lib})
              mark_as_advanced(_Qt5Core_${Configuration}_${_lib}_PATH)
              if(_Qt5Core_${Configuration}_${_lib}_PATH)
                  list(APPEND _lib_deps
                      ${_Qt5Core_${Configuration}_${_lib}_PATH}
                  )
              else()
                  message(FATAL_ERROR "Library not found: ${_lib}")
              endif()
          endif()
      elseif(EXISTS "${_flag}")
          # The flag is an absolute path to an existing library
          list(APPEND _lib_deps "${_flag}")
      elseif(_flag MATCHES "^-L(.*)$")
          # Handle -Lfoo flags by putting their paths in the search path used by find_library above
          list(APPEND _search_paths "${CMAKE_MATCH_1}")
      elseif(_flag MATCHES "\\.(lib|a|so)$") #Library name only. No -l. Probably missing some cases
          #message(STATUS "Added to link deps (${Configuration}): ${_flag}")
          list(APPEND _lib_deps ${_flag}) # changed from _link_flags
      else()
          # Handle all remaining flags by simply passing them to the linker
          #message(STATUS "Added to link flags (${Configuration}): ${_flag}")
          list(APPEND _lib_flags ${_flag}) # changed from _link_flags
      endif()
    endforeach()
    
    message(STATUS "${_qt_prl_TARGET} links (via PRL ${_qt_prl_CONFIGURATION}): ${_lib_deps}")
    message(STATUS "${_qt_prl_TARGET} has linker flags (via PRL): ${_lib_flags}")
    #get_target_property(_test_interface ${_qt_prl_TARGET} INTERFACE_LINK_LIBRARIES)
    #message(STATUS "INTERFACE_LINK_LIBRARIES of target before ${_qt_prl_TARGET}: ${_test_interface} ")
    set(_prl_out_libs)
    foreach(_prl_lib IN LISTS _lib_deps)
        if("${_qt_prl_CONFIGURATION}" STREQUAL "DEBUG")
            #message(STATUS "DEBUG: ${_prl_lib}")
            #set_property(TARGET ${_qt_prl_TARGET} APPEND PROPERTY INTERFACE_LINK_LIBRARIES "\$<\$<CONFIG:DEBUG>:${_prl_lib}>")
            list(APPEND _prl_out_libs "\$<\$<CONFIG:DEBUG>:${_prl_lib}>")
        else()
            #message(STATUS "RELEASE: ${_prl_lib}")
            #set_property(TARGET ${_qt_prl_TARGET} APPEND PROPERTY INTERFACE_LINK_LIBRARIES "\$<\$<NOT:\$<CONFIG:DEBUG>>:${_prl_lib}>")
            list(APPEND _prl_out_libs "\$<\$<NOT:\$<CONFIG:DEBUG>>:${_prl_lib}>")
        endif()
    endforeach()
    set(${_qt_prl_OUT_DEPS} ${_prl_out_libs} PARENT_SCOPE)
    unset(_prl_lib)
    
    set(_prl_out_flags)
    foreach(_prl_flag IN LISTS _lib_flags)
        if("${_qt_prl_CONFIGURATION}" STREQUAL "DEBUG")
            #set_property(TARGET ${_qt_prl_TARGET} APPEND PROPERTY INTERFACE_LINK_LIBRARIES "\$<\$<CONFIG:DEBUG>:${_prl_flag}>")
            list(APPEND _prl_out_flags "\$<\$<CONFIG:DEBUG>:${_prl_flag}>")
        else()
            #set_property(TARGET ${_qt_prl_TARGET} APPEND PROPERTY INTERFACE_LINK_LIBRARIES "\$<\$<NOT:\$<CONFIG:DEBUG>>:${_prl_flag}>")
            list(APPEND _prl_out_flags "\$<\$<NOT:\$<CONFIG:DEBUG>>:${_prl_flag}>")
        endif()
    endforeach()
    set(${_qt_prl_OUT_FLAGS} ${_prl_out_flags} PARENT_SCOPE)
    unset(_prl_flag)
    
    #get_target_property(_test_interface ${_qt_prl_TARGET} INTERFACE_LINK_LIBRARIES)
    #message(STATUS "INTERFACE_LINK_LIBRARIES of target after ${_qt_prl_TARGET}: ${_test_interface} ")
endfunction()
#For testing; Run with cmake -P qt_parse_prl.cmake
set(prlfile "${CMAKE_CURRENT_LIST_DIR}/../../../installed/x64-windows-static/debug/lib/Qt5Cored.lib")
_qt5_parse_prl(CONFIGURATION "DEBUG" TARGET "Qt5::Qt5Core" LIB_FILE "${prlfile}" OUT_DEPS DEPS OUT_FLAGS FLAGS)
message(STATUS "DEPS: ${DEPS}")
message(STATUS "FLAGS: ${FLAGS}")