diff --git a/CMakeLists.txt b/CMakeLists.txt
index c4c8b3e..1ea9752 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,17 +2,21 @@ CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
 PROJECT(libgraphqlparser C CXX)
 
 SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")
+SET(CMAKE_PROGRAM_PATH "${VCPKG_DOWNLOADS_PYTHON2_DIR}" "${VCPKG_DOWNLOADS_FLEX_DIR}" "${VCPKG_DOWNLOADS_BISON_DIR}" "${CMAKE_PROGRAM_PATH}")
 
 INCLUDE(version)
 
-SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
-
 FIND_PACKAGE(PythonInterp 2 REQUIRED)
 IF (NOT PYTHON_VERSION_MAJOR EQUAL 2)
   MESSAGE(FATAL_ERROR "Python 2 is required.")
 ENDIF()
 
-FIND_PROGRAM(CTYPESGEN_FOUND ctypesgen.py)
+IF(UNIX)
+  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
+  SET(FLEX_COMPILE_FLAGS "--header-file=lexer.h")
+ELSEIF(WIN32)
+  SET(FLEX_COMPILE_FLAGS "--header-file=lexer.h --wincompat")
+ENDIF()
 
 FIND_PACKAGE(BISON 3)
 FIND_PACKAGE(FLEX)
@@ -21,7 +25,7 @@ IF (BISON_FOUND)
 ENDIF()
 
 IF(FLEX_FOUND)
-  FLEX_TARGET(GraphQLScanner lexer.lpp ${CMAKE_CURRENT_SOURCE_DIR}/lexer.cpp COMPILE_FLAGS "--header-file=lexer.h")
+  FLEX_TARGET(GraphQLScanner lexer.lpp ${CMAKE_CURRENT_SOURCE_DIR}/lexer.cpp COMPILE_FLAGS ${FLEX_COMPILE_FLAGS})
   IF (BISON_FOUND)
     ADD_FLEX_BISON_DEPENDENCY(GraphQLScanner graphqlparser)
   ENDIF()
@@ -31,7 +35,7 @@ FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/c)
 INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
 INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
 
-ADD_LIBRARY(graphqlparser SHARED
+SET(graphqlparserSources
   JsonVisitor.cpp
   ${CMAKE_CURRENT_BINARY_DIR}/Ast.h
   ${CMAKE_CURRENT_BINARY_DIR}/Ast.cpp
@@ -52,13 +56,11 @@ ADD_LIBRARY(graphqlparser SHARED
   lexer.h
   GraphQLParser.cpp)
 
-# Enable this and remove CMAKE_CXX_FLAGS fiddle above when we are able
-# to upgrade to CMake 2.8.12. Blocker seems to be Travis CI being on
-# Ubuntu Precise; Trusty has 2.8.12.
-# TARGET_COMPILE_OPTIONS(graphqlparser PUBLIC -std=gnu++11)
-
-ADD_EXECUTABLE(dump_json_ast dump_json_ast.cpp)
-TARGET_LINK_LIBRARIES(dump_json_ast graphqlparser)
+if (UNIX)
+  ADD_LIBRARY(graphqlparser SHARED ${graphqlparserSources})
+elseif (WIN32)
+  ADD_LIBRARY(graphqlparser STATIC ${graphqlparserSources})
+endif()
 
 FUNCTION(GENERATE_AST_FILE FILE_TYPE FILE_RELATIVE_PATH)
   ADD_CUSTOM_COMMAND(
@@ -83,49 +85,28 @@ GENERATE_AST_FILE(cxx_json_visitor_header JsonVisitor.h.inc)
 
 GENERATE_AST_FILE(cxx_json_visitor_impl JsonVisitor.cpp.inc)
 
-ADD_SUBDIRECTORY(python)
-
-OPTION(test "Build tests." OFF)
-
-INSTALL(DIRECTORY c ${CMAKE_CURRENT_BINARY_DIR}/c DESTINATION include/graphqlparser
-  FILES_MATCHING PATTERN "*.h"
-  PATTERN "build" EXCLUDE)
-
-INSTALL(FILES
-  ${CMAKE_CURRENT_BINARY_DIR}/Ast.h
-  AstNode.h
-  ${CMAKE_CURRENT_BINARY_DIR}/AstVisitor.h
-  GraphQLParser.h
-  JsonVisitor.h
-  lexer.h
-  location.hh
-  parser.tab.hpp
-  position.hh
-  stack.hh
-  syntaxdefs.h
-  DESTINATION include/graphqlparser)
-INSTALL(TARGETS graphqlparser
-  LIBRARY DESTINATION lib)
+IF (CMAKE_BUILD_TYPE STREQUAL "Release")
+  INSTALL(DIRECTORY c ${CMAKE_CURRENT_BINARY_DIR}/c DESTINATION include/graphqlparser
+    FILES_MATCHING PATTERN "*.h"
+    PATTERN "build" EXCLUDE)
+
+  INSTALL(FILES
+    ${CMAKE_CURRENT_BINARY_DIR}/Ast.h
+    AstNode.h
+    ${CMAKE_CURRENT_BINARY_DIR}/AstVisitor.h
+    GraphQLParser.h
+    JsonVisitor.h
+    lexer.h
+    location.hh
+    parser.tab.hpp
+    position.hh
+    stack.hh
+    syntaxdefs.h
+    DESTINATION include/graphqlparser)
+ENDIF()
 
 if (UNIX)
-  # generate pkgconfig file
-  include(FindPkgConfig QUIET)
-  if(PKG_CONFIG_FOUND)
-    # generate .pc and install
-    configure_file("libgraphqlparser.pc.in" "libgraphqlparser.pc" @ONLY)
-    install(FILES       "${CMAKE_CURRENT_BINARY_DIR}/libgraphqlparser.pc"
-            DESTINATION "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
-  endif()
+  INSTALL(TARGETS graphqlparser LIBRARY DESTINATION lib)
+elseif (WIN32)
+  INSTALL(TARGETS graphqlparser ARCHIVE DESTINATION lib)
 endif()
-
-IF (test)
-  ADD_SUBDIRECTORY(test)
-
-  if(UNIX)
-    # setup valgrind
-    ADD_CUSTOM_TARGET(memcheck
-      valgrind --leak-check=full --suppressions=./test/valgrind.supp --dsymutil=yes --error-exitcode=1 ./test/runTests  >/dev/null
-    )
-  endif()
-
-ENDIF()
