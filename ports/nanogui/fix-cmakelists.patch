diff --git a/CMakeLists.txt b/CMakeLists.txt
index 57f23a1..f5167c1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,12 +9,6 @@ if (POLICY CMP0068)
   cmake_policy(SET CMP0068 NEW) # RPATH settings on macOS don't affect install_name.
 endif()
 
-if (NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw/src")
-  message(FATAL_ERROR "The NanoGUI dependency repositories (GLFW, etc.) are missing! "
-    "You probably did not clone the project with --recursive. It is possible to recover "
-    "by calling \"git submodule update --init --recursive\"")
-endif()
-
 if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
   message(STATUS "Setting build type to 'Release' as none was specified.")
   set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
@@ -295,14 +289,11 @@ if (NANOGUI_BUILD_GLFW)
     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-deprecated-declarations")
   endif()
 
-  add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/ext/glfw"  "ext_build/glfw")
-
   # Two targets have now been defined: `glfw_objects`, which will be merged into
   # NanoGUI at the end, and `glfw`.  The `glfw` target is the library itself
   # (e.g., libglfw.so), but can be skipped as we do not need to link against it
   # (because we merge `glfw_objects` into NanoGUI).  Skipping is required for
   # XCode, but preferable for all build systems (reduces build artifacts).
-  set_target_properties(glfw PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)
 
   mark_as_advanced(
     GLFW_BUILD_DOCS GLFW_BUILD_EXAMPLES GLFW_BUILD_INSTALL GLFW_BUILD_TESTS
@@ -461,9 +452,6 @@ add_definitions(${NANOGUI_EXTRA_DEFS})
 
 # Compile main NanoGUI library
 add_library(nanogui-obj OBJECT
-  # Merge NanoVG into the NanoGUI library
-  ext/nanovg/src/nanovg.c
-  ext/nanovg/src/stb_image.h
   # Merge GLAD into the NanoGUI library (only if needed)
   ${LIBNANOGUI_EXTRA_SOURCE}
   # Fonts etc.
@@ -504,6 +492,9 @@ add_library(nanogui-obj OBJECT
   include/nanogui/nanogui.h
 )
 
+find_path(STB_INCLUDE_DIR stb_image.h)
+target_include_directories(nanogui-obj PRIVATE ${STB_INCLUDE_DIR})
+
 set(NANOGUI_LIB_CONTENTS $<TARGET_OBJECTS:nanogui-obj>)
 if (CMAKE_GENERATOR STREQUAL Xcode)
   # XCode has a serious bug where the XCode project produces an invalid target
@@ -517,12 +508,12 @@ if (CMAKE_GENERATOR STREQUAL Xcode)
   set(NANOGUI_LIB_CONTENTS ${NANOGUI_LIB_CONTENTS} ${CMAKE_CURRENT_BINARY_DIR}/xcode_dummy.cpp)
 endif()
 
-if (NANOGUI_BUILD_GLFW)
-  set(NANOGUI_LIB_CONTENTS ${NANOGUI_LIB_CONTENTS} $<TARGET_OBJECTS:glfw_objects>)
-endif()
-
 add_library(nanogui ${NANOGUI_LIBRARY_TYPE} ${NANOGUI_LIB_CONTENTS})
 
+find_package(nanovg CONFIG REQUIRED)
+find_package(glfw3 CONFIG REQUIRED)
+set(NANOGUI_EXTRA_LIBS ${NANOGUI_EXTRA_LIBS} glfw nanovg::nanovg)
+
 if (NANOGUI_BUILD_SHARED)
   set_property(TARGET nanogui-obj PROPERTY POSITION_INDEPENDENT_CODE ON)
 endif()
@@ -581,11 +572,11 @@ if (NANOGUI_BUILD_EXAMPLES)
   add_executable(example4      src/example4.cpp)
   add_executable(example_icons src/example_icons.cpp)
 
-  target_link_libraries(example1      nanogui)
-  target_link_libraries(example2      nanogui)
-  target_link_libraries(example3      nanogui ${opengl_library})
-  target_link_libraries(example4      nanogui)
-  target_link_libraries(example_icons nanogui)
+  target_link_libraries(example1      nanogui ${NANOGUI_EXTRA_LIBS})
+  target_link_libraries(example2      nanogui ${NANOGUI_EXTRA_LIBS})
+  target_link_libraries(example3      nanogui ${opengl_library} ${NANOGUI_EXTRA_LIBS})
+  target_link_libraries(example4      nanogui ${NANOGUI_EXTRA_LIBS})
+  target_link_libraries(example_icons nanogui ${NANOGUI_EXTRA_LIBS})
 
   # Copy icons for example application
   file(COPY resources/icons DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
