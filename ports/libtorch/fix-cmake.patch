diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0c11507..b47ebae 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -619,7 +619,7 @@ if(NOT CMAKE_BUILD_TYPE)
 endif()
 
 # The below means we are cross compiling for arm64 or x86_64 on MacOSX
-if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES MATCHES "^(x86_64|arm64)$")
+if(false)
   set(CROSS_COMPILING_MACOSX TRUE)
   # We need to compile a universal protoc to not fail protobuf build
   # We set CMAKE_TRY_COMPILE_TARGET_TYPE to STATIC_LIBRARY (vs executable) to succeed the cmake compiler check for cross-compiling
@@ -637,6 +637,13 @@ if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES M
   set(PROTOBUF_PROTOC_EXECUTABLE "${PROJECT_SOURCE_DIR}/build_host_protoc/bin/protoc")
   set(CAFFE2_CUSTOM_PROTOC_EXECUTABLE "${PROJECT_SOURCE_DIR}/build_host_protoc/bin/protoc")
 endif()
+find_package(protobuf CONFIG REQUIRED)
+find_program(PROTOBUF_PROTOC_EXECUTABLE
+    NAMES   protoc
+    PATHS   ${_VCPKG_INSTALLED_DIR}/${VCPKG_HOST_TRIPLET}/tools
+)
+set(CAFFE2_CUSTOM_PROTOC_EXECUTABLE ${PROTOBUF_PROTOC_EXECUTABLE})
+include(cmake/ProtoBuf.cmake)
 
 # ---[ Misc checks to cope with various compiler modes
 include(cmake/MiscCheck.cmake)
@@ -650,7 +657,7 @@ if(USE_FBGEMM AND ((CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" AND CMAKE_SIZEOF_VO
   set(USE_FBGEMM OFF)
 endif()
 
-include(cmake/Dependencies.cmake)
+include(cmake/vcpkg-dependencies.cmake) # we will import vcpkg ports instead of CAFFE2_THIRD_PARTY_ROOT
 
 if(USE_FBGEMM)
   string(APPEND CMAKE_CXX_FLAGS " -DUSE_FBGEMM")
diff --git a/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt b/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
index 3901f73..4954c3e 100644
--- a/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
+++ b/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
@@ -380,6 +380,7 @@ else()
   target_link_libraries(pytorch_qnnpack PUBLIC pthreadpool)
 endif()
 
+if(false) # use packages of vcpkg. see L433
 # ---[ Configure FXdiv
 if(NOT TARGET fxdiv AND NOT USE_SYSTEM_FXDIV)
   set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
@@ -428,6 +429,14 @@ elseif(NOT TARGET fp16 AND USE_SYSTEM_FP16)
   set_target_properties(fp16 PROPERTIES LINKER_LANGUAGE C)
 endif()
 target_link_libraries(pytorch_qnnpack PRIVATE fp16)
+endif()
+target_link_libraries(pytorch_qnnpack PRIVATE
+  unofficial::cpuinfo::clog unofficial::cpuinfo::cpuinfo
+  unofficial::pthreadpool
+)
+target_include_directories(pytorch_qnnpack PRIVATE
+  ${FP16_INCLUDE_DIRS} ${PSIMD_INCLUDE_DIRS} ${FXDIV_INCLUDE_DIRS}
+)
 
 install(TARGETS pytorch_qnnpack
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 26210cb..5f4618e 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -106,7 +106,7 @@ endif()
 # Note: the folders that are being commented out have not been properly
 # addressed yet.
 
-if(NOT MSVC AND USE_XNNPACK)
+if(false)
   if(NOT TARGET fxdiv)
     set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     set(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -798,6 +798,9 @@ if(HAVE_SOVERSION)
 endif()
 torch_compile_options(torch_cpu)  # see cmake/public/utils.cmake
 
+find_package(Eigen3 CONFIG REQUIRED)
+target_link_libraries(torch_cpu PRIVATE Eigen3::Eigen) # for caffe2 operators
+
 if(USE_PRECOMPILED_HEADERS)
   target_precompile_headers(torch_cpu PRIVATE
       "$<$<COMPILE_LANGUAGE:CXX>:ATen/ATen.h>")
@@ -990,7 +993,7 @@ if(USE_CUDA OR USE_ROCM)
   target_include_directories(${TORCHLIB_FLAVOR} PRIVATE "${CMAKE_BINARY_DIR}/include")
 endif()
 
-if(NOT MSVC AND USE_XNNPACK)
+if(false)
   TARGET_LINK_LIBRARIES(torch_cpu PRIVATE fxdiv)
 endif()
 
