diff --git a/CMakeLists.txt b/CMakeLists.txt
index 471fc8a..a2ebd26 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -681,7 +681,7 @@ if(NOT CMAKE_BUILD_TYPE)
 endif()
 
 # The below means we are cross compiling for arm64 or x86_64 on MacOSX
-if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES MATCHES "^(x86_64|arm64)$")
+if(false)
   set(CROSS_COMPILING_MACOSX TRUE)
   # We need to compile a universal protoc to not fail protobuf build
   # We set CMAKE_TRY_COMPILE_TARGET_TYPE to STATIC_LIBRARY (vs executable) to succeed the cmake compiler check for cross-compiling
@@ -699,6 +699,7 @@ if(NOT IOS AND CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND CMAKE_OSX_ARCHITECTURES M
   set(PROTOBUF_PROTOC_EXECUTABLE "${PROJECT_SOURCE_DIR}/build_host_protoc/bin/protoc")
   set(CAFFE2_CUSTOM_PROTOC_EXECUTABLE "${PROJECT_SOURCE_DIR}/build_host_protoc/bin/protoc")
 endif()
+include(cmake/ProtoBuf.cmake)
 
 # ---[ Misc checks to cope with various compiler modes
 include(cmake/MiscCheck.cmake)
@@ -714,7 +715,7 @@ endif()
 
 set(BUILD_ONEDNN_GRAPH OFF)
 
-include(cmake/Dependencies.cmake)
+include(cmake/vcpkg-dependencies.cmake)
 
 # Moved this cmake set option down here because CMAKE_CUDA_COMPILER_VERSION is not avaialble until now
 cmake_dependent_option(
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index b8f6582..4673637 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -113,7 +113,11 @@ endif()
 # Note: for now, we will put all export path into one single Caffe2Targets group
 # to deal with the cmake deployment need. Inside the Caffe2Targets set, the
 # individual libraries like libc10.so and libcaffe2.so are still self-contained.
-install(TARGETS c10 EXPORT Caffe2Targets DESTINATION lib)
+install(TARGETS c10 EXPORT Caffe2Targets
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
 install(DIRECTORY ${CMAKE_CURRENT_LIST_DIR}
         DESTINATION include
         FILES_MATCHING PATTERN "*.h")
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 221e3f3..09a56c5 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -107,13 +107,8 @@ endif()
 # addressed yet.
 
 if(NOT MSVC AND USE_XNNPACK)
-  if(NOT TARGET fxdiv)
-    set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
-    set(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
-    add_subdirectory(
-      "${FXDIV_SOURCE_DIR}"
-      "${CMAKE_BINARY_DIR}/FXdiv")
-  endif()
+  find_path(FXDIV_INCLUDE_DIRS "fxdiv.h" REQUIRED)
+  include_directories(${FXDIV_INCLUDE_DIRS})
 endif()
 
 add_subdirectory(core)
@@ -974,9 +969,6 @@ elseif(USE_CUDA)
   endif()
 endif()
 
-if(NOT MSVC AND USE_XNNPACK)
-  TARGET_LINK_LIBRARIES(torch_cpu PRIVATE fxdiv)
-endif()
 
 # ==========================================================
 # formerly-libtorch flags
@@ -1426,14 +1418,21 @@ endif()
 
 caffe2_interface_library(torch torch_library)
 
-install(TARGETS torch_cpu torch_cpu_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
-
+install(TARGETS torch_cpu torch_cpu_library EXPORT Caffe2Targets
+  RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+  LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+)
 if(USE_CUDA)
   install(TARGETS torch_cuda torch_cuda_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 elseif(USE_ROCM)
   install(TARGETS torch_hip torch_hip_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
 endif()
-install(TARGETS torch torch_library EXPORT Caffe2Targets DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+install(TARGETS torch torch_library EXPORT Caffe2Targets
+  RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+  LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+  ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+)
 
 target_link_libraries(torch PUBLIC torch_cpu_library)
 
@@ -1505,7 +1504,7 @@ target_link_libraries(torch_cpu PRIVATE flatbuffers)
 # namespaces, so libtorch is loaded with all its dependencies in a local scope.
 # That usually leads to missing symbol errors at run-time, so to avoid a situation like
 # this we have to preload those libs in a global namespace.
-if(BUILD_SHARED_LIBS)
+if(BUILD_SHARED_LIBS AND (NOT WIN32))
   add_library(torch_global_deps SHARED ${TORCH_SRC_DIR}/csrc/empty.c)
   if(HAVE_SOVERSION)
     set_target_properties(torch_global_deps PROPERTIES
@@ -1528,7 +1527,11 @@ if(BUILD_SHARED_LIBS)
     target_link_libraries(torch_global_deps TBB::tbb)
   endif()
 
-  install(TARGETS torch_global_deps DESTINATION "${TORCH_INSTALL_LIB_DIR}")
+  install(TARGETS torch_global_deps
+    RUNTIME DESTINATION "${TORCH_INSTALL_BIN_DIR}"
+    LIBRARY DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+    ARCHIVE DESTINATION "${TORCH_INSTALL_LIB_DIR}"
+  )
 endif()
 
 # ---[ Caffe2 HIP sources.
