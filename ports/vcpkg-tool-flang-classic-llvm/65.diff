diff --git a/clang/lib/Driver/ToolChains/ClassicFlang.cpp b/clang/lib/Driver/ToolChains/ClassicFlang.cpp
index b6ce5d9ac99d..a2003fc77f3d 100644
--- a/clang/lib/Driver/ToolChains/ClassicFlang.cpp
+++ b/clang/lib/Driver/ToolChains/ClassicFlang.cpp
@@ -1072,6 +1072,14 @@ void ClassicFlang::ConstructJob(Compilation &C, const JobAction &JA,
     LowerCmdArgs.push_back(Args.MakeArgString(OutFile));
   }
 
+  bool IsWindowsMSVC = getToolChain().getTriple().isWindowsMSVCEnvironment();
+  if (IsWindowsMSVC && !Args.hasArg(options::OPT_noFlangLibs)) {
+    getToolChain().AddFortranStdlibLibArgs(Args, LowerCmdArgs);
+    for (auto Arg : Args.filtered(options::OPT_noFlangLibs)) {
+      Arg->claim();
+    }
+  }
+
   C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::AtFileUTF8(), LowerExec, LowerCmdArgs, Inputs));
 }
 
diff --git a/clang/lib/Driver/ToolChains/CommonArgs.cpp b/clang/lib/Driver/ToolChains/CommonArgs.cpp
index 332a52ea92a1..2624c88b45be 100644
--- a/clang/lib/Driver/ToolChains/CommonArgs.cpp
+++ b/clang/lib/Driver/ToolChains/CommonArgs.cpp
@@ -118,7 +118,7 @@ static void renderRemarksHotnessOptions(const ArgList &Args,
 }
 
 /// \brief Determine if Fortran "main" object is needed
-static bool needFortranMain(const Driver &D, const ArgList &Args) {
+bool tools::needFortranMain(const Driver &D, const ArgList &Args) {
   return (needFortranLibs(D, Args)
        && (!Args.hasArg(options::OPT_Mnomain) ||
            !Args.hasArg(options::OPT_no_fortran_main)));
diff --git a/clang/lib/Driver/ToolChains/CommonArgs.h b/clang/lib/Driver/ToolChains/CommonArgs.h
index 624353edc1ab..6a5962a76505 100644
--- a/clang/lib/Driver/ToolChains/CommonArgs.h
+++ b/clang/lib/Driver/ToolChains/CommonArgs.h
@@ -22,6 +22,8 @@ namespace tools {
 
 bool needFortranLibs(const Driver &D, const llvm::opt::ArgList &Args);
 
+bool needFortranMain(const Driver &D, const llvm::opt::ArgList &Args);
+
 void addPathIfExists(const Driver &D, const Twine &Path,
                      ToolChain::path_list &Paths);
 
diff --git a/clang/lib/Driver/ToolChains/MSVC.cpp b/clang/lib/Driver/ToolChains/MSVC.cpp
index 13943b6c404a..f2348a13f7be 100644
--- a/clang/lib/Driver/ToolChains/MSVC.cpp
+++ b/clang/lib/Driver/ToolChains/MSVC.cpp
@@ -335,7 +335,10 @@ void visualstudio::Linker::ConstructJob(Compilation &C, const JobAction &JA,
 
   if (!Args.hasArg(options::OPT_nostdlib, options::OPT_nostartfiles) &&
       !C.getDriver().IsCLMode()) {
-    CmdArgs.push_back("-defaultlib:libcmt");
+#ifdef ENABLE_CLASSIC_FLANG
+    if (!C.getDriver().IsFlangMode())
+#endif
+      CmdArgs.push_back("-defaultlib:libcmt");
     CmdArgs.push_back("-defaultlib:oldnames");
   }
 
@@ -481,6 +484,13 @@ void visualstudio::Linker::ConstructJob(Compilation &C, const JobAction &JA,
     }
   }
 
+#ifdef ENABLE_CLASSIC_FLANG
+  if (C.getDriver().IsFlangMode()) {
+    CmdArgs.push_back(Args.MakeArgString(std::string("-libpath:") +
+                                         TC.getDriver().Dir + "/../lib"));
+  }
+#endif
+
   // Add compiler-rt lib in case if it was explicitly
   // specified as an argument for --rtlib option.
   if (!Args.hasArg(options::OPT_nostdlib)) {
@@ -825,6 +835,83 @@ void MSVCToolChain::AddHIPIncludeArgs(const ArgList &DriverArgs,
   RocmInstallation.AddHIPIncludeArgs(DriverArgs, CC1Args);
 }
 
+#ifdef ENABLE_CLASSIC_FLANG
+void MSVCToolChain::AddFortranStdlibLibArgs(const ArgList &Args,
+                                    ArgStringList &CmdArgs) const {
+ bool staticFlangLibs = false;
+ bool useOpenMP = false;
+
+  if (Args.hasArg(options::OPT_staticFlangLibs)) {
+    for (auto *A: Args.filtered(options::OPT_staticFlangLibs)) {
+      A->claim();
+      staticFlangLibs = true;
+    }
+  }
+
+  Arg *A = Args.getLastArg(options::OPT_mp, options::OPT_nomp,
+                           options::OPT_fopenmp, options::OPT_fno_openmp);
+  if (A &&
+      (A->getOption().matches(options::OPT_mp) ||
+       A->getOption().matches(options::OPT_fopenmp))) {
+      useOpenMP = true;
+  }
+
+  if (needFortranMain(getDriver(), Args)) {
+    // flangmain is always static
+    //CmdArgs.push_back("-linker");
+    //CmdArgs.push_back("/subsystem:console");
+    //CmdArgs.push_back("-linker");
+    //CmdArgs.push_back("/defaultlib:flangmain.lib");
+  }
+
+  if (staticFlangLibs) {
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:libflang.lib");
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:libflangrti.lib");
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:libpgmath.lib");
+  } else {
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:flang.lib");
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:flangrti.lib");
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:pgmath.lib");
+  }
+  if (useOpenMP) {
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/nodefaultlib:vcomp.lib");
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/nodefaultlib:vcompd.lib");
+    CmdArgs.push_back("-linker");
+    CmdArgs.push_back("/defaultlib:libomp.lib");
+  }
+  else {
+    if (staticFlangLibs) {
+      CmdArgs.push_back("-linker");
+      CmdArgs.push_back("/defaultlib:libompstub.lib");
+    } else {
+      CmdArgs.push_back("-linker");
+      CmdArgs.push_back("/defaultlib:ompstub.lib");
+    }
+  }
+
+  // Allways link Fortran executables with Pthreads
+  // CmdArgs.push_back("-lpthread");
+
+  // These options are added clang-cl in Clang.cpp for C/C++
+  // In clang-cl.exe -MD and -MT control these options, but in
+  // flang.exe like clang.exe these are different options for
+  // dependency tracking. Let's assume that if somebody needs
+  // static flang libs, they don't need static C runtime libs.
+  // FIXME: Use LLVM_USE_CRT_<CMAKE_BUILD_TYPE> variable
+  // to use libcmt.lib or msvcrt.lib
+  // CmdArgs.push_back("-linker");
+  // CmdArgs.push_back("/defaultlib:libcmt.lib");
+}
+#endif
+
 void MSVCToolChain::printVerboseInfo(raw_ostream &OS) const {
   CudaInstallation.print(OS);
   RocmInstallation.print(OS);
diff --git a/clang/lib/Driver/ToolChains/MSVC.h b/clang/lib/Driver/ToolChains/MSVC.h
index dba99ed77246..540094e5191b 100644
--- a/clang/lib/Driver/ToolChains/MSVC.h
+++ b/clang/lib/Driver/ToolChains/MSVC.h
@@ -126,6 +126,11 @@ class LLVM_LIBRARY_VISIBILITY MSVCToolChain : public ToolChain {
   void AddHIPIncludeArgs(const llvm::opt::ArgList &DriverArgs,
                          llvm::opt::ArgStringList &CC1Args) const override;
 
+#ifdef ENABLE_CLASSIC_FLANG
+  void AddFortranStdlibLibArgs(const llvm::opt::ArgList &Args,
+                               llvm::opt::ArgStringList &CmdArgs) const override;
+#endif
+
   bool getWindowsSDKLibraryPath(
       const llvm::opt::ArgList &Args, std::string &path) const;
   bool getUniversalCRTLibraryPath(const llvm::opt::ArgList &Args,
