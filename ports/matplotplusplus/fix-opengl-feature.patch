diff --git a/Matplot++Config.cmake.in b/Matplot++Config.cmake.in
index fc9ceca..49c5bd5 100644
--- a/Matplot++Config.cmake.in
+++ b/Matplot++Config.cmake.in
@@ -1,5 +1,6 @@
 @PACKAGE_INIT@
 
+include(CMakeFindDependencyMacro)
 # How this Matplot++ installation was built
 set(MATPLOT_BUILT_SHARED "@MATPLOTPP_BUILD_SHARED_LIBS@")
 set(MATPLOT_BUILT_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")
@@ -10,12 +11,14 @@ if (NOT CMAKE_CXX_COMPILER_ID STREQUAL MATPLOT_BUILT_CXX_COMPILER_ID)
     message(WARNING "This installation of Matplot++ was built with ${MATPLOT_BUILT_CXX_COMPILER_ID}.")
 endif()
 
+if (@MATPLOTPP_BUILD_EXPERIMENTAL_OPENGL_BACKEND@)
+  find_dependency(glad CONFIG)
+  find_dependency(glfw3 CONFIG)
+endif()
 # Find dependencies
 if(NOT ${MATPLOT_BUILT_SHARED})
-    include(CMakeFindDependencyMacro)
     list(APPEND CMAKE_MODULE_PATH ${MATPLOT_CONFIG_INSTALL_DIR})
     list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
-    find_dependency(Filesystem COMPONENTS Experimental Final)
     list(POP_BACK CMAKE_MODULE_PATH)
 endif()
 
diff --git a/source/matplot/CMakeLists.txt b/source/matplot/CMakeLists.txt
index fe9ad53..b95c536 100644
--- a/source/matplot/CMakeLists.txt
+++ b/source/matplot/CMakeLists.txt
@@ -1,5 +1,5 @@
 if(NOT MINGW)
-find_package(Filesystem REQUIRED COMPONENTS Experimental Final)
+  #find_package(Filesystem REQUIRED COMPONENTS Experimental Final)
 endif()
 
 #######################################################
@@ -104,7 +104,7 @@ target_include_directories(matplot
 # Dependencies
 if(NOT MINGW)
 target_link_libraries_system(matplot
-  PRIVATE cimg nodesoup std::filesystem)
+  PRIVATE cimg nodesoup)
 else()
 target_link_libraries_system(matplot
   PRIVATE cimg nodesoup)
@@ -134,7 +134,7 @@ maybe_target_pedantic_warnings(matplot)
 # Use experimental filesystem if std::filesystem is not available yet
 if(NOT MINGW)
     if (CXX_FILESYSTEM_IS_EXPERIMENTAL)
-      target_compile_definitions(matplot PRIVATE CXX_FILESYSTEM_IS_EXPERIMENTAL)
+      #target_compile_definitions(matplot PRIVATE CXX_FILESYSTEM_IS_EXPERIMENTAL)
     endif()
 endif()
 # Some hack to not depend on FILE* internals
@@ -214,40 +214,20 @@ if (MATPLOTPP_BUILD_EXPERIMENTAL_OPENGL_BACKEND)
     # The biggest con of the OpenGL backend is that it cannot open a window
     #     in another thread. All it can do is get in the middle of the render
     #     loop and draw the plot.
-    find_package(OpenGL REQUIRED)
+    #find_package(OpenGL REQUIRED)
 
     # https://github.com/Dav1dde/glad
-    find_package(GLAD QUIET)
-    if (NOT GLAD_FOUND AND NOT TARGET glad)
-        # Use CPM only if not found, to avoid ODR violations
-        # find_package(GLAD REQUIRE) would suffice if it worked well
-        FetchContent_Declare(glad GIT_REPOSITORY https://github.com/Dav1dde/glad.git GIT_TAG df8e9e16110b305479a875399cee13daa0ccadd9)
-        FetchContent_MakeAvailable(glad)
-    else ()
-        # FindGLAD does not usually create a target, so we create an interface target
-        if (NOT TARGET glad)
-            add_library(glad INTERFACE)
-            target_include_directories(glad INTERFACE ${GLAD_INCLUDE_PATH})
-            target_link_libraries(glad INTERFACE ${GLAD_LIBRARIES})
-        endif ()
-    endif ()
+    find_package(glad CONFIG REQUIRED)
 
     # https://github.com/glfw/glfw
-    find_package(glfw3 QUIET)
-    if (NOT GLFW3_FOUND AND NOT TARGET glfw)
-        # Use CPM only if not found, to avoid ODR violations
-        # find_package(glfw3 REQUIRE) would suffice if it worked well
-        FetchContent_Declare(glfw3 GIT_REPOSITORY https://github.com/glfw/glfw.git GIT_TAG 3.3.2)
-        FetchContent_MakeAvailable(glfw3)
-    endif ()
-
+    find_package(glfw3 CONFIG REQUIRED)
     add_library(matplot_opengl
             backend/opengl_embed.h
             backend/opengl_embed.cpp
             backend/opengl.h
             backend/opengl.cpp
             )
-    target_link_libraries(matplot_opengl PUBLIC matplot glad glfw ${CMAKE_DL_LIBS})
+    target_link_libraries(matplot_opengl PUBLIC matplot glad::glad glfw ${CMAKE_DL_LIBS})
 
     list(APPEND TARGETS matplot_opengl)
 endif()
