diff --git a/Matplot++Config.cmake.in b/Matplot++Config.cmake.in
index fc9ceca..c59cc1e 100644
--- a/Matplot++Config.cmake.in
+++ b/Matplot++Config.cmake.in
@@ -1,4 +1,5 @@
 @PACKAGE_INIT@
+include(CMakeFindDependencyMacro)
 
 # How this Matplot++ installation was built
 set(MATPLOT_BUILT_SHARED "@MATPLOTPP_BUILD_SHARED_LIBS@")
@@ -10,12 +11,44 @@ if (NOT CMAKE_CXX_COMPILER_ID STREQUAL MATPLOT_BUILT_CXX_COMPILER_ID)
     message(WARNING "This installation of Matplot++ was built with ${MATPLOT_BUILT_CXX_COMPILER_ID}.")
 endif()
 
+if (@MATPLOTPP_BUILD_EXPERIMENTAL_OPENGL_BACKEND@)
+  find_dependency(glad CONFIG)
+  find_dependency(glfw3 CONFIG)
+endif()
+find_dependency(nodesoup CONFIG )
+if (@WITH_JPEG@)
+find_dependency(JPEG)
+endif()
+
+if (@WITH_TIFF@)
+find_dependency(TIFF)
+endif()
+
+if (@WITH_ZLIB@)
+find_dependency(ZLIB)
+find_dependency(libpng CONFIG)
+endif()
+
+if (@WITH_LAPACK@)
+find_dependency(LAPACK)
+endif()
+
+if (@WITH_BLAS@)
+find_dependency(BLAS)
+endif()
+
+if (@WITH_FFTW3@)
+find_dependency(FFTW3 CONFIG)
+endif()
+
+if (@WITH_OPENCV@)
+find_dependency(OpenCV CONFIG)
+endif()
+
 # Find dependencies
 if(NOT ${MATPLOT_BUILT_SHARED})
-    include(CMakeFindDependencyMacro)
     list(APPEND CMAKE_MODULE_PATH ${MATPLOT_CONFIG_INSTALL_DIR})
     list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")
-    find_dependency(Filesystem COMPONENTS Experimental Final)
     list(POP_BACK CMAKE_MODULE_PATH)
 endif()
 
diff --git a/source/3rd_party/CMakeLists.txt b/source/3rd_party/CMakeLists.txt
index b5656e1..041ddd1 100644
--- a/source/3rd_party/CMakeLists.txt
+++ b/source/3rd_party/CMakeLists.txt
@@ -1,6 +1,7 @@
 #######################################################
 ### NodeSoup                                        ###
 #######################################################
+if(0)
 if(WITH_SYSTEM_NODESOUP)
   find_path(NODESOUP_INCLUDE_DIR nodesoup.hpp REQUIRED)
   find_library(NODESOUP_LIB nodesoup REQUIRED)
@@ -44,7 +45,10 @@ endif()
 if(MASTER_PROJECT AND NOT BUILD_SHARED_LIBS)
   install(TARGETS nodesoup
       EXPORT Matplot++Targets
-      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/Matplot++)
+      RUNTIME DESTINATION bin
+      LIBRARY DESTINATION lib
+      ARCHIVE DESTINATION lib)
+endif()
 endif()
 
 
@@ -69,57 +73,69 @@ find_package(PkgConfig)
 #            Lots of optional packages are not a good idea in general.
 #            It makes the library much less "packagable" (https://youtu.be/sBP17HQAQjk)
 #            and much more difficult to make sure it works on multiple OSs
-find_package(JPEG)
-if(JPEG_FOUND)
+
+if (WITH_JPEG)
+find_package(JPEG REQUIRED)
+if(1)
   target_compile_definitions(cimg INTERFACE cimg_use_jpeg)
   target_link_libraries(cimg INTERFACE ${JPEG_LIBRARIES})
   target_include_directories(cimg INTERFACE ${JPEG_INCLUDE_DIRS})
 endif()
+endif()
 
-find_package(TIFF)
-if(TIFF_FOUND)
+if (WITH_TIFF)
+find_package(TIFF REQUIRED)
+if(1)
   target_compile_definitions(cimg INTERFACE cimg_use_tiff)
   target_link_libraries(cimg INTERFACE ${TIFF_LIBRARIES})
   target_include_directories(cimg INTERFACE ${TIFF_INCLUDE_DIRS})
 endif()
+endif()
 
-find_package(ZLIB)
-if(ZLIB_FOUND)
-  find_package(PNG)
-  if (PNG_FOUND)
+if (WITH_ZLIB)
+find_package(ZLIB REQUIRED)
+if(1)
+  find_package(libpng CONFIG REQUIRED)
+  if (1)
     target_compile_definitions(cimg INTERFACE cimg_use_zlib cimg_use_png)
-    target_include_directories(cimg INTERFACE ${ZLIB_INCLUDE_DIRS} ${PNG_INCLUDE_DIRS})
-    target_link_libraries(cimg INTERFACE ${ZLIB_LIBRARIES} ${PNG_LIBRARIES})
+    target_link_libraries(cimg INTERFACE ZLIB::ZLIB png)
   endif ()
 endif()
+endif()
 
-find_package(LAPACK)
-if(LAPACK_FOUND)
+if (WITH_LAPACK)
+find_package(LAPACK REQUIRED)
+if(1)
   target_compile_definitions(cimg INTERFACE cimg_use_lapack)
   target_link_libraries(cimg INTERFACE ${LAPACK_LIBRARIES})
   target_include_directories(cimg INTERFACE ${LAPACK_INCLUDE_DIRS})
 endif()
+endif()
 
-find_package(BLAS)
-if(BLAS_FOUND)
+if (WITH_BLAS)
+find_package(BLAS REQUIRED)
+if(1)
   target_compile_definitions(cimg INTERFACE cimg_use_blas)
   target_link_libraries(cimg INTERFACE ${BLAS_LIBRARIES})
   target_include_directories(cimg INTERFACE ${BLAS_INCLUDE_DIRS})
 endif()
+endif()
 
-find_package(FFTW)
-if(FFTW_FOUND)
+if (WITH_FFTW3)
+find_package(FFTW3 CONFIG REQUIRED)
+if(1)
   target_compile_definitions(cimg INTERFACE cimg_use_fftw3)
-  target_link_libraries(cimg INTERFACE ${FFTW_LIBRARIES})
-  target_include_directories(cimg INTERFACE ${FFTW_INCLUDE_DIRS})
+  target_link_libraries(cimg INTERFACE FFTW3::fftw3)
+endif()
 endif()
 
 if (CMAKE_MODULE_PATH)
-  find_package(OpenCV QUIET)
-  if (OpenCV_FOUND)
+  if (WITH_OPENCV)
+  find_package(OpenCV CONFIG REQUIRED)
+  if (1)
     target_compile_definitions(cimg INTERFACE cimg_use_opencv)
-    target_link_libraries(cimg INTERFACE ${OpenCV_LIBRARIES})
-    target_include_directories(cimg INTERFACE ${OpenCV_INCLUDE_DIRS})
+    target_link_libraries(cimg INTERFACE opencv_core)
+  endif()
   endif()
 else()
   message("No CMAKE_MODULE_PATH path for OpenCV configured")
@@ -153,4 +169,4 @@ endif()
 if(MASTER_PROJECT AND NOT BUILD_SHARED_LIBS)
   install(TARGETS cimg
       EXPORT Matplot++Targets)
-endif()
\ No newline at end of file
+endif()
diff --git a/source/CMakeLists.txt b/source/CMakeLists.txt
index f66dbb4..cf7a6d2 100644
--- a/source/CMakeLists.txt
+++ b/source/CMakeLists.txt
@@ -1,2 +1,2 @@
 add_subdirectory(3rd_party)
-add_subdirectory(matplot)
\ No newline at end of file
+add_subdirectory(matplot)
diff --git a/source/matplot/CMakeLists.txt b/source/matplot/CMakeLists.txt
index fe9ad53..af3ef72 100644
--- a/source/matplot/CMakeLists.txt
+++ b/source/matplot/CMakeLists.txt
@@ -1,5 +1,4 @@
 if(NOT MINGW)
-find_package(Filesystem REQUIRED COMPONENTS Experimental Final)
 endif()
 
 #######################################################
@@ -102,12 +101,13 @@ target_include_directories(matplot
            $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)
 
 # Dependencies
+find_package(nodesoup CONFIG REQUIRED)
 if(NOT MINGW)
-target_link_libraries_system(matplot
-  PRIVATE cimg nodesoup std::filesystem)
+target_link_libraries(matplot
+  PRIVATE cimg nodesoup::nodesoup)
 else()
-target_link_libraries_system(matplot
-  PRIVATE cimg nodesoup)
+target_link_libraries(matplot
+  PRIVATE cimg nodesoup::nodesoup)
 endif()
 
 # Required compiler features required
@@ -134,7 +134,6 @@ maybe_target_pedantic_warnings(matplot)
 # Use experimental filesystem if std::filesystem is not available yet
 if(NOT MINGW)
     if (CXX_FILESYSTEM_IS_EXPERIMENTAL)
-      target_compile_definitions(matplot PRIVATE CXX_FILESYSTEM_IS_EXPERIMENTAL)
     endif()
 endif()
 # Some hack to not depend on FILE* internals
@@ -214,32 +213,12 @@ if (MATPLOTPP_BUILD_EXPERIMENTAL_OPENGL_BACKEND)
     # The biggest con of the OpenGL backend is that it cannot open a window
     #     in another thread. All it can do is get in the middle of the render
     #     loop and draw the plot.
-    find_package(OpenGL REQUIRED)
-
+    #
     # https://github.com/Dav1dde/glad
-    find_package(GLAD QUIET)
-    if (NOT GLAD_FOUND AND NOT TARGET glad)
-        # Use CPM only if not found, to avoid ODR violations
-        # find_package(GLAD REQUIRE) would suffice if it worked well
-        FetchContent_Declare(glad GIT_REPOSITORY https://github.com/Dav1dde/glad.git GIT_TAG df8e9e16110b305479a875399cee13daa0ccadd9)
-        FetchContent_MakeAvailable(glad)
-    else ()
-        # FindGLAD does not usually create a target, so we create an interface target
-        if (NOT TARGET glad)
-            add_library(glad INTERFACE)
-            target_include_directories(glad INTERFACE ${GLAD_INCLUDE_PATH})
-            target_link_libraries(glad INTERFACE ${GLAD_LIBRARIES})
-        endif ()
-    endif ()
+    find_package(glad CONFIG REQUIRED)
 
     # https://github.com/glfw/glfw
-    find_package(glfw3 QUIET)
-    if (NOT GLFW3_FOUND AND NOT TARGET glfw)
-        # Use CPM only if not found, to avoid ODR violations
-        # find_package(glfw3 REQUIRE) would suffice if it worked well
-        FetchContent_Declare(glfw3 GIT_REPOSITORY https://github.com/glfw/glfw.git GIT_TAG 3.3.2)
-        FetchContent_MakeAvailable(glfw3)
-    endif ()
+    find_package(glfw3 CONFIG REQUIRED)
 
     add_library(matplot_opengl
             backend/opengl_embed.h
@@ -247,7 +226,7 @@ if (MATPLOTPP_BUILD_EXPERIMENTAL_OPENGL_BACKEND)
             backend/opengl.h
             backend/opengl.cpp
             )
-    target_link_libraries(matplot_opengl PUBLIC matplot glad glfw ${CMAKE_DL_LIBS})
+    target_link_libraries(matplot_opengl PUBLIC matplot glad::glad glfw ${CMAKE_DL_LIBS})
 
     list(APPEND TARGETS matplot_opengl)
 endif()
diff --git a/source/matplot/axes_objects/network.cpp b/source/matplot/axes_objects/network.cpp
index b22b7b1..4633dc4 100644
--- a/source/matplot/axes_objects/network.cpp
+++ b/source/matplot/axes_objects/network.cpp
@@ -732,4 +732,4 @@ namespace matplot {
         return marker_colors_;
     }
 
-} // namespace matplot
\ No newline at end of file
+} // namespace matplot
