diff --git a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -32,15 +32,6 @@ CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
 ADD_DEFINITIONS("-D_CRT_SECURE_NO_DEPRECATE
                  -DALL_INTERIOR_POINTERS -DNO_EXECUTE_PERMISSION")
 
-#LIBATOMIC #TODO
-#ADD_LIBRARY(atomic_ops STATIC )
-#SET_TARGET_PROPERTIES(atomic_ops PROPERTIES COMPILE_FLAGS -DNO_DEBUGGING)
-
-
-#LIBGC
-
-INCLUDE_DIRECTORIES(include)
-INCLUDE_DIRECTORIES(libatomic_ops/src)
 
 SET(SRC alloc.c reclaim.c allchblk.c misc.c mach_dep.c os_dep.c
         mark_rts.c headers.c mark.c obj_map.c blacklst.c finalize.c
@@ -45,6 +45,12 @@ IF(enable_threads)
         INCLUDE_DIRECTORIES(${Threads_INCLUDE_DIR})
         SET(LIBS ${LIBS} ${Threads_LIBRARIES})
 ENDIF(enable_threads)
+
+OPTION(build_cord "Install cord" ON)
+
+OPTION(build_tests "Install library tests" ON)
+
+OPTION(install_headers "Install header files" ON)
 
 OPTION(enable_handle_fork "Attempt to ensure a usable collector after fork()" ON)
 
@@ -227,23 +227,50 @@ IF(enable_checksums)
   ENDIF()
   ADD_DEFINITIONS("-DCHECKSUMS")
   SET(SRC ${SRC} checksums.c)
 ENDIF(enable_checksums)

-ADD_LIBRARY(          gc-lib   STATIC      ${SRC})
-SET_TARGET_PROPERTIES(gc-lib   PROPERTIES
-                      COMPILE_DEFINITIONS GC_NOT_DLL)
-#TODO TARGET_LINK_LIBRARIES(...  ...  ${LIBS})
-
-ADD_LIBRARY(          gcmt-dll  SHARED     ${SRC})
+# Create target
+ADD_LIBRARY(gc ${SRC})
+TARGET_INCLUDE_DIRECTORIES(gc  
+    PUBLIC     
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+        $<INSTALL_INTERFACE:include>
+)
+IF(NOT BUILD_SHARED_LIBS)
+    TARGET_COMPILE_DEFINITIONS(gc PRIVATE GC_NOT_DLL)
+else()
+    TARGET_COMPILE_DEFINITIONS(gc PRIVATE GC_DLL)
+ENDIF()
+
+# Install library
+INSTALL(
+    TARGETS gc
+    EXPORT gcExports
+    LIBRARY DESTINATION lib 
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin 
+    INCLUDES DESTINATION include
+)
+
+# Install headers
+IF(install_headers)
+    FILE(GLOB BDWGC_HEADERS "include/*.h")
+    INSTALL(FILES ${BDWGC_HEADERS} DESTINATION include/gc)
+
+    FILE(GLOB BDWGC_EXTRA_HEADERS "include/extra/*.h")
+    INSTALL(FILES ${BDWGC_EXTRA_HEADERS} DESTINATION include)
+ENDIF()
 
-IF(WIN32)
+IF(WIN32 AND build_cord)
   ADD_EXECUTABLE(cord cord/cordbscs.c cord/cordxtra.c
                  cord/tests/de.c cord/tests/de_win.c)
   SET_TARGET_PROPERTIES(cord PROPERTIES WIN32_EXECUTABLE TRUE)
   SET_TARGET_PROPERTIES(cord    PROPERTIES
                       COMPILE_DEFINITIONS GC_NOT_DLL)
-  TARGET_LINK_LIBRARIES(cord gc-lib)
+  TARGET_LINK_LIBRARIES(cord gc)
   TARGET_LINK_LIBRARIES(cord gdi32)
 ENDIF(WIN32)
 
-ADD_SUBDIRECTORY(tests)
+IF(build_tests)
+  ADD_SUBDIRECTORY(tests)
+ENDIF()
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -14,8 +14,6 @@
 # modified is included with the above copyright notice.
 ##
 
-ADD_DEFINITIONS(-DGC_NOT_DLL)
-
 # Compile some tests as C++ to test extern "C" in header files.
 SET_SOURCE_FILES_PROPERTIES(
     leak_test.c
     test.c
     PROPERTIES LANGUAGE CXX)
 
 ADD_EXECUTABLE(gctest WIN32 test.c)
-TARGET_LINK_LIBRARIES(gctest gc-lib)
+TARGET_LINK_LIBRARIES(gctest PRIVATE gc)
 ADD_TEST(NAME gctest COMMAND gctest)
 
 ADD_EXECUTABLE(hugetest huge_test.c)
-TARGET_LINK_LIBRARIES(hugetest gc-lib)
+TARGET_LINK_LIBRARIES(hugetest PRIVATE gc)
 ADD_TEST(NAME hugetest COMMAND hugetest)
 
 ADD_EXECUTABLE(leaktest leak_test.c)
-TARGET_LINK_LIBRARIES(leaktest gc-lib)
+TARGET_LINK_LIBRARIES(leaktest PRIVATE gc)
 ADD_TEST(NAME leaktest COMMAND leaktest)
 
 ADD_EXECUTABLE(middletest middle.c)
-TARGET_LINK_LIBRARIES(middletest gc-lib)
+TARGET_LINK_LIBRARIES(middletest PRIVATE gc)
 ADD_TEST(NAME middletest COMMAND middletest)
 
 ADD_EXECUTABLE(realloc_test realloc_test.c)
-TARGET_LINK_LIBRARIES(realloc_test gc-lib)
+TARGET_LINK_LIBRARIES(realloc_test PRIVATE gc)
 ADD_TEST(NAME realloc_test COMMAND realloc_test)
 
 ADD_EXECUTABLE(smashtest smash_test.c)
-TARGET_LINK_LIBRARIES(smashtest gc-lib)
+TARGET_LINK_LIBRARIES(smashtest PRIVATE gc)
 ADD_TEST(NAME smashtest COMMAND smashtest)
 