diff --git a/include/boost/asio/experimental/impl/coro.hpp b/include/boost/asio/experimental/impl/coro.hpp
index 8042af5..ba21945 100644
--- a/include/boost/asio/experimental/impl/coro.hpp
+++ b/include/boost/asio/experimental/impl/coro.hpp
@@ -1070,17 +1070,17 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
       std::true_type /* error is noexcept */,
       std::true_type /* result is void */)  //noexcept
   {
-    return [this, the_coro = coro_,
+    return [this, coro_promise_ = coro_,
         h = std::forward<WaitHandler>(handler),
         exec = std::move(exec)]() mutable
     {
-      assert(the_coro);
+      assert(coro_promise_);
 
-      auto ch = detail::coroutine_handle<promise_type>::from_promise(*the_coro);
+      auto ch = detail::coroutine_handle<promise_type>::from_promise(*coro_promise_);
       assert(ch && !ch.done());
 
-      the_coro->awaited_from = post_coroutine(std::move(exec), std::move(h));
-      the_coro->reset_error();
+      coro_promise_->awaited_from = post_coroutine(std::move(exec), std::move(h));
+      coro_promise_->reset_error();
       ch.resume();
     };
   }
@@ -1091,18 +1091,18 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
       std::true_type /* error is noexcept */,
       std::false_type  /* result is void */)  //noexcept
   {
-    return [the_coro = coro_,
+    return [coro_promise_ = coro_,
         h = std::forward<WaitHandler>(handler),
         exec = std::move(exec)]() mutable
     {
-      assert(the_coro);
+      assert(coro_promise_);
 
-      auto ch = detail::coroutine_handle<promise_type>::from_promise(*the_coro);
+      auto ch = detail::coroutine_handle<promise_type>::from_promise(*coro_promise_);
       assert(ch && !ch.done());
 
-      the_coro->awaited_from = detail::post_coroutine(
-          exec, std::move(h), the_coro->result_).handle;
-      the_coro->reset_error();
+      coro_promise_->awaited_from = detail::post_coroutine(
+          exec, std::move(h), coro_promise_->result_).handle;
+      coro_promise_->reset_error();
       ch.resume();
     };
   }
@@ -1112,16 +1112,16 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
       std::false_type /* error is noexcept */,
       std::true_type /* result is void */)
   {
-    return [the_coro = coro_,
+    return [coro_promise_ = coro_,
         h = std::forward<WaitHandler>(handler),
         exec = std::move(exec)]() mutable
     {
-      if (!the_coro)
+      if (!coro_promise_)
         return boost::asio::post(exec,
             boost::asio::append(std::move(h),
               detail::coro_error<error_type>::invalid()));
 
-      auto ch = detail::coroutine_handle<promise_type>::from_promise(*the_coro);
+      auto ch = detail::coroutine_handle<promise_type>::from_promise(*coro_promise_);
       if (!ch)
         return boost::asio::post(exec,
             boost::asio::append(std::move(h),
@@ -1132,9 +1132,9 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
               detail::coro_error<error_type>::done()));
       else
       {
-        the_coro->awaited_from = detail::post_coroutine(
-            exec, std::move(h), the_coro->error_).handle;
-        the_coro->reset_error();
+        coro_promise_->awaited_from = detail::post_coroutine(
+            exec, std::move(h), coro_promise_->error_).handle;
+        coro_promise_->reset_error();
         ch.resume();
       }
     };
@@ -1145,17 +1145,17 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
       std::false_type /* error is noexcept */,
       std::false_type  /* result is void */)
   {
-    return [the_coro = coro_,
+    return [coro_promise_ = coro_,
         h = std::forward<WaitHandler>(handler),
         exec = std::move(exec)]() mutable
     {
-      if (!the_coro)
+      if (!coro_promise_)
         return boost::asio::post(exec,
             boost::asio::append(std::move(h),
               detail::coro_error<error_type>::invalid(), result_type{}));
 
       auto ch =
-        detail::coroutine_handle<promise_type>::from_promise(*the_coro);
+        detail::coroutine_handle<promise_type>::from_promise(*coro_promise_);
       if (!ch)
         return boost::asio::post(exec,
             boost::asio::append(std::move(h),
@@ -1166,9 +1166,9 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
               detail::coro_error<error_type>::done(), result_type{}));
       else
       {
-        the_coro->awaited_from = detail::post_coroutine(
-            exec, std::move(h), the_coro->error_, the_coro->result_).handle;
-        the_coro->reset_error();
+        coro_promise_->awaited_from = detail::post_coroutine(
+            exec, std::move(h), coro_promise_->error_, coro_promise_->result_).handle;
+        coro_promise_->reset_error();
         ch.resume();
       }
     };
@@ -1204,9 +1204,9 @@ struct coro<Yield, Return, Executor, Allocator>::initiate_async_resume
         [h = handle(exec, std::forward<WaitHandler>(handler),
             std::integral_constant<bool, is_noexcept>{},
             std::is_void<result_type>{}),
-            in = std::forward<Input>(input), the_coro = coro_]() mutable
+            in = std::forward<Input>(input), coro_promise_ = coro_]() mutable
         {
-          the_coro->input_ = std::move(in);
+          coro_promise_->input_ = std::move(in);
           std::move(h)();
         });
   }
