diff --git a/CMakeLists.txt b/CMakeLists.txt
index aaca07d2..cad59e32 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,6 +26,8 @@ set(CMAKE_INSTALL_INCLUDEDIR include/lib3mf CACHE PATH "directory for installing
 option(USE_INCLUDED_ZLIB "Use included zlib" ON)
 option(USE_INCLUDED_LIBZIP "Use included libzip" ON)
 option(USE_INCLUDED_SSL "Use included libressl" ON)
+option(USE_INCLUDED_BASE_64 "Use included cpp base 64 library" ON)
+option(USE_INCLUDED_FAST_FLOAT "Use included fast float library" ON)
 option(BUILD_FOR_CODECOVERAGE "Build for code coverage analysis" OFF)
 option(STRIP_BINARIES "Strip binaries (on non-apple)" ON)
 option(USE_PLATFORM_UUID "Use UUID geneator that is provided by the OS (always ON for Windows)" OFF)
@@ -116,13 +118,13 @@ add_library(${PROJECT_NAME} SHARED ${SRCS_COMMON} ${HDRS_COMMON}
 SOURCE_GROUP("Source Files\\Autogenerated" FILES ${ACT_GENERATED_SOURCE})
 
 
-file(GLOB
-    LIBS_INCLUDE
-    LIST_DIRECTORIES true
-    ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/*/Include
-)
-list(FILTER LIBS_INCLUDE EXCLUDE REGEX "zlib|libzip|libressl")
-target_include_directories(${PROJECT_NAME} PRIVATE ${LIBS_INCLUDE})
+#file(GLOB
+#    LIBS_INCLUDE
+#    LIST_DIRECTORIES true
+#    ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/*/Include
+#)
+#list(FILTER LIBS_INCLUDE EXCLUDE REGEX "zlib|libzip|libressl")
+#target_include_directories(${PROJECT_NAME} PRIVATE ${LIBS_INCLUDE})
 
 # allow FASTFLOAT_ALLOWS_LEADING_PLUS
 add_definitions(-DFASTFLOAT_ALLOWS_LEADING_PLUS=1)
@@ -170,20 +172,44 @@ if (USE_INCLUDED_LIBZIP)
     endif()
 
 else()
-    find_package(PkgConfig REQUIRED)
-    pkg_check_modules(LIBZIP REQUIRED libzip)
-    target_link_libraries(${PROJECT_NAME} ${LIBZIP_LIBRARIES})
+#    find_package(PkgConfig REQUIRED)
+    find_package(LIBZIP REQUIRED)
+    target_link_libraries(${PROJECT_NAME} PRIVATE libzip::zip)
 endif()
 
 
 if (USE_INCLUDED_ZLIB)
     target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/Libraries/zlib/Include)
 else()
-    find_package(PkgConfig REQUIRED)
-    pkg_check_modules(ZLIB REQUIRED zlib)
-    target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARIES})
+#    find_package(PkgConfig REQUIRED)
+    find_package(ZLIB REQUIRED)
+    if(CMAKE_TOOLCHAIN_FILE MATCHES "vcpkg")
+        target_include_directories(${PROJECT_NAME} PRIVATE ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/)
+    endif()
+    target_link_libraries(${PROJECT_NAME} PRIVATE ZLIB::ZLIB)
 endif()
 
+if (NOT USE_INCLUDED_BASE_64)
+    if(CMAKE_TOOLCHAIN_FILE MATCHES "vcpkg")
+        # Include the directory for header files
+        include_directories(${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/cpp-base64)
+        set(BASE64_SRC
+                ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/cpp-base64/base64.h
+                ${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/cpp-base64/base64.cpp)
+        message("BASE64_SRC" ${BASE64_SRC})
+        # Append BASE64_SRC to the target
+        target_sources(${PROJECT_NAME} PRIVATE ${BASE64_SRC})
+    endif ()
+endif ()
+
+if (NOT USE_INCLUDED_FAST_FLOAT)
+    if(CMAKE_TOOLCHAIN_FILE MATCHES "vcpkg")
+        # Include the directory for header files (since fast-float is header only)
+        include_directories(${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}/include/fast_float)
+    endif ()
+endif ()
+
+
 set_target_properties(${PROJECT_NAME} PROPERTIES PREFIX "" IMPORT_PREFIX "" )
 # This makes sure symbols are exported
 target_compile_options(${PROJECT_NAME} PRIVATE "-D__LIB3MF_EXPORTS")
diff --git a/Source/CMakeLists.txt b/Source/CMakeLists.txt
index 2d94b2c2..38b579f8 100644
--- a/Source/CMakeLists.txt
+++ b/Source/CMakeLists.txt
@@ -12,7 +12,9 @@ if (USE_INCLUDED_ZLIB)
   file(GLOB ZLIB_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "Libraries/zlib/Source/*.c")
 endif()
 
-file (GLOB CPPBASE64_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "Libraries/cpp-base64/Source/*.cpp")
+if(USE_INCLUDED_BASE_64)
+  file (GLOB CPPBASE64_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "Libraries/cpp-base64/Source/*.cpp")
+endif ()
 
 # sources
 set(SRCS_PLATFORM
