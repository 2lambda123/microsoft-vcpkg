diff --git a/src/libANGLE/renderer/d3d/RendererD3D.cpp b/src/libANGLE/renderer/d3d/RendererD3D.cpp
index 6b4e9a15c..fca2c2fd2 100644
--- a/src/libANGLE/renderer/d3d/RendererD3D.cpp
+++ b/src/libANGLE/renderer/d3d/RendererD3D.cpp
@@ -232,7 +232,6 @@ GLenum DefaultGLErrorCode(HRESULT hr)
 {
     switch (hr)
     {
-        case D3DERR_OUTOFVIDEOMEMORY:
         case E_OUTOFMEMORY:
             return GL_OUT_OF_MEMORY;
         default:
diff --git a/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp b/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
index 8936ec2f0..a6c3a86b2 100644
--- a/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
@@ -14,6 +14,7 @@
 
 #include "common/tls.h"
 #include "common/utilities.h"
+#include "common/debug.h"
 #include "libANGLE/Buffer.h"
 #include "libANGLE/Context.h"
 #include "libANGLE/Display.h"
@@ -754,7 +755,8 @@ egl::Error Renderer11::initializeD3DDevice()
         if (mCreateDebugDevice)
         {
             TRACE_EVENT0("gpu.angle", "D3D11CreateDevice (Debug)");
-            result = callD3D11CreateDevice(D3D11CreateDevice, true);
+
+			result = callD3D11CreateDevice(D3D11CreateDevice, true);
 
             if (result == E_INVALIDARG && mAvailableFeatureLevels.size() > 1u &&
                 mAvailableFeatureLevels[0] == D3D_FEATURE_LEVEL_11_1)
@@ -1189,10 +1191,12 @@ void Renderer11::generateDisplayExtensions(egl::DisplayExtensions *outExtensions
     outExtensions->robustResourceInitialization = true;
 
     // Compositor Native Window capabilies require WinVer >= 1803
-    if (CompositorNativeWindow11::IsSupportedWinRelease())
-    {
-        outExtensions->windowsUIComposition = true;
-    }
+
+#ifdef ANGLE_ENABLE_WINDOWS_STORE
+	outExtensions->windowsUIComposition = NativeWindow11WinRT::IsSupportedWin10Release();
+#else
+	outExtensions->windowsUIComposition = CompositorNativeWindow11::IsSupportedWinRelease();
+#endif
 }
 
 angle::Result Renderer11::flush(Context11 *context11)
@@ -1266,16 +1270,24 @@ NativeWindowD3D *Renderer11::createNativeWindow(EGLNativeWindowType window,
                                                 const egl::Config *config,
                                                 const egl::AttributeMap &attribs) const
 {
+#ifdef ANGLE_ENABLE_WINDOWS_STORE
+	auto useWinUiComp = window != nullptr && !NativeWindow11WinRT::IsValidNativeWindow(window);
+#else
     auto useWinUiComp = window != nullptr && !NativeWindow11Win32::IsValidNativeWindow(window);
+#endif
 
     if (useWinUiComp)
     {
-        return new CompositorNativeWindow11(window, config->alphaSize > 0);
+#ifdef ANGLE_ENABLE_WINDOWS_STORE
+		return new NativeWindow11WinRT(window, config->alphaSize > 0);
+#else
+		return new CompositorNativeWindow11(window, config->alphaSize > 0);
+#endif
     }
     else
     {
 #ifdef ANGLE_ENABLE_WINDOWS_STORE
-        UNUSED_VARIABLE(attribs);
+        ANGLE_UNUSED_VARIABLE(attribs);
         return new NativeWindow11WinRT(window, config->alphaSize > 0);
 #else
         return new NativeWindow11Win32(
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
index dd37ace87..8b4d51a69 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.cpp
@@ -141,6 +141,7 @@ HRESULT CoreWindowNativeWindow::createSwapChain(ID3D11Device *device,
                                                 unsigned int width,
                                                 unsigned int height,
                                                 bool containsAlpha,
+												unsigned int samples,
                                                 IDXGISwapChain1 **swapChain)
 {
     if (device == nullptr || factory == nullptr || swapChain == nullptr || width == 0 ||
@@ -154,7 +155,7 @@ HRESULT CoreWindowNativeWindow::createSwapChain(ID3D11Device *device,
     swapChainDesc.Height = height;
     swapChainDesc.Format = format;
     swapChainDesc.Stereo = FALSE;
-    swapChainDesc.SampleDesc.Count = 1;
+    swapChainDesc.SampleDesc.Count = samples;
     swapChainDesc.SampleDesc.Quality = 0;
     swapChainDesc.BufferUsage =
         DXGI_USAGE_SHADER_INPUT | DXGI_USAGE_RENDER_TARGET_OUTPUT | DXGI_USAGE_BACK_BUFFER;
@@ -208,9 +209,9 @@ HRESULT GetCoreWindowSizeInPixels(const ComPtr<ABI::Windows::UI::Core::ICoreWind
 
 static float GetLogicalDpi()
 {
-    ComPtr<ABI::Windows::Graphics::Display::IDisplayPropertiesStatics> displayProperties;
+    ComPtr<ABI::Windows::Graphics::Display::IDisplayInformation> displayProperties;
 
-    if (SUCCEEDED(GetActivationFactory(HStringReference(RuntimeClass_Windows_Graphics_Display_DisplayProperties).Get(), displayProperties.GetAddressOf())))
+    if (SUCCEEDED(GetActivationFactory(HStringReference(RuntimeClass_Windows_Graphics_Display_DisplayInformation).Get(), displayProperties.GetAddressOf())))
     {
         float dpi = 96.0f;
         if (SUCCEEDED(displayProperties->get_LogicalDpi(&dpi)))
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h
index d43bf0ba5..bbcf998a2 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h
@@ -33,6 +33,7 @@ class CoreWindowNativeWindow : public InspectableNativeWindow, public std::enabl
                             unsigned int width,
                             unsigned int height,
                             bool containsAlpha,
+						    unsigned int samples,
                             IDXGISwapChain1 **swapChain) override;
 
   protected:
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h b/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h
index 3e67269f3..a66935ce8 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h
@@ -53,6 +53,7 @@ class InspectableNativeWindow
                                     unsigned int width,
                                     unsigned int height,
                                     bool containsAlpha,
+		                            unsigned int samples,
                                     IDXGISwapChain1 **swapChain) = 0;
 
     bool getClientRect(RECT *rect)
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.cpp b/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.cpp
index 2ef2235c8..e8bc44a3c 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.cpp
@@ -13,6 +13,8 @@
 #include "libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h"
 #include "libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h"
 
+#include <windows.foundation.metadata.h>
+
 using namespace Microsoft::WRL;
 using namespace Microsoft::WRL::Wrappers;
 
@@ -89,6 +91,7 @@ HRESULT NativeWindow11WinRT::createSwapChain(ID3D11Device *device,
                                              DXGI_FORMAT format,
                                              UINT width,
                                              UINT height,
+										     UINT samples,
                                              IDXGISwapChain **swapChain)
 {
     if (mImpl)
@@ -96,7 +99,7 @@ HRESULT NativeWindow11WinRT::createSwapChain(ID3D11Device *device,
         IDXGIFactory2 *factory2     = d3d11::DynamicCastComObject<IDXGIFactory2>(factory);
         IDXGISwapChain1 *swapChain1 = nullptr;
         HRESULT result =
-            mImpl->createSwapChain(device, factory2, format, width, height, mHasAlpha, &swapChain1);
+            mImpl->createSwapChain(device, factory2, format, width, height, mHasAlpha, samples, &swapChain1);
         SafeRelease(factory2);
         *swapChain = static_cast<IDXGISwapChain *>(swapChain1);
         return result;
@@ -122,4 +125,44 @@ bool NativeWindow11WinRT::IsValidNativeWindow(EGLNativeWindowType window)
     return IsCoreWindow(window) || IsSwapChainPanel(window) || IsEGLConfiguredPropertySet(window);
 }
 
+bool NativeWindow11WinRT::IsSupportedWin10Release()
+{
+	HSTRING className, contractName;
+	HSTRING_HEADER classNameHeader, contractNameHeader;
+	boolean isSupported = false;
+
+	const wchar_t *str = static_cast<const wchar_t *>(RuntimeClass_Windows_Foundation_Metadata_ApiInformation);
+	unsigned int length;
+	SizeTToUInt32(::wcslen(str), &length);
+	HRESULT hr = WindowsCreateStringReference(RuntimeClass_Windows_Foundation_Metadata_ApiInformation, length, &classNameHeader, &className);
+
+	if (FAILED(hr))
+	{
+		return isSupported;
+	}
+
+	Microsoft::WRL::ComPtr<ABI::Windows::Foundation::Metadata::IApiInformationStatics> api;
+
+	hr = RoGetActivationFactory(className, __uuidof(ABI::Windows::Foundation::Metadata::IApiInformationStatics), &api);
+
+	if (FAILED(hr))
+	{
+		return isSupported;
+	}
+
+	str = static_cast<const wchar_t *>(L"Windows.Foundation.UniversalApiContract");
+	SizeTToUInt32(::wcslen(str), &length);
+	hr = WindowsCreateStringReference(L"Windows.Foundation.UniversalApiContract", length, &contractNameHeader,
+		&contractName);
+
+	if (FAILED(hr))
+	{
+		return isSupported;
+	}
+
+	api->IsApiContractPresentByMajor(contractName, 6, &isSupported);
+
+	return isSupported;
+}
+
 }  // namespace rx
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.h b/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.h
index 996fd3a10..9ada4c062 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.h
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/NativeWindow11WinRT.h
@@ -34,11 +34,13 @@ class NativeWindow11WinRT : public NativeWindow11
                             DXGI_FORMAT format,
                             UINT width,
                             UINT height,
+						    UINT samples,
                             IDXGISwapChain **swapChain) override;
 
     void commitChange() override;
 
     static bool IsValidNativeWindow(EGLNativeWindowType window);
+	static bool IsSupportedWin10Release();
 
   private:
     bool mHasAlpha;
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.cpp b/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.cpp
index c6d07fc88..89d9f8704 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.cpp
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.cpp
@@ -246,6 +246,7 @@ HRESULT SwapChainPanelNativeWindow::createSwapChain(ID3D11Device *device,
                                                     unsigned int width,
                                                     unsigned int height,
                                                     bool containsAlpha,
+													unsigned int samples,
                                                     IDXGISwapChain1 **swapChain)
 {
     if (device == nullptr || factory == nullptr || swapChain == nullptr || width == 0 ||
@@ -259,7 +260,7 @@ HRESULT SwapChainPanelNativeWindow::createSwapChain(ID3D11Device *device,
     swapChainDesc.Height = height;
     swapChainDesc.Format = format;
     swapChainDesc.Stereo = FALSE;
-    swapChainDesc.SampleDesc.Count = 1;
+    swapChainDesc.SampleDesc.Count = samples;
     swapChainDesc.SampleDesc.Quality = 0;
     swapChainDesc.BufferUsage =
         DXGI_USAGE_SHADER_INPUT | DXGI_USAGE_RENDER_TARGET_OUTPUT | DXGI_USAGE_BACK_BUFFER;
diff --git a/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h b/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h
index f9a2fc0e4..dc5c804ef 100644
--- a/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h
+++ b/src/libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h
@@ -27,6 +27,7 @@ class SwapChainPanelNativeWindow : public InspectableNativeWindow, public std::e
                             unsigned int width,
                             unsigned int height,
                             bool containsAlpha,
+						    unsigned int samples,
                             IDXGISwapChain1 **swapChain) override;
 
   protected:
