diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index acbde7f..aaa8a02 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -833,20 +833,19 @@ else()
   add_subdirectory(external/date EXCLUDE_FROM_ALL)
 endif()
 
-set(SAFEINT_INCLUDE_DIR ${REPO_ROOT}/cmake/external/SafeInt)
+find_path(SAFEINT_INCLUDE_DIR NAMES "SafeInt.hpp" PATHS_SUFFIXES include)
 add_library(safeint_interface INTERFACE)
 target_include_directories(safeint_interface INTERFACE ${SAFEINT_INCLUDE_DIR})
 
 if (onnxruntime_PREFER_SYSTEM_LIB)
-  find_package(boost_mp11)
+  find_package(Boost REQUIRED)
+  add_library(Boost::mp11 ALIAS Boost::boost)
 endif()
 if (NOT TARGET Boost::mp11)
   add_subdirectory(external/mp11 EXCLUDE_FROM_ALL)
 endif()
 
-set(JSON_BuildTests OFF CACHE INTERNAL "")
-set(JSON_Install OFF CACHE INTERNAL "")
-add_subdirectory(external/json EXCLUDE_FROM_ALL)
+find_package(nlohmann_json CONFIG REQUIRED)
 
 if (onnxruntime_PREFER_SYSTEM_LIB)
   find_package(re2)
@@ -894,6 +893,9 @@ endif()
 
 # TODO  do we have to add target_include_directories to each project that uses this?
 if (CPUINFO_SUPPORTED)
+  find_package(unofficial-cpuinfo CONFIG REQUIRED)
+  set(cpuinfo unofficial::cpuinfo::cpuinfo)
+  if (0)
   set(PYTORCH_CPUINFO_DIR external/pytorch_cpuinfo)
   set(PYTORCH_CPUINFO_INCLUDE_DIR ${PYTORCH_CPUINFO_DIR}/include)
   set(CPUINFO_BUILD_TOOLS OFF CACHE INTERNAL "")
@@ -911,6 +913,7 @@ if (CPUINFO_SUPPORTED)
   if (MSVC)
     target_compile_options(cpuinfo PRIVATE "-D_CRT_SECURE_NO_WARNINGS")
   endif()
+  endif()
 endif()
 
 # bounds checking behavior.
@@ -1388,12 +1391,14 @@ else()
   include(onnx_minimal)
 endif()
 
+if (0)
 target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
 if (NOT onnxruntime_USE_FULL_PROTOBUF)
   target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
 endif()
 set_target_properties(onnx PROPERTIES FOLDER "External/ONNX")
 set_target_properties(onnx_proto PROPERTIES FOLDER "External/ONNX")
+endif()
 
 
 # fix a warning in onnx code we can't do anything about
diff --git a/cmake/external/eigen.cmake b/cmake/external/eigen.cmake
index 264247a..f5908ab 100644
--- a/cmake/external/eigen.cmake
+++ b/cmake/external/eigen.cmake
@@ -1,9 +1,8 @@
 include (ExternalProject)
 
 if (onnxruntime_USE_PREINSTALLED_EIGEN)
-    add_library(eigen INTERFACE)
-    file(TO_CMAKE_PATH ${eigen_SOURCE_PATH} eigen_INCLUDE_DIRS)
-    target_include_directories(eigen INTERFACE ${eigen_INCLUDE_DIRS})
+    find_package(Eigen3 CONFIG REQUIRED)
+    add_library(eigen ALIAS Eigen3::Eigen)
 else ()
     if (onnxruntime_USE_ACL)
         execute_process(COMMAND  git apply --ignore-space-change --ignore-whitespace ${PROJECT_SOURCE_DIR}/patches/eigen/Fix_Eigen_Build_Break.patch WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})
diff --git a/cmake/external/onnx_minimal.cmake b/cmake/external/onnx_minimal.cmake
index 33df1f5..13a0b3a 100644
--- a/cmake/external/onnx_minimal.cmake
+++ b/cmake/external/onnx_minimal.cmake
@@ -12,6 +12,9 @@ endif()
 
 #TODO: if protobuf is a shared lib and onnxruntime_USE_FULL_PROTOBUF is ON, then onnx_proto should be built as a shared lib instead of a static lib. Otherwise any code outside onnxruntime.dll can't use onnx protobuf definitions if they share the protobuf.dll with onnxruntime. For example, if protobuf is a shared lib and onnx_proto is a static lib then onnxruntime_perf_test won't work.
 
+find_package(ONNX CONFIG REQUIRED)
+
+if (0)
 set(ONNX_SOURCE_ROOT ${PROJECT_SOURCE_DIR}/external/onnx)
 
 add_library(onnx_proto ${ONNX_SOURCE_ROOT}/onnx/onnx-ml.proto ${ONNX_SOURCE_ROOT}/onnx/onnx-operators-ml.proto ${ONNX_SOURCE_ROOT}/onnx/onnx-data.proto)
@@ -93,4 +96,5 @@ else()
     target_compile_options(onnx PRIVATE "-Wno-unused-but-set-variable")
   endif()
 endif()
+endif()
 
diff --git a/cmake/wil.cmake b/cmake/wil.cmake
index 36a8bc9..0126a69 100644
--- a/cmake/wil.cmake
+++ b/cmake/wil.cmake
@@ -1,5 +1,5 @@
 # Copyright (c) Microsoft Corporation. All rights reserved.
 # Licensed under the MIT License.
 
-add_library(wil INTERFACE)
-target_include_directories(wil INTERFACE external/wil/include/)
\ No newline at end of file
+find_package(wil CONFIG REQUIRED)
+add_library(wil ALIAS WIL::WIL)
\ No newline at end of file
diff --git a/onnxruntime/core/common/safeint.h b/onnxruntime/core/common/safeint.h
index 263e936..3ee70f3 100644
--- a/onnxruntime/core/common/safeint.h
+++ b/onnxruntime/core/common/safeint.h
@@ -32,7 +32,7 @@ class SafeIntExceptionHandler<onnxruntime::OnnxRuntimeException> {
 #pragma GCC diagnostic ignored "-Wunused-but-set-parameter"
 #endif
 #endif
-#include "safeint/SafeInt.hpp"
+#include "SafeInt.hpp"
 #if defined(__GNUC__)
 #pragma GCC diagnostic pop
 #endif
