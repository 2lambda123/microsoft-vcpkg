diff --git a/CMakeLists.txt b/CMakeLists.txt
index 923dd670..a0a28311 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -8,7 +8,7 @@
 
 cmake_minimum_required(VERSION 3.10)
 
-project("json_link"
+project("json-link"
         VERSION "2.9.6"
         DESCRIPTION "Static JSON parsing in C++"
         HOMEPAGE_URL "https://github.com/beached/daw_json_link"
@@ -18,12 +18,11 @@ set(CMAKE_CXX_STANDARD 17 CACHE STRING "The C++ standard whose features are requ
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
 
-add_subdirectory(extern)
 option(DAW_ENABLE_TESTING "Build unit tests" OFF)
 
 include(GNUInstallDirs)
 set(json_link_INSTALL_CMAKEDIR
-        "${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake"
+        "lib/cmake/daw-${PROJECT_NAME}"
         CACHE STRING
         "The install directory to use for CMake package config files")
 
@@ -83,25 +82,26 @@ install(TARGETS ${PROJECT_NAME}
 include(CMakePackageConfigHelpers)
 
 configure_package_config_file(
-        "${PROJECT_SOURCE_DIR}/cmake/daw_${PROJECT_NAME}Config.cmake.in"
-        "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+        "${PROJECT_SOURCE_DIR}/cmake/daw-${PROJECT_NAME}Config.cmake.in"
+        "${PROJECT_BINARY_DIR}/daw-${PROJECT_NAME}Config.cmake"
         INSTALL_DESTINATION
         ${json_link_INSTALL_CMAKEDIR})
 
-write_basic_package_version_file("${PROJECT_NAME}ConfigVersion.cmake"
+write_basic_package_version_file("daw-${PROJECT_NAME}ConfigVersion.cmake"
         VERSION ${PROJECT_VERSION}
         COMPATIBILITY SameMajorVersion)
 
 install(EXPORT ${PROJECT_NAME}_Targets
-        FILE ${PROJECT_NAME}Targets.cmake
+        FILE daw-${PROJECT_NAME}Targets.cmake
         NAMESPACE daw::
         DESTINATION ${json_link_INSTALL_CMAKEDIR})
 
-install(FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
-        "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
-        DESTINATION ${json_link_INSTALL_CMAKEDIR}$)
+install(FILES "${PROJECT_BINARY_DIR}/daw-${PROJECT_NAME}Config.cmake"
+        "${PROJECT_BINARY_DIR}/daw-${PROJECT_NAME}ConfigVersion.cmake"
+        DESTINATION ${json_link_INSTALL_CMAKEDIR})
 
-install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/ DESTINATION include/)
+install( DIRECTORY ${PROJECT_SOURCE_DIR}/include/daw DESTINATION include )
+install( DIRECTORY ${PROJECT_SOURCE_DIR}/include/third_party DESTINATION include/daw )
 
 if (DAW_ENABLE_TESTING)
     enable_testing()
diff --git a/include/daw/json/impl/daw_json_to_string.h b/include/daw/json/impl/daw_json_to_string.h
index a848c6f7..9e37e161 100644
--- a/include/daw/json/impl/daw_json_to_string.h
+++ b/include/daw/json/impl/daw_json_to_string.h
@@ -17,14 +17,14 @@
 #include <daw/daw_bounded_vector.h>
 #include <daw/daw_move.h>
 #include <daw/daw_traits.h>
-#include <utf8/unchecked.h>
+#include <daw/utf8/unchecked.h>
 
 #include <ciso646>
 #include <optional>
 #include <sstream>
 #include <string>
 #ifndef DAW_JSON_CUSTOM_D2S
-#include <third_party/dragonbox/dragonbox.h>
+#include <daw/third_party/dragonbox/dragonbox.h>
 #elif __has_include( "custom_d2s.h" )
 #include "custom_d2s.h"
 #else
@@ -247,7 +247,7 @@ namespace daw::json::utils {
 	copy_to_iterator( OutputIterator it, Container const &container ) {
 		if constexpr( do_escape ) {
 			using iter = daw::remove_cvref_t<decltype( std::begin( container ) )>;
-			using it_t = utf8::unchecked::iterator<iter>;
+			using it_t = daw::utf8::unchecked::iterator<iter>;
 			auto first = it_t( std::begin( container ) );
 			auto const last = it_t( std::end( container ) );
 			while( first != last ) {
@@ -328,7 +328,7 @@ namespace daw::json::utils {
 		}
 		if constexpr( do_escape ) {
 
-			auto chr_it = utf8::unchecked::iterator<char const *>( ptr );
+			auto chr_it = daw::utf8::unchecked::iterator<char const *>( ptr );
 			while( *chr_it.base( ) != '\0' ) {
 				auto const cp = *chr_it++;
 				switch( cp ) {
diff --git a/cmake/daw_json_linkConfig.cmake.in b/cmake/daw-json-linkConfig.cmake.in
rename from cmake/daw_json_linkConfig.cmake.in
rename to cmake/daw-json-linkConfig.cmake.in
