diff --git a/cmake/build_external.cmake b/cmake/build_external.cmake
index b420119..07868bb 100644
--- a/cmake/build_external.cmake
+++ b/cmake/build_external.cmake
@@ -23,6 +23,11 @@ if(BUILD_CURL OR BUILD_OPENSSL OR BUILD_ZLIB)
         #zlib
         #based on http://stackoverflow.com/questions/16842218/how-to-use-cmake-externalproject-add-or-alternatives-in-a-cross-platform-way
         #likely, some of the things here are unnecessary
+        if (VCPKG_CHAINLOAD_TOOLCHAIN_FILE)
+            set(EXTRA_ARGS "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${VCPKG_CHAINLOAD_TOOLCHAIN_FILE}"
+                    "-DVCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}")
+        endif()
+
         ExternalProject_Add(ZLIB
             SOURCE_DIR ${ZLIB_SOURCE_DIR}
             URL https://sdk.amazonaws.com/cpp/builds/zlib-1.2.11.tar.gz
@@ -31,6 +36,7 @@ if(BUILD_CURL OR BUILD_OPENSSL OR BUILD_ZLIB)
             CMAKE_ARGS
             -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
             -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=${CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION}
+            ${EXTRA_ARGS}
             -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
             -DANDROID_ABI=${ANDROID_ABI}
             -DANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN}
@@ -69,6 +75,11 @@ if(BUILD_CURL OR BUILD_OPENSSL OR BUILD_ZLIB)
 
         set(OPENSSL_INCLUDE_FLAGS "-isystem ${OPENSSL_INCLUDE_DIR} -isystem ${OPENSSL_INCLUDE_DIR}/openssl" CACHE INTERNAL "compiler flags to find openssl includes")
         set(OPENSSL_LINKER_FLAGS "-L${OPENSSL_LIBRARY_DIR}" CACHE INTERNAL "linker flags to find openssl")
+        
+        if (VCPKG_CHAINLOAD_TOOLCHAIN_FILE)
+            set(EXTRA_ARGS "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${VCPKG_CHAINLOAD_TOOLCHAIN_FILE}"
+                    "-DVCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}")
+        endif()
 
         ExternalProject_Add(OPENSSL
             SOURCE_DIR ${OPENSSL_SOURCE_DIR}
@@ -82,6 +93,7 @@ if(BUILD_CURL OR BUILD_OPENSSL OR BUILD_ZLIB)
             -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
             -DANDROID_ABI=${ANDROID_ABI}
             -DANDROID_TOOLCHAIN=${ANDROID_TOOLCHAIN}
+            ${EXTRA_ARGS}
             -DANDROID_STL=${ANDROID_STL}
             -DCMAKE_INSTALL_PREFIX=${OPENSSL_INSTALL_DIR}
             -DCMAKE_CXX_FLAGS=${OPENSSL_CXX_FLAGS}
@@ -120,6 +132,11 @@ if(BUILD_CURL OR BUILD_OPENSSL OR BUILD_ZLIB)
             set(CURL_USE_ZLIB "OFF")
         endif()
 
+        if (VCPKG_CHAINLOAD_TOOLCHAIN_FILE)
+            set(EXTRA_ARGS "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${VCPKG_CHAINLOAD_TOOLCHAIN_FILE}"
+                    "-DVCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}")
+        endif()
+
         ExternalProject_Add(CURL
                 DEPENDS ${CURL_OPENSSL_DEPENDENCY} ${CURL_ZLIB_DEPENDENCY}
                 SOURCE_DIR ${CURL_SOURCE_DIR}
@@ -130,6 +147,7 @@ if(BUILD_CURL OR BUILD_OPENSSL OR BUILD_ZLIB)
                 CMAKE_ARGS
                 -C ${AWS_NATIVE_SDK_ROOT}/android-build/CurlAndroidCrossCompile.cmake
                 -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
+                ${EXTRA_ARGS}
                 -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=${CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION}
                 -DANDROID_NATIVE_API_LEVEL=${ANDROID_NATIVE_API_LEVEL}
                 -DANDROID_ABI=${ANDROID_ABI}
