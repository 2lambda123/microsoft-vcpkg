diff --git cmake/OpenCVFindLibsVideo.cmake cmake/OpenCVFindLibsVideo.cmake
index f7b427b..18ecc5f 100644
--- a/cmake/OpenCVFindLibsVideo.cmake
+++ b/cmake/OpenCVFindLibsVideo.cmake
@@ -1,6 +1,7 @@
 # ----------------------------------------------------------------------------
 #  Detect 3rd-party video IO libraries
 # ----------------------------------------------------------------------------
+SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_LIST_DIR}")

 ocv_clear_vars(HAVE_VFW)
 if(WITH_VFW)
@@ -15,7 +16,6 @@ ocv_clear_vars(HAVE_GSTREAMER)
 # try to find gstreamer 1.x first if 0.10 was not requested
 if(WITH_GSTREAMER AND NOT WITH_GSTREAMER_0_10)
   if(WIN32)
-    SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_CURRENT_LIST_DIR}")
     FIND_PACKAGE(GstreamerWindows)
     IF(GSTREAMER_gstbase_LIBRARY AND GSTREAMER_gstvideo_LIBRARY AND GSTREAMER_gstapp_LIBRARY AND GSTREAMER_gstpbutils_LIBRARY AND GSTREAMER_gstriff_LIBRARY)
       set(HAVE_GSTREAMER TRUE)
@@ -213,38 +213,29 @@ endif(WITH_XIMEA)
 # --- FFMPEG ---
 ocv_clear_vars(HAVE_FFMPEG)
 if(WITH_FFMPEG)
-  if(WIN32 AND NOT ARM)
-    include("${OpenCV_SOURCE_DIR}/3rdparty/ffmpeg/ffmpeg.cmake")
-    download_win_ffmpeg(FFMPEG_CMAKE_SCRIPT)
-    if(FFMPEG_CMAKE_SCRIPT)
-      set(HAVE_FFMPEG TRUE)
-      include("${FFMPEG_CMAKE_SCRIPT}")
-    endif()
-  elseif(PKG_CONFIG_FOUND)
+  if(PKG_CONFIG_FOUND)
     ocv_check_modules(FFMPEG libavcodec libavformat libavutil libswscale)
     ocv_check_modules(FFMPEG_libavresample libavresample)
-    if(FFMPEG_libavresample_FOUND)
-      ocv_append_build_options(FFMPEG FFMPEG_libavresample)
-    endif()
-    if(HAVE_FFMPEG)
-      try_compile(__VALID_FFMPEG
-          "${OpenCV_BINARY_DIR}"
-          "${OpenCV_SOURCE_DIR}/cmake/checks/ffmpeg_test.cpp"
-          CMAKE_FLAGS "-DINCLUDE_DIRECTORIES:STRING=${FFMPEG_INCLUDE_DIRS}"
-                      "-DLINK_DIRECTORIES:STRING=${FFMPEG_LIBRARY_DIRS}"
-                      "-DLINK_LIBRARIES:STRING=${FFMPEG_LIBRARIES}"
-          OUTPUT_VARIABLE TRY_OUT
-      )
-      if(NOT __VALID_FFMPEG)
-        #message(FATAL_ERROR "FFMPEG: test check build log:\n${TRY_OUT}")
-        message(STATUS "WARNING: Can't build ffmpeg test code")
-        set(HAVE_FFMPEG FALSE)
-      else()
-        ocv_append_build_options(VIDEOIO FFMPEG)
-      endif()
-    endif()
   else()
-    message(STATUS "Can't find ffmpeg - 'pkg-config' utility is missing")
+    find_package(FFMPEG REQUIRED)
+  endif()
+  if(FFMPEG_libavresample_FOUND)
+    ocv_append_build_options(FFMPEG FFMPEG_libavresample)
+  endif()
+  try_compile(__VALID_FFMPEG
+      "${OpenCV_BINARY_DIR}"
+      "${OpenCV_SOURCE_DIR}/cmake/checks/ffmpeg_test.cpp"
+      CMAKE_FLAGS "-DINCLUDE_DIRECTORIES:STRING=${FFMPEG_INCLUDE_DIRS}"
+                  "-DLINK_DIRECTORIES:STRING=${FFMPEG_LIBRARY_DIRS}"
+                  "-DLINK_LIBRARIES:STRING=${FFMPEG_LIBRARIES}"
+      OUTPUT_VARIABLE TRY_OUT
+  )
+  if(NOT __VALID_FFMPEG)
+    #message(FATAL_ERROR "FFMPEG: test check build log:\n${TRY_OUT}")
+    message(STATUS "WARNING: Can't build ffmpeg test code")
+    set(HAVE_FFMPEG FALSE)
+  else()
+    ocv_append_build_options(VIDEOIO FFMPEG)
   endif()
 endif(WITH_FFMPEG)

