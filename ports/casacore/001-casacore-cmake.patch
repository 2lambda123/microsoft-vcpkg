diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7e48b3ff2..c9dffbb61 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -353,6 +353,7 @@ if (_uselapack STREQUAL YES)
 endif (_uselapack STREQUAL YES)
 if (_usefits STREQUAL YES)
     find_package (CFITSIO 3.030 REQUIRED) # Should pad to three decimal digits
+    find_package(ZLIB REQUIRED)
 endif (_usefits STREQUAL YES)
 if (_usewcs STREQUAL YES)
 #    find_package (WCSLIB 4.20 REQUIRED)
@@ -376,6 +377,9 @@ if (CFITSIO_FOUND)
     include_directories (${CFITSIO_INCLUDE_DIRS})
     add_definitions (-DCFITSIO_VERSION_MAJOR=${CFITSIO_VERSION_MAJOR} -DCFITSIO_VERSION_MINOR=${CFITSIO_VERSION_MINOR})
 endif (CFITSIO_FOUND)
+if (ZLIB_FOUND)
+    include_directories (${ZLIB_INCLUDE_DIRS})
+endif (ZLIB_FOUND)
 if (Boost_FOUND)
     include_directories (${Boost_INCLUDE_DIRS})
     add_definitions(-DHAVE_BOOST)
@@ -526,6 +530,7 @@ endif( )
 add_subdirectory (build-tools)
 foreach (module ${_modules})
     add_subdirectory (${module})
+
     set_target_properties(
       casa_${module}
       PROPERTIES
diff --git a/cmake/FindFFTW3.cmake b/cmake/FindFFTW3.cmake
index 886f3bebb..b47b47752 100644
--- a/cmake/FindFFTW3.cmake
+++ b/cmake/FindFFTW3.cmake
@@ -8,9 +8,9 @@
 #  FFTW3_INCLUDE_DIR          - the FFTW3 include directory (cached)
 #  FFTW3_INCLUDE_DIRS         - the FFTW3 include directories
 #                               (identical to FFTW3_INCLUDE_DIR)
-#  FFTW3[FL]?_LIBRARY         - the FFTW3 library - double, single(F), 
+#  FFTW3[FL]?_LIBRARY         - the FFTW3 library - double, single(F),
 #                               long-double(L) precision (cached)
-#  FFTW3[FL]?_THREADS_LIBRARY - the threaded FFTW3 library - double, single(F), 
+#  FFTW3[FL]?_THREADS_LIBRARY - the threaded FFTW3 library - double, single(F),
 #                               long-double(L) precision (cached)
 #  FFTW3_LIBRARIES            - list of all FFTW3 libraries found
 
@@ -58,15 +58,6 @@ foreach(_comp ${_components})
   endif(_comp STREQUAL "single")
 endforeach(_comp ${_components})
 
-# If using threads, we need to link against threaded libraries as well.
-if(_use_threads)
-  set(_thread_libs)
-  foreach(_lib ${_libraries})
-    list(APPEND _thread_libs ${_lib}_threads)
-  endforeach(_lib ${_libraries})
-  set(_libraries ${_thread_libs} ${_libraries})
-endif(_use_threads)
-
 # Keep a list of variable names that we need to pass on to
 # find_package_handle_standard_args().
 set(_check_list)
@@ -82,7 +73,7 @@ foreach(_lib ${_libraries})
 endforeach(_lib ${_libraries})
 
 # Search for the header file.
-find_path(FFTW3_INCLUDE_DIR fftw3.h 
+find_path(FFTW3_INCLUDE_DIR fftw3.h
   HINTS ${FFTW3_ROOT_DIR} PATH_SUFFIXES include)
 mark_as_advanced(FFTW3_INCLUDE_DIR)
 list(APPEND _check_list FFTW3_INCLUDE_DIR)
diff --git a/cmake/FindGSL.cmake b/cmake/FindGSL.cmake
deleted file mode 100644
index 4f4d31bf5..000000000
--- a/cmake/FindGSL.cmake
+++ /dev/null
@@ -1,150 +0,0 @@
-# Script found on KDE-edu list
-# Permission obtained from Jan Woetzel to use under a BSD-style license
-# (left to OpenCog to determine the specific BSD license, but this file should
-# be included in CMake proper soon...).
-#
-# Look for the header file
-# Try to find gnu scientific library GSL
-# See
-# http://www.gnu.org/software/gsl/  and
-# http://gnuwin32.sourceforge.net/packages/gsl.htm
-#
-# Once run this will define:
-#
-# GSL_FOUND       = system has GSL lib
-#
-# GSL_LIBRARIES   = full path to the libraries
-#    on Unix/Linux with additional linker flags from "gsl-config --libs"
-#
-# CMAKE_GSL_CXX_FLAGS  = Unix compiler flags for GSL, essentially "`gsl-config --cxxflags`"
-#
-# GSL_INCLUDE_DIR      = where to find headers
-#
-# GSL_LINK_DIRECTORIES = link directories, useful for rpath on Unix
-# GSL_EXE_LINKER_FLAGS = rpath on Unix
-#
-# Felix Woelk 07/2004
-# Jan Woetzel
-#
-# www.mip.informatik.uni-kiel.de
-# --------------------------------
-
-IF(WIN32)
-  # JW tested with gsl-1.8, Windows XP, MSVS 7.1
-  SET(GSL_POSSIBLE_ROOT_DIRS
-    ${GSL_ROOT_DIR}
-    $ENV{GSL_ROOT_DIR}
-    ${GSL_DIR}
-    ${GSL_HOME}
-    $ENV{GSL_DIR}
-    $ENV{GSL_HOME}
-    $ENV{EXTRA}
-    )
-  FIND_PATH(GSL_INCLUDE_DIR
-    NAMES gsl/gsl_cdf.h gsl/gsl_randist.h
-    PATHS ${GSL_POSSIBLE_ROOT_DIRS}
-    PATH_SUFFIXES include
-    DOC "GSL header include dir"
-    )
-
-  FIND_LIBRARY(GSL_GSL_LIBRARY
-    NAMES gsl libgsl
-    PATHS  ${GSL_POSSIBLE_ROOT_DIRS}
-    PATH_SUFFIXES lib
-    DOC "GSL library dir" )
-
-  FIND_LIBRARY(GSL_GSLCBLAS_LIBRARY
-    NAMES gslcblas libgslcblas
-    PATHS  ${GSL_POSSIBLE_ROOT_DIRS}
-    PATH_SUFFIXES lib
-    DOC "GSL cblas library dir" )
-
-  SET(GSL_LIBRARIES ${GSL_GSL_LIBRARY})
-
-  #MESSAGE("DBG\n"
-  #  "GSL_GSL_LIBRARY=${GSL_GSL_LIBRARY}\n"
-  #  "GSL_GSLCBLAS_LIBRARY=${GSL_GSLCBLAS_LIBRARY}\n"
-  #  "GSL_LIBRARIES=${GSL_LIBRARIES}")
-
-ELSE(WIN32)
-
-  IF(UNIX)
-    SET(GSL_CONFIG_PREFER_PATH
-      "$ENV{GSL_DIR}/bin"
-      "$ENV{GSL_DIR}"
-      "$ENV{GSL_HOME}/bin"
-      "$ENV{GSL_HOME}"
-      CACHE STRING "preferred path to GSL (gsl-config)")
-    FIND_PROGRAM(GSL_CONFIG gsl-config
-      ${GSL_CONFIG_PREFER_PATH}
-      /usr/bin/
-      )
-    # MESSAGE("DBG GSL_CONFIG ${GSL_CONFIG}")
-
-    IF (GSL_CONFIG)
-      # set CXXFLAGS to be fed into CXX_FLAGS by the user:
-      SET(GSL_CXX_FLAGS "`${GSL_CONFIG} --cflags`")
-
-      # set INCLUDE_DIRS to prefix+include
-      EXEC_PROGRAM(${GSL_CONFIG}
-        ARGS --prefix
-        OUTPUT_VARIABLE GSL_PREFIX)
-      SET(GSL_INCLUDE_DIR ${GSL_PREFIX}/include CACHE STRING INTERNAL)
-
-      # set link libraries and link flags
-      EXEC_PROGRAM(${GSL_CONFIG}
-        ARGS --libs
-        OUTPUT_VARIABLE GSL_LIBRARIES)
-      #SET(GSL_LIBRARIES "`${GSL_CONFIG} --libs`")
-
-      # extract link dirs for rpath
-      EXEC_PROGRAM(${GSL_CONFIG}
-        ARGS --libs
-        OUTPUT_VARIABLE GSL_CONFIG_LIBS )
-
-      # split off the link dirs (for rpath)
-      # use regular expression to match wildcard equivalent "-L*<endchar>"
-      # with <endchar> is a space or a semicolon
-      STRING(REGEX MATCHALL "[-][L]([^ ;])+"
-        GSL_LINK_DIRECTORIES_WITH_PREFIX
-        "${GSL_CONFIG_LIBS}" )
-      #      MESSAGE("DBG  GSL_LINK_DIRECTORIES_WITH_PREFIX=${GSL_LINK_DIRECTORIES_WITH_PREFIX}")
-
-      # remove prefix -L because we need the pure directory for LINK_DIRECTORIES
-
-      IF (GSL_LINK_DIRECTORIES_WITH_PREFIX)
-        STRING(REGEX REPLACE "[-][L]" "" GSL_LINK_DIRECTORIES ${GSL_LINK_DIRECTORIES_WITH_PREFIX} )
-      ENDIF (GSL_LINK_DIRECTORIES_WITH_PREFIX)
-      SET(GSL_EXE_LINKER_FLAGS "-Wl,-rpath,${GSL_LINK_DIRECTORIES}" CACHE STRING INTERNAL)
-      #      MESSAGE("DBG  GSL_LINK_DIRECTORIES=${GSL_LINK_DIRECTORIES}")
-      #      MESSAGE("DBG  GSL_EXE_LINKER_FLAGS=${GSL_EXE_LINKER_FLAGS}")
-
-      #      ADD_DEFINITIONS("-DHAVE_GSL")
-      #      SET(GSL_DEFINITIONS "-DHAVE_GSL")
-      MARK_AS_ADVANCED(
-        GSL_CXX_FLAGS
-        GSL_INCLUDE_DIR
-        GSL_LIBRARIES
-        GSL_LINK_DIRECTORIES
-        GSL_DEFINITIONS
-      )
-  	  #MESSAGE(STATUS "Using GSL from ${GSL_PREFIX}")
-
-    ELSE(GSL_CONFIG)
-      MESSAGE("FindGSL.cmake: gsl-config not found. Please set it manually. GSL_CONFIG=${GSL_CONFIG}")
-    ENDIF(GSL_CONFIG)
-
-  ENDIF(UNIX)
-ENDIF(WIN32)
-
-
-IF(GSL_LIBRARIES)
-  IF(GSL_INCLUDE_DIR OR GSL_CXX_FLAGS)
-    SET(GSL_FOUND 1)
-  ENDIF(GSL_INCLUDE_DIR OR GSL_CXX_FLAGS)
-ELSE(GSL_LIBRARIES)
-  IF (GSL_FIND_REQUIRED)
-    message(SEND_ERROR "FindGSL.cmake: Unable to find the required GSL libraries")
-  ENDIF(GSL_FIND_REQUIRED)
-ENDIF(GSL_LIBRARIES)
-
diff --git a/fits/CMakeLists.txt b/fits/CMakeLists.txt
index 2104c5612..cb2ad1d0d 100644
--- a/fits/CMakeLists.txt
+++ b/fits/CMakeLists.txt
@@ -24,7 +24,8 @@ FITS/blockio.cc
 FITS/FITSReader.cc
 )
 
-target_link_libraries (casa_fits casa_measures ${CFITSIO_LIBRARIES} ${CASACORE_ARCH_LIBS})
+find_package(ZLIB REQUIRED)
+target_link_libraries (casa_fits casa_measures ${CFITSIO_LIBRARIES} ${CASACORE_ARCH_LIBS} ${ZLIB_LIBRARIES})
 
 add_subdirectory (apps)
 
diff --git a/fits/apps/CMakeLists.txt b/fits/apps/CMakeLists.txt
index 578ee92d7..691ef87c9 100644
--- a/fits/apps/CMakeLists.txt
+++ b/fits/apps/CMakeLists.txt
@@ -1,3 +1,4 @@
+find_package(ZLIB REQUIRED)
 add_executable (fits2table  fits2table/fits2table.cc)
-target_link_libraries (fits2table casa_fits ${CASACORE_ARCH_LIBS})
+target_link_libraries (fits2table casa_fits ${CASACORE_ARCH_LIBS} ${ZLIB_LIBRARIES})
 install(TARGETS fits2table DESTINATION bin)
