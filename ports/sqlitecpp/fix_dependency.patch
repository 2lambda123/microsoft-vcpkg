diff --git a/CMakeLists.txt b/CMakeLists.txt
index df5693d..e5723d0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -295,9 +295,9 @@ else (SQLITECPP_INTERNAL_SQLITE)
             target_link_libraries(SQLiteCpp PRIVATE ${sqlcipher_LIBRARY})
         endif()
     else()
-        find_package (SQLite3 REQUIRED)
+        find_package (unofficial-sqlite3 CONFIG)
         message(STATUS "Link to sqlite3 system library")
-        target_link_libraries(SQLiteCpp PUBLIC SQLite::SQLite3)
+        target_link_libraries(SQLiteCpp PRIVATE unofficial::sqlite3::sqlite3)
         if(SQLite3_VERSION VERSION_LESS "3.19")
             set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS "-DSQLITECPP_HAS_MEM_STRUCT")
         endif()
diff --git a/cmake/SQLiteCppConfig.cmake.in b/cmake/SQLiteCppConfig.cmake.in
index 2b48df4..d0feda9 100644
--- a/cmake/SQLiteCppConfig.cmake.in
+++ b/cmake/SQLiteCppConfig.cmake.in
@@ -1,6 +1,6 @@
 include(CMakeFindDependencyMacro)
 if(NOT @SQLITECPP_INTERNAL_SQLITE@)
-    find_dependency(SQLite3 REQUIRED)
+    find_dependency(unofficial-sqlite3 REQUIRED)
 endif()
 if(@UNIX@)
     set(THREADS_PREFER_PTHREAD_FLAG @THREADS_PREFER_PTHREAD_FLAG@)
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ecc1ac2..0d5539f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -260,40 +260,8 @@ else (SQLITECPP_INTERNAL_SQLITE)
     # When using the SQLite codec, we need to link against the sqlcipher lib & include <sqlcipher/sqlite3.h>
     # So this gets the lib & header, and links/includes everything
     if(SQLITE_HAS_CODEC)
-        # Make PkgConfig optional since Windows doesn't usually have it installed.
-        find_package(PkgConfig QUIET)
-        if(PKG_CONFIG_FOUND)
-            # IMPORTED_TARGET was added in 3.6.3
-            if(CMAKE_VERSION VERSION_LESS 3.6.3)
-                pkg_check_modules(sqlcipher REQUIRED sqlcipher)
-                # Only used in Database.cpp so PRIVATE to hide from end-user
-                # Since we can't use IMPORTED_TARGET on this older Cmake version, manually link libs & includes
-                target_link_libraries(SQLiteCpp PRIVATE ${sqlcipher_LIBRARIES})
-                target_include_directories(SQLiteCpp PRIVATE ${sqlcipher_INCLUDE_DIRS})
-            else()
-                pkg_check_modules(sqlcipher REQUIRED IMPORTED_TARGET sqlcipher)
-                # Only used in Database.cpp so PRIVATE to hide from end-user
-                target_link_libraries(SQLiteCpp PRIVATE PkgConfig::sqlcipher)
-            endif()
-        else()
-            # Since we aren't using pkgconf here, find it manually
-            find_library(sqlcipher_LIBRARY "sqlcipher")
-            find_path(sqlcipher_INCLUDE_DIR "sqlcipher/sqlite3.h"
-                PATH_SUFFIXES
-                    "include"
-                    "includes"
-            )
-            # Hides it from the GUI
-            mark_as_advanced(sqlcipher_LIBRARY sqlcipher_INCLUDE_DIR)
-            if(NOT sqlcipher_INCLUDE_DIR)
-                message(FATAL_ERROR "${PROJECT_NAME} requires the \"<sqlcipher/sqlite3.h>\" header to use the codec functionality but it wasn't found.")
-            elseif(NOT sqlcipher_LIBRARY)
-                message(FATAL_ERROR "${PROJECT_NAME} requires the sqlcipher library to use the codec functionality but it wasn't found.")
-            endif()
-            # Only used in Database.cpp so PRIVATE to hide from end-user
-            target_include_directories(SQLiteCpp PRIVATE "${sqlcipher_INCLUDE_DIR}/sqlcipher")
-            target_link_libraries(SQLiteCpp PRIVATE ${sqlcipher_LIBRARY})
-        endif()
+        find_package(sqlcipher CONFIG REQUIRED)
+        target_link_libraries(SQLiteCpp PRIVATE sqlcipher::sqlcipher)
     else()
         find_package (unofficial-sqlite3 CONFIG)
         message(STATUS "Link to sqlite3 system library")
diff --git a/src/Database.cpp b/src/Database.cpp
index f0d8d28..eb16b4b 100644
--- a/src/Database.cpp
+++ b/src/Database.cpp
@@ -15,7 +15,11 @@
 #include <SQLiteCpp/Exception.h>
 #include <SQLiteCpp/Statement.h>

+#ifdef SQLITE_HAS_CODEC
+#include <sqlcipher/sqlite3.h>
+#else
 #include <sqlite3.h>
+#endif
 #include <fstream>
 #include <string.h>
 
