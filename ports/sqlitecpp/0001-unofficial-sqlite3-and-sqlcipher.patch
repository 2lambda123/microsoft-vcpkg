diff --git a/CMakeLists.txt b/CMakeLists.txt
index 85c1061..3e965a6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -33,6 +33,7 @@ if (MSVC)
     set(CPPCHECK_ARG_TEMPLATE   "--template=vs")
     # disable Visual Studio warnings for fopen() used in the example
     add_definitions(-D_CRT_SECURE_NO_WARNINGS)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251 /wd4275")
     # Flags for linking with multithread static C++ runtime, required by googletest
     if (SQLITECPP_BUILD_TESTS)
         message(STATUS "Linking against multithread static C++ runtime for unit tests with googletest")
@@ -172,6 +173,9 @@ source_group(scripts FILES ${SQLITECPP_SCRIPT})
 
 # add sources of the wrapper as a "SQLiteCpp" static library
 add_library(SQLiteCpp ${SQLITECPP_SRC} ${SQLITECPP_INC} ${SQLITECPP_DOC} ${SQLITECPP_SCRIPT})
+include(GenerateExportHeader)
+generate_export_header(SQLiteCpp
+    EXPORT_FILE_NAME ${CMAKE_CURRENT_SOURCE_DIR}/include/SQLiteCpp/sqlitecpp_export.h)
 
 # Options relative to SQLite and SQLiteC++ functions
 
@@ -232,16 +236,17 @@ if (SQLITECPP_INTERNAL_SQLITE)
     add_subdirectory(sqlite3)
     target_link_libraries(SQLiteCpp PUBLIC sqlite3)
 else (SQLITECPP_INTERNAL_SQLITE)
-    find_package (SQLite3 REQUIRED)
-    message(STATUS "Link to sqlite3 system library")
-    target_link_libraries(SQLiteCpp PUBLIC SQLite::SQLite3)
-    if(SQLite3_VERSION VERSION_LESS "3.19")
-        set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS "-DSQLITECPP_HAS_MEM_STRUCT")
-    endif()
+    if(NOT SQLITE_HAS_CODEC)
+		find_package(unofficial-sqlite3 CONFIG)
+		message(STATUS "Link to sqlite3 system library")
+		target_link_libraries(SQLiteCpp PRIVATE unofficial::sqlite3::sqlite3)
+		if(SQLite3_VERSION VERSION_LESS "3.19")
+			set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS "-DSQLITECPP_HAS_MEM_STRUCT")
+		endif()
+	else()
+		# When using the SQLite codec, we need to link against the sqlcipher lib & include <sqlcipher/sqlite3.h>
+		# So this gets the lib & header, and links/includes everything
 
-    # When using the SQLite codec, we need to link against the sqlcipher lib & include <sqlcipher/sqlite3.h>
-    # So this gets the lib & header, and links/includes everything
-    if(SQLITE_HAS_CODEC)
         # Make PkgConfig optional since Windows doesn't usually have it installed.
         find_package(PkgConfig QUIET)
         if(PKG_CONFIG_FOUND)
@@ -300,6 +305,7 @@ target_include_directories(SQLiteCpp
 include(GNUInstallDirs)
 install(TARGETS SQLiteCpp
     EXPORT ${PROJECT_NAME}Targets
+	RUNTIME DESTINATION bin
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
     COMPONENT libraries)
diff --git a/include/SQLiteCpp/Assertion.h b/include/SQLiteCpp/Assertion.h
index 9421f55..34fea05 100644
--- a/include/SQLiteCpp/Assertion.h
+++ b/include/SQLiteCpp/Assertion.h
@@ -11,6 +11,7 @@
 #pragma once
 
 #include <cassert>
+#include <SQLiteCpp/sqlitecpp_export.h>
 
 
 /**
@@ -26,7 +27,7 @@
 namespace SQLite
 {
     // declaration of the assert handler to define in user code
-    void assertion_failed(const char* apFile, const long apLine, const char* apFunc,
+    SQLITECPP_EXPORT void assertion_failed(const char* apFile, const long apLine, const char* apFunc,
                           const char* apExpr, const char* apMsg);
 
 #ifdef _MSC_VER
diff --git a/include/SQLiteCpp/Column.h b/include/SQLiteCpp/Column.h
index 48a9ee8..8670ee2 100644
--- a/include/SQLiteCpp/Column.h
+++ b/include/SQLiteCpp/Column.h
@@ -10,6 +10,7 @@
  */
 #pragma once
 
+#include <SQLiteCpp/sqlitecpp_export.h>
 #include <SQLiteCpp/Statement.h>
 #include <SQLiteCpp/Exception.h>
 
@@ -43,7 +44,7 @@ extern const int Null;      ///< SQLITE_NULL
  *    because of the way it shares the underling SQLite precompiled statement
  *    in a custom shared pointer (See the inner class "Statement::Ptr").
  */
-class Column
+class SQLITECPP_EXPORT Column
 {
 public:
     /**
diff --git a/include/SQLiteCpp/Database.h b/include/SQLiteCpp/Database.h
index 3c1b4d8..980b3e9 100644
--- a/include/SQLiteCpp/Database.h
+++ b/include/SQLiteCpp/Database.h
@@ -13,6 +13,7 @@
 #include <SQLiteCpp/Column.h>
 #include <memory>
 #include <string.h>
+#include <SQLiteCpp/sqlitecpp_export.h>
 
 // Forward declarations to avoid inclusion of <sqlite3.h> in a header
 struct sqlite3;
@@ -32,7 +33,7 @@ namespace SQLite
 // Those public constants enable most usages of SQLiteCpp without including <sqlite3.h> in the client application.
 
 /// The database is opened in read-only mode. If the database does not already exist, an error is returned.
-extern const int OPEN_READONLY;     // SQLITE_OPEN_READONLY
+SQLITECPP_EXPORT extern const int OPEN_READONLY;     // SQLITE_OPEN_READONLY
 /// The database is opened for reading and writing if possible, or reading only if the file is write protected
 /// by the operating system. In either case the database must already exist, otherwise an error is returned.
 extern const int OPEN_READWRITE;    // SQLITE_OPEN_READWRITE
@@ -98,7 +99,7 @@ struct Header {
  *    because of the way it shares the underling SQLite precompiled statement
  *    in a custom shared pointer (See the inner class "Statement::Ptr").
  */
-class Database
+class SQLITECPP_EXPORT Database
 {
     friend class Statement; // Give Statement constructor access to the mSQLitePtr Connection Handle
 
diff --git a/include/SQLiteCpp/Exception.h b/include/SQLiteCpp/Exception.h
index 4bd0003..bce99ae 100644
--- a/include/SQLiteCpp/Exception.h
+++ b/include/SQLiteCpp/Exception.h
@@ -12,6 +12,7 @@
 
 #include <stdexcept>
 #include <string>
+#include <SQLiteCpp/sqlitecpp_export.h>
 
 // Forward declaration to avoid inclusion of <sqlite3.h> in a header
 struct sqlite3;
@@ -23,7 +24,7 @@ namespace SQLite
 /**
  * @brief Encapsulation of the error message from SQLite3, based on std::runtime_error.
  */
-class Exception : public std::runtime_error
+class SQLITECPP_EXPORT Exception : public std::runtime_error
 {
 public:
     /**
diff --git a/include/SQLiteCpp/Statement.h b/include/SQLiteCpp/Statement.h
index a407417..863a4f0 100644
--- a/include/SQLiteCpp/Statement.h
+++ b/include/SQLiteCpp/Statement.h
@@ -10,6 +10,7 @@
  */
 #pragma once
 
+#include <SQLiteCpp/sqlitecpp_export.h>
 #include <SQLiteCpp/Exception.h>
 #include <SQLiteCpp/Utils.h> // SQLITECPP_PURE_FUNC
 
@@ -49,7 +50,7 @@ extern const int OK; ///< SQLITE_OK
  *    because of the way it shares the underling SQLite precompiled statement
  *    in a custom shared pointer (See the inner class "Statement::Ptr").
  */
-class Statement
+class SQLITECPP_EXPORT Statement
 {
     friend class Column; // For access to Statement::Ptr inner class
 
diff --git a/include/SQLiteCpp/Transaction.h b/include/SQLiteCpp/Transaction.h
index b4392e5..e23a3ab 100644
--- a/include/SQLiteCpp/Transaction.h
+++ b/include/SQLiteCpp/Transaction.h
@@ -10,6 +10,7 @@
  */
 #pragma once
 
+#include <SQLiteCpp/sqlitecpp_export.h>
 #include <SQLiteCpp/Exception.h>
 
 
@@ -40,7 +41,7 @@ class Database;
  *    because of the way it shares the underling SQLite precompiled statement
  *    in a custom shared pointer (See the inner class "Statement::Ptr").
  */
-class Transaction
+class SQLITECPP_EXPORT Transaction
 {
 public:
     /**
-- 
2.25.1.windows.1

