diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 65f51db..f5ff9e5 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -31,7 +31,7 @@
 # ########################################################################
 
 
-cmake_minimum_required( VERSION 2.8.10 )
+cmake_minimum_required( VERSION 3.0 )
 
 if( CMAKE_GENERATOR MATCHES "NMake" )
 	option( NMAKE_COMPILE_VERBOSE "Print compile and link strings to the console" OFF )
@@ -81,13 +81,6 @@ option( BUILD_RUNTIME "Build the RNG runtime library" ON )
 option( BUILD_CLIENT "Build a command line clRNG client program with a variety of configurable parameters" ON )
 option( BUILD_TEST "Build library tests" ON )
 #option( BUILD_LOADLIBRARIES "Build the optional dynamic load libraries that the RNG runtime will search for" ON )
-option( BUILD_SHARED_LIBRARY "Build shared libraries." ON)
-SET (LIB_TYPE STATIC)
-# If BOOST_ROOT is defined as an environment value, use that value and cache it so it's visible in the cmake-gui.  
-# Otherwise, create a sensible default that the user can change
-#if( DEFINED ENV{BOOST_ROOT} )
-#	set( BOOST_ROOT $ENV{BOOST_ROOT} CACHE PATH "Environment variable defining the root of the Boost installation" )
-#endif( )
 
 # Currently, linux has a problem outputing both narrow and wide characters,
 # which happens in our client because openCL only supports narrow characters
@@ -116,23 +109,6 @@ else()
 	endif()
 endif()
 
-# These variables are meant to contain string which should be appended to the installation paths 
-# of library and executable binaries, respectively.  They are meant to be user configurable/overridable.  
-set( SUFFIX_LIB_DEFAULT "" )
-set( SUFFIX_BIN_DEFAULT "" )
-
-# Modify the global find property to help us find libraries like Boost in the correct paths for 64-bit
-# Essentially, find_library calls will look for /lib64 instead of /lib; works for windows and linux
-if( BUILD64 )
-	set_property( GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS TRUE )
-	message( STATUS "64bit build - FIND_LIBRARY_USE_LIB64_PATHS TRUE" )
-
-    set( SUFFIX_LIB_DEFAULT "64" )
-else( )
-	set_property( GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS FALSE )
-	message( STATUS "32bit build - FIND_LIBRARY_USE_LIB64_PATHS FALSE" )
-endif( )
-
 set( SUFFIX_LIB ${SUFFIX_LIB_DEFAULT} CACHE STRING "String to append to 'lib' install path" )
 set( SUFFIX_BIN ${SUFFIX_BIN_DEFAULT} CACHE STRING "String to append to 'bin' install path" )
 
@@ -160,19 +136,11 @@ set( SUFFIX_BIN ${SUFFIX_BIN_DEFAULT} CACHE STRING "String to append to 'bin' in
 #   message( WARNING "Try setting Boost_DEBUG and Boost_DETAILED_FAILURE_MSG for more information" )
 #endif( )
 
-# This will define OPENCL_FOUND
-find_package( OpenCL )
-
-if( (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} VERSION_LESS 2.8) ) 
-	message( STATUS "Cmake version 2.8 or greater needed to use GTest" )
-else()
-	# This will define GTEST_FOUND
-	find_package( GTest )
+find_package( OpenCL REQUIRED )
+find_package( Threads REQUIRED )
 
-	# Hack to get googletest v1.6 to work with vs2012
-	if( MSVC11 )
-		add_definitions( "/D_VARIADIC_MAX=10" )
-	endif( )
+if( BUILD_TEST )
+  find_package( GTest REQUIRED )
 endif()
 
 # Enable building of the clACML client if both requested and all dependencies are found
@@ -190,41 +158,7 @@ endif( )
 #	set( UNIT_TEST OFF )
 #endif( )
 
-# FFLAGS depend on the compiler, grab the compiler name from the path
-get_filename_component( C_COMPILER_NAME ${CMAKE_C_COMPILER} NAME_WE )
-# message( "C_COMPILER_NAME: " ${C_COMPILER_NAME} )
-# message( "CMAKE_C_COMPILER: " ${CMAKE_C_COMPILER} )
-
-# Set common compile and link options
-if( MSVC )
-	# Following options for nMake
-	message( STATUS "Detected MSVS Ver: " ${MSVC_VERSION} )
-
-	# CMake sets huge stack frames for windows, for whatever reason.  We go with compiler default.
-	string( REGEX REPLACE "/STACK:[0-9]+" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}" )
-	string( REGEX REPLACE "/STACK:[0-9]+" "" CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS}" )
-	string( REGEX REPLACE "/STACK:[0-9]+" "" CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS}" ) 
-
-elseif( CMAKE_COMPILER_IS_GNUCXX )
-	message( STATUS "Detected GNU fortran compiler." )
-	EXEC_PROGRAM( ${CMAKE_CXX_COMPILER} ARGS --version OUTPUT_VARIABLE vnum )
-	STRING(REGEX REPLACE ".*([0-9])\\.([0-9])\\.([0-9]).*" "\\1\\2\\3" vnum ${vnum})
-	if( ${vnum} STREQUAL "452" )
-		# we only want c++0x if we're using gcc 4.5.2
-		set( CMAKE_CXX_FLAGS "-std=c++0x ${CMAKE_CXX_FLAGS}" )
-	endif()
-	
-	set( CMAKE_CXX_FLAGS "-pthread ${CMAKE_CXX_FLAGS}" )
-	set( CMAKE_C_FLAGS "-std=c11 -Wall -pedantic-errors -pthread ${CMAKE_C_FLAGS}" )
-	
-	if( BUILD64 )
-		set( CMAKE_CXX_FLAGS "-m64 ${CMAKE_CXX_FLAGS}" )
-		set( CMAKE_C_FLAGS "-m64 ${CMAKE_C_FLAGS}" )
-	else( )
-		set( CMAKE_CXX_FLAGS "-m32 ${CMAKE_CXX_FLAGS}" )
-		set( CMAKE_C_FLAGS "-m32 ${CMAKE_C_FLAGS}" )
-	endif( )
-
+if( CMAKE_COMPILER_IS_GNUCXX )
     if( CODE_COVERAGE )
         set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage")
         set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage")
@@ -296,13 +230,6 @@ else( )
   message( "RNG clients will NOT be built" )
 endif( )
 
-# Recurse into subdirectory and start building files there
-#if( BUILD_LOADLIBRARIES AND IS_DIRECTORY "${PROJECT_SOURCE_DIR}/statTimer" )
-#	add_subdirectory( statTimer )
-#else()
-#	message( "LoadLibraries will NOT be built" )
-#endif( )
-
 if( BUILD_TEST AND IS_DIRECTORY "${PROJECT_SOURCE_DIR}/tests" )
 	# enable_testing( )
 	add_subdirectory( tests )
diff --git a/src/FindOpenCL.cmake b/src/FindOpenCL.cmake
deleted file mode 100644
index 1028024..0000000
--- a/src/FindOpenCL.cmake
+++ /dev/null
@@ -1,115 +0,0 @@
-
-# ***********************************************************************
-# Copyright (c) 2015 Advanced Micro Devices, Inc. 
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without 
-# modification, are permitted provided that the following conditions 
-# are met:
-# 
-# 1. Redistributions of source code must retain the above copyright 
-# notice, this list of conditions and the following disclaimer.
-# 
-# 2. Redistributions in binary form must reproduce the above copyright 
-# notice, this list of conditions and the following disclaimer in the 
-# documentation and/or other materials provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
-# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
-# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR 
-# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
-# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
-# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
-# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
-# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
-# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
-# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-# 
-# ***********************************************************************
-
-# ########################################################################
-
-
-
-# Locate an OpenCL implementation.
-# Currently supports AMD APP SDK (http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx/)
-#
-# Defines the following variables:
-#
-#   OPENCL_FOUND - Found the OPENCL framework
-#   OPENCL_INCLUDE_DIRS - Include directories
-#
-# Also defines the library variables below as normal
-# variables.  These contain debug/optimized keywords when
-# a debugging library is found.
-#
-#   OPENCL_LIBRARIES - libopencl
-#
-# Accepts the following variables as input:
-#
-#   OPENCL_ROOT - (as a CMake or environment variable)
-#                The root directory of the OpenCL implementation found
-#
-#   FIND_LIBRARY_USE_LIB64_PATHS - Global property that controls whether findOpenCL should search for
-#                              64bit or 32bit libs
-#-----------------------
-# Example Usage:
-#
-#    find_package(OPENCL REQUIRED)
-#    include_directories(${OPENCL_INCLUDE_DIRS})
-#
-#    add_executable(foo foo.cc)
-#    target_link_libraries(foo ${OPENCL_LIBRARIES})
-#
-#-----------------------
-
-find_path(OPENCL_INCLUDE_DIRS
-    NAMES OpenCL/cl.h CL/cl.h
-    HINTS
-        ${OPENCL_ROOT}/include
-        $ENV{AMDAPPSDKROOT}/include
-        $ENV{CUDA_PATH}/include
-    PATHS
-        /usr/include
-        /usr/local/include
-    DOC "OpenCL header file path"
-)
-mark_as_advanced( OPENCL_INCLUDE_DIRS )
-
-# Search for 64bit libs if FIND_LIBRARY_USE_LIB64_PATHS is set to true in the global environment, 32bit libs else
-get_property( LIB64 GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS )
-
-if( LIB64 )
-    find_library( OPENCL_LIBRARIES
-        NAMES OpenCL
-        HINTS
-            ${OPENCL_ROOT}/lib
-            $ENV{AMDAPPSDKROOT}/lib
-            $ENV{CUDA_PATH}/lib
-        DOC "OpenCL dynamic library path"
-        PATH_SUFFIXES x86_64 x64
-        PATHS
-            /usr/lib
-    )
-else( )
-    find_library( OPENCL_LIBRARIES
-        NAMES OpenCL
-        HINTS
-            ${OPENCL_ROOT}/lib
-            $ENV{AMDAPPSDKROOT}/lib
-            $ENV{CUDA_PATH}/lib
-        DOC "OpenCL dynamic library path"
-        PATH_SUFFIXES x86 Win32
-        PATHS
-            /usr/lib
-    )
-endif( )
-mark_as_advanced( OPENCL_LIBRARIES )
-
-include( FindPackageHandleStandardArgs )
-FIND_PACKAGE_HANDLE_STANDARD_ARGS( OPENCL DEFAULT_MSG OPENCL_LIBRARIES OPENCL_INCLUDE_DIRS )
-
-if( NOT OPENCL_FOUND )
-    message( STATUS "FindOpenCL looked for libraries named: OpenCL" )
-endif()
diff --git a/src/library/CMakeLists.txt b/src/library/CMakeLists.txt
index dbe479d..6342772 100644
--- a/src/library/CMakeLists.txt
+++ b/src/library/CMakeLists.txt
@@ -62,15 +62,16 @@ set( clRNG.Headers  private.h
 
 set( clRNG.Files ${clRNG.Source} ${clRNG.Headers} )
 
-# Include standard OpenCL headers
-include_directories( ${OPENCL_INCLUDE_DIRS} ${PROJECT_BINARY_DIR}/include ../include )
+add_library( clRNG ${clRNG.Files} )
 
-if(BUILD_SHARED_LIBRARY)
-  add_library( clRNG SHARED ${clRNG.Files} )
-else()
-  add_library( clRNG STATIC ${clRNG.Files} )
-endif()
-target_link_libraries( clRNG ${OPENCL_LIBRARIES} )
+target_link_libraries( clRNG PUBLIC
+  OpenCL::OpenCL
+  Threads::Threads
+)
+target_include_directories( clRNG PUBLIC
+  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
+  $<INSTALL_INTERFACE:include>
+)
 
 set_target_properties( clRNG PROPERTIES VERSION ${CLRNG_VERSION} )
 set_target_properties( clRNG PROPERTIES SOVERSION ${CLRNG_SOVERSION} )
@@ -89,7 +90,7 @@ install( TARGETS clRNG
         EXPORT clRNG-Targets
         RUNTIME DESTINATION bin${SUFFIX_BIN}
         LIBRARY DESTINATION lib${SUFFIX_LIB}
-        ARCHIVE DESTINATION lib${SUFFIX_LIB}/import
+        ARCHIVE DESTINATION lib${SUFFIX_LIB}
         )
         
 # CMake config files for clRNG
@@ -152,6 +153,6 @@ install(    DIRECTORY ${PROJECT_BINARY_DIR}/staging/
 
 # Install a snapshot of the source as it was for this build; useful for the .pdb's
 install(    DIRECTORY ${PROJECT_SOURCE_DIR}
-  DESTINATION ${CLRNG_RUNTIME_DESTINATION}
+  DESTINATION "."
             OPTIONAL
             CONFIGURATIONS Debug )
